!function(t){function e(e){for(var r,o,i=e[0],a=e[1],s=0,d=[];s<i.length;s++)o=i[s],Object.prototype.hasOwnProperty.call(n,o)&&n[o]&&d.push(n[o][0]),n[o]=0;for(r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r]);for(l&&l(e);d.length;)d.shift()()}var r={},n={1:0};function o(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.e=function(t){var e=[],r=n[t];if(0!==r)if(r)e.push(r[2]);else{var i=new Promise((function(e,o){r=n[t]=[e,o]}));e.push(r[2]=i);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(t){return o.p+""+({0:"circlepack",2:"plotCommunity",3:"plotHashtags",4:"vendors~plotCommunity",5:"vendors~plotHashtags"}[t]||t)+".js"}(t);var l=new Error;a=function(e){s.onerror=s.onload=null,clearTimeout(d);var r=n[t];if(0!==r){if(r){var o=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;l.message="Loading chunk "+t+" failed.\n("+o+": "+i+")",l.name="ChunkLoadError",l.type=o,l.request=i,r[1](l)}n[t]=void 0}};var d=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(e)},o.m=t,o.c=r,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)o.d(r,n,function(e){return t[e]}.bind(null,n));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o.oe=function(t){throw console.error(t),t};var i=window.webpackJsonp=window.webpackJsonp||[],a=i.push.bind(i);i.push=e,i=i.slice();for(var s=0;s<i.length;s++)e(i[s]);var l=a;o(o.s=223)}([,function(t,e,r){var n;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(e,r){"use strict";"object"==typeof t.exports?t.exports=e.document?r(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return r(t)}:r(e)}("undefined"!=typeof window?window:this,(function(r,o){"use strict";var i=[],a=Object.getPrototypeOf,s=i.slice,l=i.flat?function(t){return i.flat.call(t)}:function(t){return i.concat.apply([],t)},d=i.push,c=i.indexOf,u={},p=u.toString,h=u.hasOwnProperty,f=h.toString,m=f.call(Object),g={},b=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},v=function(t){return null!=t&&t===t.window},y=r.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,r){var n,o,i=(r=r||y).createElement("script");if(i.text=t,e)for(n in x)(o=e[n]||e.getAttribute&&e.getAttribute(n))&&i.setAttribute(n,o);r.head.appendChild(i).parentNode.removeChild(i)}function _(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?u[p.call(t)]||"object":typeof t}var k=function(t,e){return new k.fn.init(t,e)};function E(t){var e=!!t&&"length"in t&&t.length,r=_(t);return!b(t)&&!v(t)&&("array"===r||0===e||"number"==typeof e&&e>0&&e-1 in t)}k.fn=k.prototype={jquery:"3.5.1",constructor:k,length:0,toArray:function(){return s.call(this)},get:function(t){return null==t?s.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=k.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return k.each(this,t)},map:function(t){return this.pushStack(k.map(this,(function(e,r){return t.call(e,r,e)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(k.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(k.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,r=+t+(t<0?e:0);return this.pushStack(r>=0&&r<e?[this[r]]:[])},end:function(){return this.prevObject||this.constructor()},push:d,sort:i.sort,splice:i.splice},k.extend=k.fn.extend=function(){var t,e,r,n,o,i,a=arguments[0]||{},s=1,l=arguments.length,d=!1;for("boolean"==typeof a&&(d=a,a=arguments[s]||{},s++),"object"==typeof a||b(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)n=t[e],"__proto__"!==e&&a!==n&&(d&&n&&(k.isPlainObject(n)||(o=Array.isArray(n)))?(r=a[e],i=o&&!Array.isArray(r)?[]:o||k.isPlainObject(r)?r:{},o=!1,a[e]=k.extend(d,i,n)):void 0!==n&&(a[e]=n));return a},k.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,r;return!(!t||"[object Object]"!==p.call(t))&&(!(e=a(t))||"function"==typeof(r=h.call(e,"constructor")&&e.constructor)&&f.call(r)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,r){w(t,{nonce:e&&e.nonce},r)},each:function(t,e){var r,n=0;if(E(t))for(r=t.length;n<r&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},makeArray:function(t,e){var r=e||[];return null!=t&&(E(Object(t))?k.merge(r,"string"==typeof t?[t]:t):d.call(r,t)),r},inArray:function(t,e,r){return null==e?-1:c.call(e,t,r)},merge:function(t,e){for(var r=+e.length,n=0,o=t.length;n<r;n++)t[o++]=e[n];return t.length=o,t},grep:function(t,e,r){for(var n=[],o=0,i=t.length,a=!r;o<i;o++)!e(t[o],o)!==a&&n.push(t[o]);return n},map:function(t,e,r){var n,o,i=0,a=[];if(E(t))for(n=t.length;i<n;i++)null!=(o=e(t[i],i,r))&&a.push(o);else for(i in t)null!=(o=e(t[i],i,r))&&a.push(o);return l(a)},guid:1,support:g}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=i[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){u["[object "+e+"]"]=e.toLowerCase()}));var C=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(t){var e,r,n,o,i,a,s,l,d,c,u,p,h,f,m,g,b,v,y,x="sizzle"+1*new Date,w=t.document,_=0,k=0,E=lt(),C=lt(),T=lt(),S=lt(),A=function(t,e){return t===e&&(u=!0),0},L={}.hasOwnProperty,D=[],N=D.pop,O=D.push,M=D.push,j=D.slice,z=function(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",I="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\["+R+"*("+I+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+R+"*\\]",G=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",q=new RegExp(R+"+","g"),H=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),B=new RegExp("^"+R+"*,"+R+"*"),U=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),$=new RegExp(R+"|>"),W=new RegExp(G),V=new RegExp("^"+I+"$"),K={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+G),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),rt=function(t,e){var r="0x"+t.slice(1)-65536;return e||(r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320))},nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ot=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},it=function(){p()},at=xt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{M.apply(D=j.call(w.childNodes),w.childNodes),D[w.childNodes.length].nodeType}catch(t){M={apply:D.length?function(t,e){O.apply(t,j.call(e))}:function(t,e){for(var r=t.length,n=0;t[r++]=e[n++];);t.length=r-1}}}function st(t,e,n,o){var i,s,d,c,u,f,b,v=e&&e.ownerDocument,w=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==w&&9!==w&&11!==w)return n;if(!o&&(p(e),e=e||h,m)){if(11!==w&&(u=J.exec(t)))if(i=u[1]){if(9===w){if(!(d=e.getElementById(i)))return n;if(d.id===i)return n.push(d),n}else if(v&&(d=v.getElementById(i))&&y(e,d)&&d.id===i)return n.push(d),n}else{if(u[2])return M.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&r.getElementsByClassName&&e.getElementsByClassName)return M.apply(n,e.getElementsByClassName(i)),n}if(r.qsa&&!S[t+" "]&&(!g||!g.test(t))&&(1!==w||"object"!==e.nodeName.toLowerCase())){if(b=t,v=e,1===w&&($.test(t)||U.test(t))){for((v=tt.test(t)&&bt(e.parentNode)||e)===e&&r.scope||((c=e.getAttribute("id"))?c=c.replace(nt,ot):e.setAttribute("id",c=x)),s=(f=a(t)).length;s--;)f[s]=(c?"#"+c:":scope")+" "+yt(f[s]);b=f.join(",")}try{return M.apply(n,v.querySelectorAll(b)),n}catch(e){S(t,!0)}finally{c===x&&e.removeAttribute("id")}}}return l(t.replace(H,"$1"),e,n,o)}function lt(){var t=[];return function e(r,o){return t.push(r+" ")>n.cacheLength&&delete e[t.shift()],e[r+" "]=o}}function dt(t){return t[x]=!0,t}function ct(t){var e=h.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ut(t,e){for(var r=t.split("|"),o=r.length;o--;)n.attrHandle[r[o]]=e}function pt(t,e){var r=e&&t,n=r&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(r)for(;r=r.nextSibling;)if(r===e)return-1;return t?1:-1}function ht(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var r=e.nodeName.toLowerCase();return("input"===r||"button"===r)&&e.type===t}}function mt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&at(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function gt(t){return dt((function(e){return e=+e,dt((function(r,n){for(var o,i=t([],r.length,e),a=i.length;a--;)r[o=i[a]]&&(r[o]=!(n[o]=r[o]))}))}))}function bt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in r=st.support={},i=st.isXML=function(t){var e=t.namespaceURI,r=(t.ownerDocument||t).documentElement;return!Y.test(e||r&&r.nodeName||"HTML")},p=st.setDocument=function(t){var e,o,a=t?t.ownerDocument||t:w;return a!=h&&9===a.nodeType&&a.documentElement?(f=(h=a).documentElement,m=!i(h),w!=h&&(o=h.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",it,!1):o.attachEvent&&o.attachEvent("onunload",it)),r.scope=ct((function(t){return f.appendChild(t).appendChild(h.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),r.attributes=ct((function(t){return t.className="i",!t.getAttribute("className")})),r.getElementsByTagName=ct((function(t){return t.appendChild(h.createComment("")),!t.getElementsByTagName("*").length})),r.getElementsByClassName=Q.test(h.getElementsByClassName),r.getById=ct((function(t){return f.appendChild(t).id=x,!h.getElementsByName||!h.getElementsByName(x).length})),r.getById?(n.filter.ID=function(t){var e=t.replace(et,rt);return function(t){return t.getAttribute("id")===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var r=e.getElementById(t);return r?[r]:[]}}):(n.filter.ID=function(t){var e=t.replace(et,rt);return function(t){var r=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return r&&r.value===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var r,n,o,i=e.getElementById(t);if(i){if((r=i.getAttributeNode("id"))&&r.value===t)return[i];for(o=e.getElementsByName(t),n=0;i=o[n++];)if((r=i.getAttributeNode("id"))&&r.value===t)return[i]}return[]}}),n.find.TAG=r.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):r.qsa?e.querySelectorAll(t):void 0}:function(t,e){var r,n=[],o=0,i=e.getElementsByTagName(t);if("*"===t){for(;r=i[o++];)1===r.nodeType&&n.push(r);return n}return i},n.find.CLASS=r.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&m)return e.getElementsByClassName(t)},b=[],g=[],(r.qsa=Q.test(h.querySelectorAll))&&(ct((function(t){var e;f.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+R+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+R+"*(?:value|"+P+")"),t.querySelectorAll("[id~="+x+"-]").length||g.push("~="),(e=h.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||g.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]"),t.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ct((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=h.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+R+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")}))),(r.matchesSelector=Q.test(v=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ct((function(t){r.disconnectedMatch=v.call(t,"*"),v.call(t,"[s!='']:x"),b.push("!=",G)})),g=g.length&&new RegExp(g.join("|")),b=b.length&&new RegExp(b.join("|")),e=Q.test(f.compareDocumentPosition),y=e||Q.test(f.contains)?function(t,e){var r=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(r.contains?r.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},A=e?function(t,e){if(t===e)return u=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!r.sortDetached&&e.compareDocumentPosition(t)===n?t==h||t.ownerDocument==w&&y(w,t)?-1:e==h||e.ownerDocument==w&&y(w,e)?1:c?z(c,t)-z(c,e):0:4&n?-1:1)}:function(t,e){if(t===e)return u=!0,0;var r,n=0,o=t.parentNode,i=e.parentNode,a=[t],s=[e];if(!o||!i)return t==h?-1:e==h?1:o?-1:i?1:c?z(c,t)-z(c,e):0;if(o===i)return pt(t,e);for(r=t;r=r.parentNode;)a.unshift(r);for(r=e;r=r.parentNode;)s.unshift(r);for(;a[n]===s[n];)n++;return n?pt(a[n],s[n]):a[n]==w?-1:s[n]==w?1:0},h):h},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if(p(t),r.matchesSelector&&m&&!S[e+" "]&&(!b||!b.test(e))&&(!g||!g.test(e)))try{var n=v.call(t,e);if(n||r.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){S(e,!0)}return st(e,h,null,[t]).length>0},st.contains=function(t,e){return(t.ownerDocument||t)!=h&&p(t),y(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!=h&&p(t);var o=n.attrHandle[e.toLowerCase()],i=o&&L.call(n.attrHandle,e.toLowerCase())?o(t,e,!m):void 0;return void 0!==i?i:r.attributes||!m?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},st.escape=function(t){return(t+"").replace(nt,ot)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,n=[],o=0,i=0;if(u=!r.detectDuplicates,c=!r.sortStable&&t.slice(0),t.sort(A),u){for(;e=t[i++];)e===t[i]&&(o=n.push(i));for(;o--;)t.splice(n[o],1)}return c=null,t},o=st.getText=function(t){var e,r="",n=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)r+=o(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[n++];)r+=o(e);return r},(n=st.selectors={cacheLength:50,createPseudo:dt,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,rt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,rt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,r=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":r&&W.test(r)&&(e=a(r,!0))&&(e=r.indexOf(")",r.length-e)-r.length)&&(t[0]=t[0].slice(0,e),t[2]=r.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,rt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=E[t+" "];return e||(e=new RegExp("(^|"+R+")"+t+"("+R+"|$)"))&&E(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,r){return function(n){var o=st.attr(n,t);return null==o?"!="===e:!e||(o+="","="===e?o===r:"!="===e?o!==r:"^="===e?r&&0===o.indexOf(r):"*="===e?r&&o.indexOf(r)>-1:"$="===e?r&&o.slice(-r.length)===r:"~="===e?(" "+o.replace(q," ")+" ").indexOf(r)>-1:"|="===e&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(t,e,r,n,o){var i="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===n&&0===o?function(t){return!!t.parentNode}:function(e,r,l){var d,c,u,p,h,f,m=i!==a?"nextSibling":"previousSibling",g=e.parentNode,b=s&&e.nodeName.toLowerCase(),v=!l&&!s,y=!1;if(g){if(i){for(;m;){for(p=e;p=p[m];)if(s?p.nodeName.toLowerCase()===b:1===p.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[a?g.firstChild:g.lastChild],a&&v){for(y=(h=(d=(c=(u=(p=g)[x]||(p[x]={}))[p.uniqueID]||(u[p.uniqueID]={}))[t]||[])[0]===_&&d[1])&&d[2],p=h&&g.childNodes[h];p=++h&&p&&p[m]||(y=h=0)||f.pop();)if(1===p.nodeType&&++y&&p===e){c[t]=[_,h,y];break}}else if(v&&(y=h=(d=(c=(u=(p=e)[x]||(p[x]={}))[p.uniqueID]||(u[p.uniqueID]={}))[t]||[])[0]===_&&d[1]),!1===y)for(;(p=++h&&p&&p[m]||(y=h=0)||f.pop())&&((s?p.nodeName.toLowerCase()!==b:1!==p.nodeType)||!++y||(v&&((c=(u=p[x]||(p[x]={}))[p.uniqueID]||(u[p.uniqueID]={}))[t]=[_,y]),p!==e)););return(y-=o)===n||y%n==0&&y/n>=0}}},PSEUDO:function(t,e){var r,o=n.pseudos[t]||n.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return o[x]?o(e):o.length>1?(r=[t,t,"",e],n.setFilters.hasOwnProperty(t.toLowerCase())?dt((function(t,r){for(var n,i=o(t,e),a=i.length;a--;)t[n=z(t,i[a])]=!(r[n]=i[a])})):function(t){return o(t,0,r)}):o}},pseudos:{not:dt((function(t){var e=[],r=[],n=s(t.replace(H,"$1"));return n[x]?dt((function(t,e,r,o){for(var i,a=n(t,null,o,[]),s=t.length;s--;)(i=a[s])&&(t[s]=!(e[s]=i))})):function(t,o,i){return e[0]=t,n(e,null,i,r),e[0]=null,!r.pop()}})),has:dt((function(t){return function(e){return st(t,e).length>0}})),contains:dt((function(t){return t=t.replace(et,rt),function(e){return(e.textContent||o(e)).indexOf(t)>-1}})),lang:dt((function(t){return V.test(t||"")||st.error("unsupported lang: "+t),t=t.replace(et,rt).toLowerCase(),function(e){var r;do{if(r=m?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(r=r.toLowerCase())===t||0===r.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var r=t.location&&t.location.hash;return r&&r.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:mt(!1),disabled:mt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!n.pseudos.empty(t)},header:function(t){return X.test(t.nodeName)},input:function(t){return Z.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:gt((function(){return[0]})),last:gt((function(t,e){return[e-1]})),eq:gt((function(t,e,r){return[r<0?r+e:r]})),even:gt((function(t,e){for(var r=0;r<e;r+=2)t.push(r);return t})),odd:gt((function(t,e){for(var r=1;r<e;r+=2)t.push(r);return t})),lt:gt((function(t,e,r){for(var n=r<0?r+e:r>e?e:r;--n>=0;)t.push(n);return t})),gt:gt((function(t,e,r){for(var n=r<0?r+e:r;++n<e;)t.push(n);return t}))}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[e]=ht(e);for(e in{submit:!0,reset:!0})n.pseudos[e]=ft(e);function vt(){}function yt(t){for(var e=0,r=t.length,n="";e<r;e++)n+=t[e].value;return n}function xt(t,e,r){var n=e.dir,o=e.next,i=o||n,a=r&&"parentNode"===i,s=k++;return e.first?function(e,r,o){for(;e=e[n];)if(1===e.nodeType||a)return t(e,r,o);return!1}:function(e,r,l){var d,c,u,p=[_,s];if(l){for(;e=e[n];)if((1===e.nodeType||a)&&t(e,r,l))return!0}else for(;e=e[n];)if(1===e.nodeType||a)if(c=(u=e[x]||(e[x]={}))[e.uniqueID]||(u[e.uniqueID]={}),o&&o===e.nodeName.toLowerCase())e=e[n]||e;else{if((d=c[i])&&d[0]===_&&d[1]===s)return p[2]=d[2];if(c[i]=p,p[2]=t(e,r,l))return!0}return!1}}function wt(t){return t.length>1?function(e,r,n){for(var o=t.length;o--;)if(!t[o](e,r,n))return!1;return!0}:t[0]}function _t(t,e,r,n,o){for(var i,a=[],s=0,l=t.length,d=null!=e;s<l;s++)(i=t[s])&&(r&&!r(i,n,o)||(a.push(i),d&&e.push(s)));return a}function kt(t,e,r,n,o,i){return n&&!n[x]&&(n=kt(n)),o&&!o[x]&&(o=kt(o,i)),dt((function(i,a,s,l){var d,c,u,p=[],h=[],f=a.length,m=i||function(t,e,r){for(var n=0,o=e.length;n<o;n++)st(t,e[n],r);return r}(e||"*",s.nodeType?[s]:s,[]),g=!t||!i&&e?m:_t(m,p,t,s,l),b=r?o||(i?t:f||n)?[]:a:g;if(r&&r(g,b,s,l),n)for(d=_t(b,h),n(d,[],s,l),c=d.length;c--;)(u=d[c])&&(b[h[c]]=!(g[h[c]]=u));if(i){if(o||t){if(o){for(d=[],c=b.length;c--;)(u=b[c])&&d.push(g[c]=u);o(null,b=[],d,l)}for(c=b.length;c--;)(u=b[c])&&(d=o?z(i,u):p[c])>-1&&(i[d]=!(a[d]=u))}}else b=_t(b===a?b.splice(f,b.length):b),o?o(null,a,b,l):M.apply(a,b)}))}function Et(t){for(var e,r,o,i=t.length,a=n.relative[t[0].type],s=a||n.relative[" "],l=a?1:0,c=xt((function(t){return t===e}),s,!0),u=xt((function(t){return z(e,t)>-1}),s,!0),p=[function(t,r,n){var o=!a&&(n||r!==d)||((e=r).nodeType?c(t,r,n):u(t,r,n));return e=null,o}];l<i;l++)if(r=n.relative[t[l].type])p=[xt(wt(p),r)];else{if((r=n.filter[t[l].type].apply(null,t[l].matches))[x]){for(o=++l;o<i&&!n.relative[t[o].type];o++);return kt(l>1&&wt(p),l>1&&yt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(H,"$1"),r,l<o&&Et(t.slice(l,o)),o<i&&Et(t=t.slice(o)),o<i&&yt(t))}p.push(r)}return wt(p)}return vt.prototype=n.filters=n.pseudos,n.setFilters=new vt,a=st.tokenize=function(t,e){var r,o,i,a,s,l,d,c=C[t+" "];if(c)return e?0:c.slice(0);for(s=t,l=[],d=n.preFilter;s;){for(a in r&&!(o=B.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(i=[])),r=!1,(o=U.exec(s))&&(r=o.shift(),i.push({value:r,type:o[0].replace(H," ")}),s=s.slice(r.length)),n.filter)!(o=K[a].exec(s))||d[a]&&!(o=d[a](o))||(r=o.shift(),i.push({value:r,type:a,matches:o}),s=s.slice(r.length));if(!r)break}return e?s.length:s?st.error(t):C(t,l).slice(0)},s=st.compile=function(t,e){var r,o=[],i=[],s=T[t+" "];if(!s){for(e||(e=a(t)),r=e.length;r--;)(s=Et(e[r]))[x]?o.push(s):i.push(s);(s=T(t,function(t,e){var r=e.length>0,o=t.length>0,i=function(i,a,s,l,c){var u,f,g,b=0,v="0",y=i&&[],x=[],w=d,k=i||o&&n.find.TAG("*",c),E=_+=null==w?1:Math.random()||.1,C=k.length;for(c&&(d=a==h||a||c);v!==C&&null!=(u=k[v]);v++){if(o&&u){for(f=0,a||u.ownerDocument==h||(p(u),s=!m);g=t[f++];)if(g(u,a||h,s)){l.push(u);break}c&&(_=E)}r&&((u=!g&&u)&&b--,i&&y.push(u))}if(b+=v,r&&v!==b){for(f=0;g=e[f++];)g(y,x,a,s);if(i){if(b>0)for(;v--;)y[v]||x[v]||(x[v]=N.call(l));x=_t(x)}M.apply(l,x),c&&!i&&x.length>0&&b+e.length>1&&st.uniqueSort(l)}return c&&(_=E,d=w),y};return r?dt(i):i}(i,o))).selector=t}return s},l=st.select=function(t,e,r,o){var i,l,d,c,u,p="function"==typeof t&&t,h=!o&&a(t=p.selector||t);if(r=r||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(d=l[0]).type&&9===e.nodeType&&m&&n.relative[l[1].type]){if(!(e=(n.find.ID(d.matches[0].replace(et,rt),e)||[])[0]))return r;p&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(i=K.needsContext.test(t)?0:l.length;i--&&(d=l[i],!n.relative[c=d.type]);)if((u=n.find[c])&&(o=u(d.matches[0].replace(et,rt),tt.test(l[0].type)&&bt(e.parentNode)||e))){if(l.splice(i,1),!(t=o.length&&yt(l)))return M.apply(r,o),r;break}}return(p||s(t,h))(o,e,!m,r,!e||tt.test(t)&&bt(e.parentNode)||e),r},r.sortStable=x.split("").sort(A).join("")===x,r.detectDuplicates=!!u,p(),r.sortDetached=ct((function(t){return 1&t.compareDocumentPosition(h.createElement("fieldset"))})),ct((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ut("type|href|height|width",(function(t,e,r){if(!r)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),r.attributes&&ct((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ut("value",(function(t,e,r){if(!r&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ct((function(t){return null==t.getAttribute("disabled")}))||ut(P,(function(t,e,r){var n;if(!r)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null})),st}(r);k.find=C,k.expr=C.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=C.uniqueSort,k.text=C.getText,k.isXMLDoc=C.isXML,k.contains=C.contains,k.escapeSelector=C.escape;var T=function(t,e,r){for(var n=[],o=void 0!==r;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&k(t).is(r))break;n.push(t)}return n},S=function(t,e){for(var r=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&r.push(t);return r},A=k.expr.match.needsContext;function L(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(t,e,r){return b(e)?k.grep(t,(function(t,n){return!!e.call(t,n,t)!==r})):e.nodeType?k.grep(t,(function(t){return t===e!==r})):"string"!=typeof e?k.grep(t,(function(t){return c.call(e,t)>-1!==r})):k.filter(e,t,r)}k.filter=function(t,e,r){var n=e[0];return r&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?k.find.matchesSelector(n,t)?[n]:[]:k.find.matches(t,k.grep(e,(function(t){return 1===t.nodeType})))},k.fn.extend({find:function(t){var e,r,n=this.length,o=this;if("string"!=typeof t)return this.pushStack(k(t).filter((function(){for(e=0;e<n;e++)if(k.contains(o[e],this))return!0})));for(r=this.pushStack([]),e=0;e<n;e++)k.find(t,o[e],r);return n>1?k.uniqueSort(r):r},filter:function(t){return this.pushStack(N(this,t||[],!1))},not:function(t){return this.pushStack(N(this,t||[],!0))},is:function(t){return!!N(this,"string"==typeof t&&A.test(t)?k(t):t||[],!1).length}});var O,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(t,e,r){var n,o;if(!t)return this;if(r=r||O,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:M.exec(t))||!n[1]&&e)return!e||e.jquery?(e||r).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof k?e[0]:e,k.merge(this,k.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:y,!0)),D.test(n[1])&&k.isPlainObject(e))for(n in e)b(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(o=y.getElementById(n[2]))&&(this[0]=o,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):b(t)?void 0!==r.ready?r.ready(t):t(k):k.makeArray(t,this)}).prototype=k.fn,O=k(y);var j=/^(?:parents|prev(?:Until|All))/,z={children:!0,contents:!0,next:!0,prev:!0};function P(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}k.fn.extend({has:function(t){var e=k(t,this),r=e.length;return this.filter((function(){for(var t=0;t<r;t++)if(k.contains(this,e[t]))return!0}))},closest:function(t,e){var r,n=0,o=this.length,i=[],a="string"!=typeof t&&k(t);if(!A.test(t))for(;n<o;n++)for(r=this[n];r&&r!==e;r=r.parentNode)if(r.nodeType<11&&(a?a.index(r)>-1:1===r.nodeType&&k.find.matchesSelector(r,t))){i.push(r);break}return this.pushStack(i.length>1?k.uniqueSort(i):i)},index:function(t){return t?"string"==typeof t?c.call(k(t),this[0]):c.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),k.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return T(t,"parentNode")},parentsUntil:function(t,e,r){return T(t,"parentNode",r)},next:function(t){return P(t,"nextSibling")},prev:function(t){return P(t,"previousSibling")},nextAll:function(t){return T(t,"nextSibling")},prevAll:function(t){return T(t,"previousSibling")},nextUntil:function(t,e,r){return T(t,"nextSibling",r)},prevUntil:function(t,e,r){return T(t,"previousSibling",r)},siblings:function(t){return S((t.parentNode||{}).firstChild,t)},children:function(t){return S(t.firstChild)},contents:function(t){return null!=t.contentDocument&&a(t.contentDocument)?t.contentDocument:(L(t,"template")&&(t=t.content||t),k.merge([],t.childNodes))}},(function(t,e){k.fn[t]=function(r,n){var o=k.map(this,e,r);return"Until"!==t.slice(-5)&&(n=r),n&&"string"==typeof n&&(o=k.filter(n,o)),this.length>1&&(z[t]||k.uniqueSort(o),j.test(t)&&o.reverse()),this.pushStack(o)}}));var R=/[^\x20\t\r\n\f]+/g;function I(t){return t}function F(t){throw t}function G(t,e,r,n){var o;try{t&&b(o=t.promise)?o.call(t).done(e).fail(r):t&&b(o=t.then)?o.call(t,e,r):e.apply(void 0,[t].slice(n))}catch(t){r.apply(void 0,[t])}}k.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return k.each(t.match(R)||[],(function(t,r){e[r]=!0})),e}(t):k.extend({},t);var e,r,n,o,i=[],a=[],s=-1,l=function(){for(o=o||t.once,n=e=!0;a.length;s=-1)for(r=a.shift();++s<i.length;)!1===i[s].apply(r[0],r[1])&&t.stopOnFalse&&(s=i.length,r=!1);t.memory||(r=!1),e=!1,o&&(i=r?[]:"")},d={add:function(){return i&&(r&&!e&&(s=i.length-1,a.push(r)),function e(r){k.each(r,(function(r,n){b(n)?t.unique&&d.has(n)||i.push(n):n&&n.length&&"string"!==_(n)&&e(n)}))}(arguments),r&&!e&&l()),this},remove:function(){return k.each(arguments,(function(t,e){for(var r;(r=k.inArray(e,i,r))>-1;)i.splice(r,1),r<=s&&s--})),this},has:function(t){return t?k.inArray(t,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=r="",this},disabled:function(){return!i},lock:function(){return o=a=[],r||e||(i=r=""),this},locked:function(){return!!o},fireWith:function(t,r){return o||(r=[t,(r=r||[]).slice?r.slice():r],a.push(r),e||l()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!n}};return d},k.extend({Deferred:function(t){var e=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var t=arguments;return k.Deferred((function(r){k.each(e,(function(e,n){var o=b(t[n[4]])&&t[n[4]];i[n[1]]((function(){var t=o&&o.apply(this,arguments);t&&b(t.promise)?t.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[n[0]+"With"](this,o?[t]:arguments)}))})),t=null})).promise()},then:function(t,n,o){var i=0;function a(t,e,n,o){return function(){var s=this,l=arguments,d=function(){var r,d;if(!(t<i)){if((r=n.apply(s,l))===e.promise())throw new TypeError("Thenable self-resolution");d=r&&("object"==typeof r||"function"==typeof r)&&r.then,b(d)?o?d.call(r,a(i,e,I,o),a(i,e,F,o)):(i++,d.call(r,a(i,e,I,o),a(i,e,F,o),a(i,e,I,e.notifyWith))):(n!==I&&(s=void 0,l=[r]),(o||e.resolveWith)(s,l))}},c=o?d:function(){try{d()}catch(r){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(r,c.stackTrace),t+1>=i&&(n!==F&&(s=void 0,l=[r]),e.rejectWith(s,l))}};t?c():(k.Deferred.getStackHook&&(c.stackTrace=k.Deferred.getStackHook()),r.setTimeout(c))}}return k.Deferred((function(r){e[0][3].add(a(0,r,b(o)?o:I,r.notifyWith)),e[1][3].add(a(0,r,b(t)?t:I)),e[2][3].add(a(0,r,b(n)?n:F))})).promise()},promise:function(t){return null!=t?k.extend(t,o):o}},i={};return k.each(e,(function(t,r){var a=r[2],s=r[5];o[r[1]]=a.add,s&&a.add((function(){n=s}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(r[3].fire),i[r[0]]=function(){return i[r[0]+"With"](this===i?void 0:this,arguments),this},i[r[0]+"With"]=a.fireWith})),o.promise(i),t&&t.call(i,i),i},when:function(t){var e=arguments.length,r=e,n=Array(r),o=s.call(arguments),i=k.Deferred(),a=function(t){return function(r){n[t]=this,o[t]=arguments.length>1?s.call(arguments):r,--e||i.resolveWith(n,o)}};if(e<=1&&(G(t,i.done(a(r)).resolve,i.reject,!e),"pending"===i.state()||b(o[r]&&o[r].then)))return i.then();for(;r--;)G(o[r],a(r),i.reject);return i.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(t,e){r.console&&r.console.warn&&t&&q.test(t.name)&&r.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},k.readyException=function(t){r.setTimeout((function(){throw t}))};var H=k.Deferred();function B(){y.removeEventListener("DOMContentLoaded",B),r.removeEventListener("load",B),k.ready()}k.fn.ready=function(t){return H.then(t).catch((function(t){k.readyException(t)})),this},k.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==t&&--k.readyWait>0||H.resolveWith(y,[k]))}}),k.ready.then=H.then,"complete"===y.readyState||"loading"!==y.readyState&&!y.documentElement.doScroll?r.setTimeout(k.ready):(y.addEventListener("DOMContentLoaded",B),r.addEventListener("load",B));var U=function(t,e,r,n,o,i,a){var s=0,l=t.length,d=null==r;if("object"===_(r))for(s in o=!0,r)U(t,e,s,r[s],!0,i,a);else if(void 0!==n&&(o=!0,b(n)||(a=!0),d&&(a?(e.call(t,n),e=null):(d=e,e=function(t,e,r){return d.call(k(t),r)})),e))for(;s<l;s++)e(t[s],r,a?n:n.call(t[s],s,e(t[s],r)));return o?t:d?e.call(t):l?e(t[0],r):i},$=/^-ms-/,W=/-([a-z])/g;function V(t,e){return e.toUpperCase()}function K(t){return t.replace($,"ms-").replace(W,V)}var Y=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Z(){this.expando=k.expando+Z.uid++}Z.uid=1,Z.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,r){var n,o=this.cache(t);if("string"==typeof e)o[K(e)]=r;else for(n in e)o[K(n)]=e[n];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][K(e)]},access:function(t,e,r){return void 0===e||e&&"string"==typeof e&&void 0===r?this.get(t,e):(this.set(t,e,r),void 0!==r?r:e)},remove:function(t,e){var r,n=t[this.expando];if(void 0!==n){if(void 0!==e){r=(e=Array.isArray(e)?e.map(K):(e=K(e))in n?[e]:e.match(R)||[]).length;for(;r--;)delete n[e[r]]}(void 0===e||k.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!k.isEmptyObject(e)}};var X=new Z,Q=new Z,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,tt=/[A-Z]/g;function et(t,e,r){var n;if(void 0===r&&1===t.nodeType)if(n="data-"+e.replace(tt,"-$&").toLowerCase(),"string"==typeof(r=t.getAttribute(n))){try{r=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:J.test(t)?JSON.parse(t):t)}(r)}catch(t){}Q.set(t,e,r)}else r=void 0;return r}k.extend({hasData:function(t){return Q.hasData(t)||X.hasData(t)},data:function(t,e,r){return Q.access(t,e,r)},removeData:function(t,e){Q.remove(t,e)},_data:function(t,e,r){return X.access(t,e,r)},_removeData:function(t,e){X.remove(t,e)}}),k.fn.extend({data:function(t,e){var r,n,o,i=this[0],a=i&&i.attributes;if(void 0===t){if(this.length&&(o=Q.get(i),1===i.nodeType&&!X.get(i,"hasDataAttrs"))){for(r=a.length;r--;)a[r]&&0===(n=a[r].name).indexOf("data-")&&(n=K(n.slice(5)),et(i,n,o[n]));X.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each((function(){Q.set(this,t)})):U(this,(function(e){var r;if(i&&void 0===e)return void 0!==(r=Q.get(i,t))||void 0!==(r=et(i,t))?r:void 0;this.each((function(){Q.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){Q.remove(this,t)}))}}),k.extend({queue:function(t,e,r){var n;if(t)return e=(e||"fx")+"queue",n=X.get(t,e),r&&(!n||Array.isArray(r)?n=X.access(t,e,k.makeArray(r)):n.push(r)),n||[]},dequeue:function(t,e){e=e||"fx";var r=k.queue(t,e),n=r.length,o=r.shift(),i=k._queueHooks(t,e);"inprogress"===o&&(o=r.shift(),n--),o&&("fx"===e&&r.unshift("inprogress"),delete i.stop,o.call(t,(function(){k.dequeue(t,e)}),i)),!n&&i&&i.empty.fire()},_queueHooks:function(t,e){var r=e+"queueHooks";return X.get(t,r)||X.access(t,r,{empty:k.Callbacks("once memory").add((function(){X.remove(t,[e+"queue",r])}))})}}),k.fn.extend({queue:function(t,e){var r=2;return"string"!=typeof t&&(e=t,t="fx",r--),arguments.length<r?k.queue(this[0],t):void 0===e?this:this.each((function(){var r=k.queue(this,t,e);k._queueHooks(this,t),"fx"===t&&"inprogress"!==r[0]&&k.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){k.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var r,n=1,o=k.Deferred(),i=this,a=this.length,s=function(){--n||o.resolveWith(i,[i])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(r=X.get(i[a],t+"queueHooks"))&&r.empty&&(n++,r.empty.add(s));return s(),o.promise(e)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,nt=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],it=y.documentElement,at=function(t){return k.contains(t.ownerDocument,t)},st={composed:!0};it.getRootNode&&(at=function(t){return k.contains(t.ownerDocument,t)||t.getRootNode(st)===t.ownerDocument});var lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===k.css(t,"display")};function dt(t,e,r,n){var o,i,a=20,s=n?function(){return n.cur()}:function(){return k.css(t,e,"")},l=s(),d=r&&r[3]||(k.cssNumber[e]?"":"px"),c=t.nodeType&&(k.cssNumber[e]||"px"!==d&&+l)&&nt.exec(k.css(t,e));if(c&&c[3]!==d){for(l/=2,d=d||c[3],c=+l||1;a--;)k.style(t,e,c+d),(1-i)*(1-(i=s()/l||.5))<=0&&(a=0),c/=i;c*=2,k.style(t,e,c+d),r=r||[]}return r&&(c=+c||+l||0,o=r[1]?c+(r[1]+1)*r[2]:+r[2],n&&(n.unit=d,n.start=c,n.end=o)),o}var ct={};function ut(t){var e,r=t.ownerDocument,n=t.nodeName,o=ct[n];return o||(e=r.body.appendChild(r.createElement(n)),o=k.css(e,"display"),e.parentNode.removeChild(e),"none"===o&&(o="block"),ct[n]=o,o)}function pt(t,e){for(var r,n,o=[],i=0,a=t.length;i<a;i++)(n=t[i]).style&&(r=n.style.display,e?("none"===r&&(o[i]=X.get(n,"display")||null,o[i]||(n.style.display="")),""===n.style.display&&lt(n)&&(o[i]=ut(n))):"none"!==r&&(o[i]="none",X.set(n,"display",r)));for(i=0;i<a;i++)null!=o[i]&&(t[i].style.display=o[i]);return t}k.fn.extend({show:function(){return pt(this,!0)},hide:function(){return pt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){lt(this)?k(this).show():k(this).hide()}))}});var ht,ft,mt=/^(?:checkbox|radio)$/i,gt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,bt=/^$|^module$|\/(?:java|ecma)script/i;ht=y.createDocumentFragment().appendChild(y.createElement("div")),(ft=y.createElement("input")).setAttribute("type","radio"),ft.setAttribute("checked","checked"),ft.setAttribute("name","t"),ht.appendChild(ft),g.checkClone=ht.cloneNode(!0).cloneNode(!0).lastChild.checked,ht.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!ht.cloneNode(!0).lastChild.defaultValue,ht.innerHTML="<option></option>",g.option=!!ht.lastChild;var vt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function yt(t,e){var r;return r=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&L(t,e)?k.merge([t],r):r}function xt(t,e){for(var r=0,n=t.length;r<n;r++)X.set(t[r],"globalEval",!e||X.get(e[r],"globalEval"))}vt.tbody=vt.tfoot=vt.colgroup=vt.caption=vt.thead,vt.th=vt.td,g.option||(vt.optgroup=vt.option=[1,"<select multiple='multiple'>","</select>"]);var wt=/<|&#?\w+;/;function _t(t,e,r,n,o){for(var i,a,s,l,d,c,u=e.createDocumentFragment(),p=[],h=0,f=t.length;h<f;h++)if((i=t[h])||0===i)if("object"===_(i))k.merge(p,i.nodeType?[i]:i);else if(wt.test(i)){for(a=a||u.appendChild(e.createElement("div")),s=(gt.exec(i)||["",""])[1].toLowerCase(),l=vt[s]||vt._default,a.innerHTML=l[1]+k.htmlPrefilter(i)+l[2],c=l[0];c--;)a=a.lastChild;k.merge(p,a.childNodes),(a=u.firstChild).textContent=""}else p.push(e.createTextNode(i));for(u.textContent="",h=0;i=p[h++];)if(n&&k.inArray(i,n)>-1)o&&o.push(i);else if(d=at(i),a=yt(u.appendChild(i),"script"),d&&xt(a),r)for(c=0;i=a[c++];)bt.test(i.type||"")&&r.push(i);return u}var kt=/^key/,Et=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ct=/^([^.]*)(?:\.(.+)|)/;function Tt(){return!0}function St(){return!1}function At(t,e){return t===function(){try{return y.activeElement}catch(t){}}()==("focus"===e)}function Lt(t,e,r,n,o,i){var a,s;if("object"==typeof e){for(s in"string"!=typeof r&&(n=n||r,r=void 0),e)Lt(t,s,r,n,e[s],i);return t}if(null==n&&null==o?(o=r,n=r=void 0):null==o&&("string"==typeof r?(o=n,n=void 0):(o=n,n=r,r=void 0)),!1===o)o=St;else if(!o)return t;return 1===i&&(a=o,(o=function(t){return k().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=k.guid++)),t.each((function(){k.event.add(this,e,o,n,r)}))}function Dt(t,e,r){r?(X.set(t,e,!1),k.event.add(t,e,{namespace:!1,handler:function(t){var n,o,i=X.get(this,e);if(1&t.isTrigger&&this[e]){if(i.length)(k.event.special[e]||{}).delegateType&&t.stopPropagation();else if(i=s.call(arguments),X.set(this,e,i),n=r(this,e),this[e](),i!==(o=X.get(this,e))||n?X.set(this,e,!1):o={},i!==o)return t.stopImmediatePropagation(),t.preventDefault(),o.value}else i.length&&(X.set(this,e,{value:k.event.trigger(k.extend(i[0],k.Event.prototype),i.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===X.get(t,e)&&k.event.add(t,e,Tt)}k.event={global:{},add:function(t,e,r,n,o){var i,a,s,l,d,c,u,p,h,f,m,g=X.get(t);if(Y(t))for(r.handler&&(r=(i=r).handler,o=i.selector),o&&k.find.matchesSelector(it,o),r.guid||(r.guid=k.guid++),(l=g.events)||(l=g.events=Object.create(null)),(a=g.handle)||(a=g.handle=function(e){return void 0!==k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),d=(e=(e||"").match(R)||[""]).length;d--;)h=m=(s=Ct.exec(e[d])||[])[1],f=(s[2]||"").split(".").sort(),h&&(u=k.event.special[h]||{},h=(o?u.delegateType:u.bindType)||h,u=k.event.special[h]||{},c=k.extend({type:h,origType:m,data:n,handler:r,guid:r.guid,selector:o,needsContext:o&&k.expr.match.needsContext.test(o),namespace:f.join(".")},i),(p=l[h])||((p=l[h]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,n,f,a)||t.addEventListener&&t.addEventListener(h,a)),u.add&&(u.add.call(t,c),c.handler.guid||(c.handler.guid=r.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),k.event.global[h]=!0)},remove:function(t,e,r,n,o){var i,a,s,l,d,c,u,p,h,f,m,g=X.hasData(t)&&X.get(t);if(g&&(l=g.events)){for(d=(e=(e||"").match(R)||[""]).length;d--;)if(h=m=(s=Ct.exec(e[d])||[])[1],f=(s[2]||"").split(".").sort(),h){for(u=k.event.special[h]||{},p=l[h=(n?u.delegateType:u.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=p.length;i--;)c=p[i],!o&&m!==c.origType||r&&r.guid!==c.guid||s&&!s.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(p.splice(i,1),c.selector&&p.delegateCount--,u.remove&&u.remove.call(t,c));a&&!p.length&&(u.teardown&&!1!==u.teardown.call(t,f,g.handle)||k.removeEvent(t,h,g.handle),delete l[h])}else for(h in l)k.event.remove(t,h+e[d],r,n,!0);k.isEmptyObject(l)&&X.remove(t,"handle events")}},dispatch:function(t){var e,r,n,o,i,a,s=new Array(arguments.length),l=k.event.fix(t),d=(X.get(this,"events")||Object.create(null))[l.type]||[],c=k.event.special[l.type]||{};for(s[0]=l,e=1;e<arguments.length;e++)s[e]=arguments[e];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=k.event.handlers.call(this,l,d),e=0;(o=a[e++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,r=0;(i=o.handlers[r++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==i.namespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(n=((k.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,s))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(t,e){var r,n,o,i,a,s=[],l=e.delegateCount,d=t.target;if(l&&d.nodeType&&!("click"===t.type&&t.button>=1))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==t.type||!0!==d.disabled)){for(i=[],a={},r=0;r<l;r++)void 0===a[o=(n=e[r]).selector+" "]&&(a[o]=n.needsContext?k(o,this).index(d)>-1:k.find(o,this,null,[d]).length),a[o]&&i.push(n);i.length&&s.push({elem:d,handlers:i})}return d=this,l<e.length&&s.push({elem:d,handlers:e.slice(l)}),s},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[k.expando]?t:new k.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return mt.test(e.type)&&e.click&&L(e,"input")&&Dt(e,"click",Tt),!1},trigger:function(t){var e=this||t;return mt.test(e.type)&&e.click&&L(e,"input")&&Dt(e,"click"),!0},_default:function(t){var e=t.target;return mt.test(e.type)&&e.click&&L(e,"input")&&X.get(e,"click")||L(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},k.removeEvent=function(t,e,r){t.removeEventListener&&t.removeEventListener(e,r)},k.Event=function(t,e){if(!(this instanceof k.Event))return new k.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Tt:St,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&k.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:St,isPropagationStopped:St,isImmediatePropagationStopped:St,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Tt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Tt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Tt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&kt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Et.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},(function(t,e){k.event.special[t]={setup:function(){return Dt(this,t,At),!1},trigger:function(){return Dt(this,t),!0},delegateType:e}})),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){k.event.special[t]={delegateType:e,bindType:e,handle:function(t){var r,n=this,o=t.relatedTarget,i=t.handleObj;return o&&(o===n||k.contains(n,o))||(t.type=i.origType,r=i.handler.apply(this,arguments),t.type=e),r}}})),k.fn.extend({on:function(t,e,r,n){return Lt(this,t,e,r,n)},one:function(t,e,r,n){return Lt(this,t,e,r,n,1)},off:function(t,e,r){var n,o;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,k(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(r=e,e=void 0),!1===r&&(r=St),this.each((function(){k.event.remove(this,t,r,e)}))}});var Nt=/<script|<style|<link/i,Ot=/checked\s*(?:[^=]|=\s*.checked.)/i,Mt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function jt(t,e){return L(t,"table")&&L(11!==e.nodeType?e:e.firstChild,"tr")&&k(t).children("tbody")[0]||t}function zt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Pt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Rt(t,e){var r,n,o,i,a,s;if(1===e.nodeType){if(X.hasData(t)&&(s=X.get(t).events))for(o in X.remove(e,"handle events"),s)for(r=0,n=s[o].length;r<n;r++)k.event.add(e,o,s[o][r]);Q.hasData(t)&&(i=Q.access(t),a=k.extend({},i),Q.set(e,a))}}function It(t,e){var r=e.nodeName.toLowerCase();"input"===r&&mt.test(t.type)?e.checked=t.checked:"input"!==r&&"textarea"!==r||(e.defaultValue=t.defaultValue)}function Ft(t,e,r,n){e=l(e);var o,i,a,s,d,c,u=0,p=t.length,h=p-1,f=e[0],m=b(f);if(m||p>1&&"string"==typeof f&&!g.checkClone&&Ot.test(f))return t.each((function(o){var i=t.eq(o);m&&(e[0]=f.call(this,o,i.html())),Ft(i,e,r,n)}));if(p&&(i=(o=_t(e,t[0].ownerDocument,!1,t,n)).firstChild,1===o.childNodes.length&&(o=i),i||n)){for(s=(a=k.map(yt(o,"script"),zt)).length;u<p;u++)d=o,u!==h&&(d=k.clone(d,!0,!0),s&&k.merge(a,yt(d,"script"))),r.call(t[u],d,u);if(s)for(c=a[a.length-1].ownerDocument,k.map(a,Pt),u=0;u<s;u++)d=a[u],bt.test(d.type||"")&&!X.access(d,"globalEval")&&k.contains(c,d)&&(d.src&&"module"!==(d.type||"").toLowerCase()?k._evalUrl&&!d.noModule&&k._evalUrl(d.src,{nonce:d.nonce||d.getAttribute("nonce")},c):w(d.textContent.replace(Mt,""),d,c))}return t}function Gt(t,e,r){for(var n,o=e?k.filter(e,t):t,i=0;null!=(n=o[i]);i++)r||1!==n.nodeType||k.cleanData(yt(n)),n.parentNode&&(r&&at(n)&&xt(yt(n,"script")),n.parentNode.removeChild(n));return t}k.extend({htmlPrefilter:function(t){return t},clone:function(t,e,r){var n,o,i,a,s=t.cloneNode(!0),l=at(t);if(!(g.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||k.isXMLDoc(t)))for(a=yt(s),n=0,o=(i=yt(t)).length;n<o;n++)It(i[n],a[n]);if(e)if(r)for(i=i||yt(t),a=a||yt(s),n=0,o=i.length;n<o;n++)Rt(i[n],a[n]);else Rt(t,s);return(a=yt(s,"script")).length>0&&xt(a,!l&&yt(t,"script")),s},cleanData:function(t){for(var e,r,n,o=k.event.special,i=0;void 0!==(r=t[i]);i++)if(Y(r)){if(e=r[X.expando]){if(e.events)for(n in e.events)o[n]?k.event.remove(r,n):k.removeEvent(r,n,e.handle);r[X.expando]=void 0}r[Q.expando]&&(r[Q.expando]=void 0)}}}),k.fn.extend({detach:function(t){return Gt(this,t,!0)},remove:function(t){return Gt(this,t)},text:function(t){return U(this,(function(t){return void 0===t?k.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Ft(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||jt(this,t).appendChild(t)}))},prepend:function(){return Ft(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=jt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Ft(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Ft(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(k.cleanData(yt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return k.clone(this,t,e)}))},html:function(t){return U(this,(function(t){var e=this[0]||{},r=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Nt.test(t)&&!vt[(gt.exec(t)||["",""])[1].toLowerCase()]){t=k.htmlPrefilter(t);try{for(;r<n;r++)1===(e=this[r]||{}).nodeType&&(k.cleanData(yt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Ft(this,arguments,(function(e){var r=this.parentNode;k.inArray(this,t)<0&&(k.cleanData(yt(this)),r&&r.replaceChild(e,this))}),t)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){k.fn[t]=function(t){for(var r,n=[],o=k(t),i=o.length-1,a=0;a<=i;a++)r=a===i?this:this.clone(!0),k(o[a])[e](r),d.apply(n,r.get());return this.pushStack(n)}}));var qt=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),Ht=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=r),e.getComputedStyle(t)},Bt=function(t,e,r){var n,o,i={};for(o in e)i[o]=t.style[o],t.style[o]=e[o];for(o in n=r.call(t),e)t.style[o]=i[o];return n},Ut=new RegExp(ot.join("|"),"i");function $t(t,e,r){var n,o,i,a,s=t.style;return(r=r||Ht(t))&&(""!==(a=r.getPropertyValue(e)||r[e])||at(t)||(a=k.style(t,e)),!g.pixelBoxStyles()&&qt.test(a)&&Ut.test(e)&&(n=s.width,o=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=r.width,s.width=n,s.minWidth=o,s.maxWidth=i)),void 0!==a?a+"":a}function Wt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){d.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",it.appendChild(d).appendChild(c);var t=r.getComputedStyle(c);n="1%"!==t.top,l=12===e(t.marginLeft),c.style.right="60%",a=36===e(t.right),o=36===e(t.width),c.style.position="absolute",i=12===e(c.offsetWidth/3),it.removeChild(d),c=null}}function e(t){return Math.round(parseFloat(t))}var n,o,i,a,s,l,d=y.createElement("div"),c=y.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===c.style.backgroundClip,k.extend(g,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),i},reliableTrDimensions:function(){var t,e,n,o;return null==s&&(t=y.createElement("table"),e=y.createElement("tr"),n=y.createElement("div"),t.style.cssText="position:absolute;left:-11111px",e.style.height="1px",n.style.height="9px",it.appendChild(t).appendChild(e).appendChild(n),o=r.getComputedStyle(e),s=parseInt(o.height)>3,it.removeChild(t)),s}}))}();var Vt=["Webkit","Moz","ms"],Kt=y.createElement("div").style,Yt={};function Zt(t){var e=k.cssProps[t]||Yt[t];return e||(t in Kt?t:Yt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),r=Vt.length;r--;)if((t=Vt[r]+e)in Kt)return t}(t)||t)}var Xt=/^(none|table(?!-c[ea]).+)/,Qt=/^--/,Jt={position:"absolute",visibility:"hidden",display:"block"},te={letterSpacing:"0",fontWeight:"400"};function ee(t,e,r){var n=nt.exec(e);return n?Math.max(0,n[2]-(r||0))+(n[3]||"px"):e}function re(t,e,r,n,o,i){var a="width"===e?1:0,s=0,l=0;if(r===(n?"border":"content"))return 0;for(;a<4;a+=2)"margin"===r&&(l+=k.css(t,r+ot[a],!0,o)),n?("content"===r&&(l-=k.css(t,"padding"+ot[a],!0,o)),"margin"!==r&&(l-=k.css(t,"border"+ot[a]+"Width",!0,o))):(l+=k.css(t,"padding"+ot[a],!0,o),"padding"!==r?l+=k.css(t,"border"+ot[a]+"Width",!0,o):s+=k.css(t,"border"+ot[a]+"Width",!0,o));return!n&&i>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-i-l-s-.5))||0),l}function ne(t,e,r){var n=Ht(t),o=(!g.boxSizingReliable()||r)&&"border-box"===k.css(t,"boxSizing",!1,n),i=o,a=$t(t,e,n),s="offset"+e[0].toUpperCase()+e.slice(1);if(qt.test(a)){if(!r)return a;a="auto"}return(!g.boxSizingReliable()&&o||!g.reliableTrDimensions()&&L(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===k.css(t,"display",!1,n))&&t.getClientRects().length&&(o="border-box"===k.css(t,"boxSizing",!1,n),(i=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+re(t,e,r||(o?"border":"content"),i,n,a)+"px"}function oe(t,e,r,n,o){return new oe.prototype.init(t,e,r,n,o)}k.extend({cssHooks:{opacity:{get:function(t,e){if(e){var r=$t(t,"opacity");return""===r?"1":r}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,r,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,i,a,s=K(e),l=Qt.test(e),d=t.style;if(l||(e=Zt(s)),a=k.cssHooks[e]||k.cssHooks[s],void 0===r)return a&&"get"in a&&void 0!==(o=a.get(t,!1,n))?o:d[e];"string"===(i=typeof r)&&(o=nt.exec(r))&&o[1]&&(r=dt(t,e,o),i="number"),null!=r&&r==r&&("number"!==i||l||(r+=o&&o[3]||(k.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==r||0!==e.indexOf("background")||(d[e]="inherit"),a&&"set"in a&&void 0===(r=a.set(t,r,n))||(l?d.setProperty(e,r):d[e]=r))}},css:function(t,e,r,n){var o,i,a,s=K(e);return Qt.test(e)||(e=Zt(s)),(a=k.cssHooks[e]||k.cssHooks[s])&&"get"in a&&(o=a.get(t,!0,r)),void 0===o&&(o=$t(t,e,n)),"normal"===o&&e in te&&(o=te[e]),""===r||r?(i=parseFloat(o),!0===r||isFinite(i)?i||0:o):o}}),k.each(["height","width"],(function(t,e){k.cssHooks[e]={get:function(t,r,n){if(r)return!Xt.test(k.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ne(t,e,n):Bt(t,Jt,(function(){return ne(t,e,n)}))},set:function(t,r,n){var o,i=Ht(t),a=!g.scrollboxSize()&&"absolute"===i.position,s=(a||n)&&"border-box"===k.css(t,"boxSizing",!1,i),l=n?re(t,e,n,s,i):0;return s&&a&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(i[e])-re(t,e,"border",!1,i)-.5)),l&&(o=nt.exec(r))&&"px"!==(o[3]||"px")&&(t.style[e]=r,r=k.css(t,e)),ee(0,r,l)}}})),k.cssHooks.marginLeft=Wt(g.reliableMarginLeft,(function(t,e){if(e)return(parseFloat($t(t,"marginLeft"))||t.getBoundingClientRect().left-Bt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),k.each({margin:"",padding:"",border:"Width"},(function(t,e){k.cssHooks[t+e]={expand:function(r){for(var n=0,o={},i="string"==typeof r?r.split(" "):[r];n<4;n++)o[t+ot[n]+e]=i[n]||i[n-2]||i[0];return o}},"margin"!==t&&(k.cssHooks[t+e].set=ee)})),k.fn.extend({css:function(t,e){return U(this,(function(t,e,r){var n,o,i={},a=0;if(Array.isArray(e)){for(n=Ht(t),o=e.length;a<o;a++)i[e[a]]=k.css(t,e[a],!1,n);return i}return void 0!==r?k.style(t,e,r):k.css(t,e)}),t,e,arguments.length>1)}}),k.Tween=oe,oe.prototype={constructor:oe,init:function(t,e,r,n,o,i){this.elem=t,this.prop=r,this.easing=o||k.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=i||(k.cssNumber[r]?"":"px")},cur:function(){var t=oe.propHooks[this.prop];return t&&t.get?t.get(this):oe.propHooks._default.get(this)},run:function(t){var e,r=oe.propHooks[this.prop];return this.options.duration?this.pos=e=k.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),r&&r.set?r.set(this):oe.propHooks._default.set(this),this}},oe.prototype.init.prototype=oe.prototype,oe.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=k.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){k.fx.step[t.prop]?k.fx.step[t.prop](t):1!==t.elem.nodeType||!k.cssHooks[t.prop]&&null==t.elem.style[Zt(t.prop)]?t.elem[t.prop]=t.now:k.style(t.elem,t.prop,t.now+t.unit)}}},oe.propHooks.scrollTop=oe.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},k.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},k.fx=oe.prototype.init,k.fx.step={};var ie,ae,se=/^(?:toggle|show|hide)$/,le=/queueHooks$/;function de(){ae&&(!1===y.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(de):r.setTimeout(de,k.fx.interval),k.fx.tick())}function ce(){return r.setTimeout((function(){ie=void 0})),ie=Date.now()}function ue(t,e){var r,n=0,o={height:t};for(e=e?1:0;n<4;n+=2-e)o["margin"+(r=ot[n])]=o["padding"+r]=t;return e&&(o.opacity=o.width=t),o}function pe(t,e,r){for(var n,o=(he.tweeners[e]||[]).concat(he.tweeners["*"]),i=0,a=o.length;i<a;i++)if(n=o[i].call(r,e,t))return n}function he(t,e,r){var n,o,i=0,a=he.prefilters.length,s=k.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var e=ie||ce(),r=Math.max(0,d.startTime+d.duration-e),n=1-(r/d.duration||0),i=0,a=d.tweens.length;i<a;i++)d.tweens[i].run(n);return s.notifyWith(t,[d,n,r]),n<1&&a?r:(a||s.notifyWith(t,[d,1,0]),s.resolveWith(t,[d]),!1)},d=s.promise({elem:t,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},r),originalProperties:e,originalOptions:r,startTime:ie||ce(),duration:r.duration,tweens:[],createTween:function(e,r){var n=k.Tween(t,d.opts,e,r,d.opts.specialEasing[e]||d.opts.easing);return d.tweens.push(n),n},stop:function(e){var r=0,n=e?d.tweens.length:0;if(o)return this;for(o=!0;r<n;r++)d.tweens[r].run(1);return e?(s.notifyWith(t,[d,1,0]),s.resolveWith(t,[d,e])):s.rejectWith(t,[d,e]),this}}),c=d.props;for(!function(t,e){var r,n,o,i,a;for(r in t)if(o=e[n=K(r)],i=t[r],Array.isArray(i)&&(o=i[1],i=t[r]=i[0]),r!==n&&(t[n]=i,delete t[r]),(a=k.cssHooks[n])&&"expand"in a)for(r in i=a.expand(i),delete t[n],i)r in t||(t[r]=i[r],e[r]=o);else e[n]=o}(c,d.opts.specialEasing);i<a;i++)if(n=he.prefilters[i].call(d,t,c,d.opts))return b(n.stop)&&(k._queueHooks(d.elem,d.opts.queue).stop=n.stop.bind(n)),n;return k.map(c,pe,d),b(d.opts.start)&&d.opts.start.call(t,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),k.fx.timer(k.extend(l,{elem:t,anim:d,queue:d.opts.queue})),d}k.Animation=k.extend(he,{tweeners:{"*":[function(t,e){var r=this.createTween(t,e);return dt(r.elem,t,nt.exec(e),r),r}]},tweener:function(t,e){b(t)?(e=t,t=["*"]):t=t.match(R);for(var r,n=0,o=t.length;n<o;n++)r=t[n],he.tweeners[r]=he.tweeners[r]||[],he.tweeners[r].unshift(e)},prefilters:[function(t,e,r){var n,o,i,a,s,l,d,c,u="width"in e||"height"in e,p=this,h={},f=t.style,m=t.nodeType&&lt(t),g=X.get(t,"fxshow");for(n in r.queue||(null==(a=k._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always((function(){p.always((function(){a.unqueued--,k.queue(t,"fx").length||a.empty.fire()}))}))),e)if(o=e[n],se.test(o)){if(delete e[n],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[n])continue;m=!0}h[n]=g&&g[n]||k.style(t,n)}if((l=!k.isEmptyObject(e))||!k.isEmptyObject(h))for(n in u&&1===t.nodeType&&(r.overflow=[f.overflow,f.overflowX,f.overflowY],null==(d=g&&g.display)&&(d=X.get(t,"display")),"none"===(c=k.css(t,"display"))&&(d?c=d:(pt([t],!0),d=t.style.display||d,c=k.css(t,"display"),pt([t]))),("inline"===c||"inline-block"===c&&null!=d)&&"none"===k.css(t,"float")&&(l||(p.done((function(){f.display=d})),null==d&&(c=f.display,d="none"===c?"":c)),f.display="inline-block")),r.overflow&&(f.overflow="hidden",p.always((function(){f.overflow=r.overflow[0],f.overflowX=r.overflow[1],f.overflowY=r.overflow[2]}))),l=!1,h)l||(g?"hidden"in g&&(m=g.hidden):g=X.access(t,"fxshow",{display:d}),i&&(g.hidden=!m),m&&pt([t],!0),p.done((function(){for(n in m||pt([t]),X.remove(t,"fxshow"),h)k.style(t,n,h[n])}))),l=pe(m?g[n]:0,n,p),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?he.prefilters.unshift(t):he.prefilters.push(t)}}),k.speed=function(t,e,r){var n=t&&"object"==typeof t?k.extend({},t):{complete:r||!r&&e||b(t)&&t,duration:t,easing:r&&e||e&&!b(e)&&e};return k.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in k.fx.speeds?n.duration=k.fx.speeds[n.duration]:n.duration=k.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){b(n.old)&&n.old.call(this),n.queue&&k.dequeue(this,n.queue)},n},k.fn.extend({fadeTo:function(t,e,r,n){return this.filter(lt).css("opacity",0).show().end().animate({opacity:e},t,r,n)},animate:function(t,e,r,n){var o=k.isEmptyObject(t),i=k.speed(e,r,n),a=function(){var e=he(this,k.extend({},t),i);(o||X.get(this,"finish"))&&e.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(t,e,r){var n=function(t){var e=t.stop;delete t.stop,e(r)};return"string"!=typeof t&&(r=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,o=null!=t&&t+"queueHooks",i=k.timers,a=X.get(this);if(o)a[o]&&a[o].stop&&n(a[o]);else for(o in a)a[o]&&a[o].stop&&le.test(o)&&n(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=t&&i[o].queue!==t||(i[o].anim.stop(r),e=!1,i.splice(o,1));!e&&r||k.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,r=X.get(this),n=r[t+"queue"],o=r[t+"queueHooks"],i=k.timers,a=n?n.length:0;for(r.finish=!0,k.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===t&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<a;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete r.finish}))}}),k.each(["toggle","show","hide"],(function(t,e){var r=k.fn[e];k.fn[e]=function(t,n,o){return null==t||"boolean"==typeof t?r.apply(this,arguments):this.animate(ue(e,!0),t,n,o)}})),k.each({slideDown:ue("show"),slideUp:ue("hide"),slideToggle:ue("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){k.fn[t]=function(t,r,n){return this.animate(e,t,r,n)}})),k.timers=[],k.fx.tick=function(){var t,e=0,r=k.timers;for(ie=Date.now();e<r.length;e++)(t=r[e])()||r[e]!==t||r.splice(e--,1);r.length||k.fx.stop(),ie=void 0},k.fx.timer=function(t){k.timers.push(t),k.fx.start()},k.fx.interval=13,k.fx.start=function(){ae||(ae=!0,de())},k.fx.stop=function(){ae=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(t,e){return t=k.fx&&k.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,n){var o=r.setTimeout(e,t);n.stop=function(){r.clearTimeout(o)}}))},function(){var t=y.createElement("input"),e=y.createElement("select").appendChild(y.createElement("option"));t.type="checkbox",g.checkOn=""!==t.value,g.optSelected=e.selected,(t=y.createElement("input")).value="t",t.type="radio",g.radioValue="t"===t.value}();var fe,me=k.expr.attrHandle;k.fn.extend({attr:function(t,e){return U(this,k.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){k.removeAttr(this,t)}))}}),k.extend({attr:function(t,e,r){var n,o,i=t.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===t.getAttribute?k.prop(t,e,r):(1===i&&k.isXMLDoc(t)||(o=k.attrHooks[e.toLowerCase()]||(k.expr.match.bool.test(e)?fe:void 0)),void 0!==r?null===r?void k.removeAttr(t,e):o&&"set"in o&&void 0!==(n=o.set(t,r,e))?n:(t.setAttribute(e,r+""),r):o&&"get"in o&&null!==(n=o.get(t,e))?n:null==(n=k.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!g.radioValue&&"radio"===e&&L(t,"input")){var r=t.value;return t.setAttribute("type",e),r&&(t.value=r),e}}}},removeAttr:function(t,e){var r,n=0,o=e&&e.match(R);if(o&&1===t.nodeType)for(;r=o[n++];)t.removeAttribute(r)}}),fe={set:function(t,e,r){return!1===e?k.removeAttr(t,r):t.setAttribute(r,r),r}},k.each(k.expr.match.bool.source.match(/\w+/g),(function(t,e){var r=me[e]||k.find.attr;me[e]=function(t,e,n){var o,i,a=e.toLowerCase();return n||(i=me[a],me[a]=o,o=null!=r(t,e,n)?a:null,me[a]=i),o}}));var ge=/^(?:input|select|textarea|button)$/i,be=/^(?:a|area)$/i;function ve(t){return(t.match(R)||[]).join(" ")}function ye(t){return t.getAttribute&&t.getAttribute("class")||""}function xe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(R)||[]}k.fn.extend({prop:function(t,e){return U(this,k.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[k.propFix[t]||t]}))}}),k.extend({prop:function(t,e,r){var n,o,i=t.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&k.isXMLDoc(t)||(e=k.propFix[e]||e,o=k.propHooks[e]),void 0!==r?o&&"set"in o&&void 0!==(n=o.set(t,r,e))?n:t[e]=r:o&&"get"in o&&null!==(n=o.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=k.find.attr(t,"tabindex");return e?parseInt(e,10):ge.test(t.nodeName)||be.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(k.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){k.propFix[this.toLowerCase()]=this})),k.fn.extend({addClass:function(t){var e,r,n,o,i,a,s,l=0;if(b(t))return this.each((function(e){k(this).addClass(t.call(this,e,ye(this)))}));if((e=xe(t)).length)for(;r=this[l++];)if(o=ye(r),n=1===r.nodeType&&" "+ve(o)+" "){for(a=0;i=e[a++];)n.indexOf(" "+i+" ")<0&&(n+=i+" ");o!==(s=ve(n))&&r.setAttribute("class",s)}return this},removeClass:function(t){var e,r,n,o,i,a,s,l=0;if(b(t))return this.each((function(e){k(this).removeClass(t.call(this,e,ye(this)))}));if(!arguments.length)return this.attr("class","");if((e=xe(t)).length)for(;r=this[l++];)if(o=ye(r),n=1===r.nodeType&&" "+ve(o)+" "){for(a=0;i=e[a++];)for(;n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");o!==(s=ve(n))&&r.setAttribute("class",s)}return this},toggleClass:function(t,e){var r=typeof t,n="string"===r||Array.isArray(t);return"boolean"==typeof e&&n?e?this.addClass(t):this.removeClass(t):b(t)?this.each((function(r){k(this).toggleClass(t.call(this,r,ye(this),e),e)})):this.each((function(){var e,o,i,a;if(n)for(o=0,i=k(this),a=xe(t);e=a[o++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==r||((e=ye(this))&&X.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":X.get(this,"__className__")||""))}))},hasClass:function(t){var e,r,n=0;for(e=" "+t+" ";r=this[n++];)if(1===r.nodeType&&(" "+ve(ye(r))+" ").indexOf(e)>-1)return!0;return!1}});var we=/\r/g;k.fn.extend({val:function(t){var e,r,n,o=this[0];return arguments.length?(n=b(t),this.each((function(r){var o;1===this.nodeType&&(null==(o=n?t.call(this,r,k(this).val()):t)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=k.map(o,(function(t){return null==t?"":t+""}))),(e=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))}))):o?(e=k.valHooks[o.type]||k.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(r=e.get(o,"value"))?r:"string"==typeof(r=o.value)?r.replace(we,""):null==r?"":r:void 0}}),k.extend({valHooks:{option:{get:function(t){var e=k.find.attr(t,"value");return null!=e?e:ve(k.text(t))}},select:{get:function(t){var e,r,n,o=t.options,i=t.selectedIndex,a="select-one"===t.type,s=a?null:[],l=a?i+1:o.length;for(n=i<0?l:a?i:0;n<l;n++)if(((r=o[n]).selected||n===i)&&!r.disabled&&(!r.parentNode.disabled||!L(r.parentNode,"optgroup"))){if(e=k(r).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var r,n,o=t.options,i=k.makeArray(e),a=o.length;a--;)((n=o[a]).selected=k.inArray(k.valHooks.option.get(n),i)>-1)&&(r=!0);return r||(t.selectedIndex=-1),i}}}}),k.each(["radio","checkbox"],(function(){k.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=k.inArray(k(t).val(),e)>-1}},g.checkOn||(k.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),g.focusin="onfocusin"in r;var _e=/^(?:focusinfocus|focusoutblur)$/,ke=function(t){t.stopPropagation()};k.extend(k.event,{trigger:function(t,e,n,o){var i,a,s,l,d,c,u,p,f=[n||y],m=h.call(t,"type")?t.type:t,g=h.call(t,"namespace")?t.namespace.split("."):[];if(a=p=s=n=n||y,3!==n.nodeType&&8!==n.nodeType&&!_e.test(m+k.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),d=m.indexOf(":")<0&&"on"+m,(t=t[k.expando]?t:new k.Event(m,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=g.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:k.makeArray(e,[t]),u=k.event.special[m]||{},o||!u.trigger||!1!==u.trigger.apply(n,e))){if(!o&&!u.noBubble&&!v(n)){for(l=u.delegateType||m,_e.test(l+m)||(a=a.parentNode);a;a=a.parentNode)f.push(a),s=a;s===(n.ownerDocument||y)&&f.push(s.defaultView||s.parentWindow||r)}for(i=0;(a=f[i++])&&!t.isPropagationStopped();)p=a,t.type=i>1?l:u.bindType||m,(c=(X.get(a,"events")||Object.create(null))[t.type]&&X.get(a,"handle"))&&c.apply(a,e),(c=d&&a[d])&&c.apply&&Y(a)&&(t.result=c.apply(a,e),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||u._default&&!1!==u._default.apply(f.pop(),e)||!Y(n)||d&&b(n[m])&&!v(n)&&((s=n[d])&&(n[d]=null),k.event.triggered=m,t.isPropagationStopped()&&p.addEventListener(m,ke),n[m](),t.isPropagationStopped()&&p.removeEventListener(m,ke),k.event.triggered=void 0,s&&(n[d]=s)),t.result}},simulate:function(t,e,r){var n=k.extend(new k.Event,r,{type:t,isSimulated:!0});k.event.trigger(n,null,e)}}),k.fn.extend({trigger:function(t,e){return this.each((function(){k.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var r=this[0];if(r)return k.event.trigger(t,e,r,!0)}}),g.focusin||k.each({focus:"focusin",blur:"focusout"},(function(t,e){var r=function(t){k.event.simulate(e,t.target,k.event.fix(t))};k.event.special[e]={setup:function(){var n=this.ownerDocument||this.document||this,o=X.access(n,e);o||n.addEventListener(t,r,!0),X.access(n,e,(o||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,o=X.access(n,e)-1;o?X.access(n,e,o):(n.removeEventListener(t,r,!0),X.remove(n,e))}}}));var Ee=r.location,Ce={guid:Date.now()},Te=/\?/;k.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new r.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+t),e};var Se=/\[\]$/,Ae=/\r?\n/g,Le=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;function Ne(t,e,r,n){var o;if(Array.isArray(e))k.each(e,(function(e,o){r||Se.test(t)?n(t,o):Ne(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,r,n)}));else if(r||"object"!==_(e))n(t,e);else for(o in e)Ne(t+"["+o+"]",e[o],r,n)}k.param=function(t,e){var r,n=[],o=function(t,e){var r=b(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==r?"":r)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!k.isPlainObject(t))k.each(t,(function(){o(this.name,this.value)}));else for(r in t)Ne(r,t[r],e,o);return n.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=k.prop(this,"elements");return t?k.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!k(this).is(":disabled")&&De.test(this.nodeName)&&!Le.test(t)&&(this.checked||!mt.test(t))})).map((function(t,e){var r=k(this).val();return null==r?null:Array.isArray(r)?k.map(r,(function(t){return{name:e.name,value:t.replace(Ae,"\r\n")}})):{name:e.name,value:r.replace(Ae,"\r\n")}})).get()}});var Oe=/%20/g,Me=/#.*$/,je=/([?&])_=[^&]*/,ze=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pe=/^(?:GET|HEAD)$/,Re=/^\/\//,Ie={},Fe={},Ge="*/".concat("*"),qe=y.createElement("a");function He(t){return function(e,r){"string"!=typeof e&&(r=e,e="*");var n,o=0,i=e.toLowerCase().match(R)||[];if(b(r))for(;n=i[o++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(r)):(t[n]=t[n]||[]).push(r)}}function Be(t,e,r,n){var o={},i=t===Fe;function a(s){var l;return o[s]=!0,k.each(t[s]||[],(function(t,s){var d=s(e,r,n);return"string"!=typeof d||i||o[d]?i?!(l=d):void 0:(e.dataTypes.unshift(d),a(d),!1)})),l}return a(e.dataTypes[0])||!o["*"]&&a("*")}function Ue(t,e){var r,n,o=k.ajaxSettings.flatOptions||{};for(r in e)void 0!==e[r]&&((o[r]?t:n||(n={}))[r]=e[r]);return n&&k.extend(!0,t,n),t}qe.href=Ee.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ee.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ee.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ge,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ue(Ue(t,k.ajaxSettings),e):Ue(k.ajaxSettings,t)},ajaxPrefilter:He(Ie),ajaxTransport:He(Fe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,o,i,a,s,l,d,c,u,p,h=k.ajaxSetup({},e),f=h.context||h,m=h.context&&(f.nodeType||f.jquery)?k(f):k.event,g=k.Deferred(),b=k.Callbacks("once memory"),v=h.statusCode||{},x={},w={},_="canceled",E={readyState:0,getResponseHeader:function(t){var e;if(d){if(!a)for(a={};e=ze.exec(i);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return d?i:null},setRequestHeader:function(t,e){return null==d&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==d&&(h.mimeType=t),this},statusCode:function(t){var e;if(t)if(d)E.always(t[E.status]);else for(e in t)v[e]=[v[e],t[e]];return this},abort:function(t){var e=t||_;return n&&n.abort(e),C(0,e),this}};if(g.promise(E),h.url=((t||h.url||Ee.href)+"").replace(Re,Ee.protocol+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(R)||[""],null==h.crossDomain){l=y.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=qe.protocol+"//"+qe.host!=l.protocol+"//"+l.host}catch(t){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=k.param(h.data,h.traditional)),Be(Ie,h,e,E),d)return E;for(u in(c=k.event&&h.global)&&0==k.active++&&k.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Pe.test(h.type),o=h.url.replace(Me,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Oe,"+")):(p=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(Te.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(je,"$1"),p=(Te.test(o)?"&":"?")+"_="+Ce.guid+++p),h.url=o+p),h.ifModified&&(k.lastModified[o]&&E.setRequestHeader("If-Modified-Since",k.lastModified[o]),k.etag[o]&&E.setRequestHeader("If-None-Match",k.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||e.contentType)&&E.setRequestHeader("Content-Type",h.contentType),E.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ge+"; q=0.01":""):h.accepts["*"]),h.headers)E.setRequestHeader(u,h.headers[u]);if(h.beforeSend&&(!1===h.beforeSend.call(f,E,h)||d))return E.abort();if(_="abort",b.add(h.complete),E.done(h.success),E.fail(h.error),n=Be(Fe,h,e,E)){if(E.readyState=1,c&&m.trigger("ajaxSend",[E,h]),d)return E;h.async&&h.timeout>0&&(s=r.setTimeout((function(){E.abort("timeout")}),h.timeout));try{d=!1,n.send(x,C)}catch(t){if(d)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,e,a,l){var u,p,y,x,w,_=e;d||(d=!0,s&&r.clearTimeout(s),n=void 0,i=l||"",E.readyState=t>0?4:0,u=t>=200&&t<300||304===t,a&&(x=function(t,e,r){for(var n,o,i,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(o in s)if(s[o]&&s[o].test(n)){l.unshift(o);break}if(l[0]in r)i=l[0];else{for(o in r){if(!l[0]||t.converters[o+" "+l[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==l[0]&&l.unshift(i),r[i]}(h,E,a)),!u&&k.inArray("script",h.dataTypes)>-1&&(h.converters["text script"]=function(){}),x=function(t,e,r,n){var o,i,a,s,l,d={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)d[a.toLowerCase()]=t.converters[a];for(i=c.shift();i;)if(t.responseFields[i]&&(r[t.responseFields[i]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=i,i=c.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(a=d[l+" "+i]||d["* "+i]))for(o in d)if((s=o.split(" "))[1]===i&&(a=d[l+" "+s[0]]||d["* "+s[0]])){!0===a?a=d[o]:!0!==d[o]&&(i=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+i}}}return{state:"success",data:e}}(h,x,E,u),u?(h.ifModified&&((w=E.getResponseHeader("Last-Modified"))&&(k.lastModified[o]=w),(w=E.getResponseHeader("etag"))&&(k.etag[o]=w)),204===t||"HEAD"===h.type?_="nocontent":304===t?_="notmodified":(_=x.state,p=x.data,u=!(y=x.error))):(y=_,!t&&_||(_="error",t<0&&(t=0))),E.status=t,E.statusText=(e||_)+"",u?g.resolveWith(f,[p,_,E]):g.rejectWith(f,[E,_,y]),E.statusCode(v),v=void 0,c&&m.trigger(u?"ajaxSuccess":"ajaxError",[E,h,u?p:y]),b.fireWith(f,[E,_]),c&&(m.trigger("ajaxComplete",[E,h]),--k.active||k.event.trigger("ajaxStop")))}return E},getJSON:function(t,e,r){return k.get(t,e,r,"json")},getScript:function(t,e){return k.get(t,void 0,e,"script")}}),k.each(["get","post"],(function(t,e){k[e]=function(t,r,n,o){return b(r)&&(o=o||n,n=r,r=void 0),k.ajax(k.extend({url:t,type:e,dataType:o,data:r,success:n},k.isPlainObject(t)&&t))}})),k.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),k._evalUrl=function(t,e,r){return k.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){k.globalEval(t,e,r)}})},k.fn.extend({wrapAll:function(t){var e;return this[0]&&(b(t)&&(t=t.call(this[0])),e=k(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return b(t)?this.each((function(e){k(this).wrapInner(t.call(this,e))})):this.each((function(){var e=k(this),r=e.contents();r.length?r.wrapAll(t):e.append(t)}))},wrap:function(t){var e=b(t);return this.each((function(r){k(this).wrapAll(e?t.call(this,r):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){k(this).replaceWith(this.childNodes)})),this}}),k.expr.pseudos.hidden=function(t){return!k.expr.pseudos.visible(t)},k.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(t){}};var $e={0:200,1223:204},We=k.ajaxSettings.xhr();g.cors=!!We&&"withCredentials"in We,g.ajax=We=!!We,k.ajaxTransport((function(t){var e,n;if(g.cors||We&&!t.crossDomain)return{send:function(o,i){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(a,o[a]);e=function(t){return function(){e&&(e=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i($e[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),n=s.onerror=s.ontimeout=e("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout((function(){e&&n()}))},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),k.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return k.globalEval(t),t}}}),k.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),k.ajaxTransport("script",(function(t){var e,r;if(t.crossDomain||t.scriptAttrs)return{send:function(n,o){e=k("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",r=function(t){e.remove(),r=null,t&&o("error"===t.type?404:200,t.type)}),y.head.appendChild(e[0])},abort:function(){r&&r()}}}));var Ve,Ke=[],Ye=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ke.pop()||k.expando+"_"+Ce.guid++;return this[t]=!0,t}}),k.ajaxPrefilter("json jsonp",(function(t,e,n){var o,i,a,s=!1!==t.jsonp&&(Ye.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ye.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=b(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ye,"$1"+o):!1!==t.jsonp&&(t.url+=(Te.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return a||k.error(o+" was not called"),a[0]},t.dataTypes[0]="json",i=r[o],r[o]=function(){a=arguments},n.always((function(){void 0===i?k(r).removeProp(o):r[o]=i,t[o]&&(t.jsonpCallback=e.jsonpCallback,Ke.push(o)),a&&b(i)&&i(a[0]),a=i=void 0})),"script"})),g.createHTMLDocument=((Ve=y.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ve.childNodes.length),k.parseHTML=function(t,e,r){return"string"!=typeof t?[]:("boolean"==typeof e&&(r=e,e=!1),e||(g.createHTMLDocument?((n=(e=y.implementation.createHTMLDocument("")).createElement("base")).href=y.location.href,e.head.appendChild(n)):e=y),i=!r&&[],(o=D.exec(t))?[e.createElement(o[1])]:(o=_t([t],e,i),i&&i.length&&k(i).remove(),k.merge([],o.childNodes)));var n,o,i},k.fn.load=function(t,e,r){var n,o,i,a=this,s=t.indexOf(" ");return s>-1&&(n=ve(t.slice(s)),t=t.slice(0,s)),b(e)?(r=e,e=void 0):e&&"object"==typeof e&&(o="POST"),a.length>0&&k.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done((function(t){i=arguments,a.html(n?k("<div>").append(k.parseHTML(t)).find(n):t)})).always(r&&function(t,e){a.each((function(){r.apply(this,i||[t.responseText,e,t])}))}),this},k.expr.pseudos.animated=function(t){return k.grep(k.timers,(function(e){return t===e.elem})).length},k.offset={setOffset:function(t,e,r){var n,o,i,a,s,l,d=k.css(t,"position"),c=k(t),u={};"static"===d&&(t.style.position="relative"),s=c.offset(),i=k.css(t,"top"),l=k.css(t,"left"),("absolute"===d||"fixed"===d)&&(i+l).indexOf("auto")>-1?(a=(n=c.position()).top,o=n.left):(a=parseFloat(i)||0,o=parseFloat(l)||0),b(e)&&(e=e.call(t,r,k.extend({},s))),null!=e.top&&(u.top=e.top-s.top+a),null!=e.left&&(u.left=e.left-s.left+o),"using"in e?e.using.call(t,u):("number"==typeof u.top&&(u.top+="px"),"number"==typeof u.left&&(u.left+="px"),c.css(u))}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){k.offset.setOffset(this,t,e)}));var e,r,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),r=n.ownerDocument.defaultView,{top:e.top+r.pageYOffset,left:e.left+r.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,r,n=this[0],o={top:0,left:0};if("fixed"===k.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),r=n.ownerDocument,t=n.offsetParent||r.documentElement;t&&(t===r.body||t===r.documentElement)&&"static"===k.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((o=k(t).offset()).top+=k.css(t,"borderTopWidth",!0),o.left+=k.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-k.css(n,"marginTop",!0),left:e.left-o.left-k.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===k.css(t,"position");)t=t.offsetParent;return t||it}))}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var r="pageYOffset"===e;k.fn[t]=function(n){return U(this,(function(t,n,o){var i;if(v(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===o)return i?i[e]:t[n];i?i.scrollTo(r?i.pageXOffset:o,r?o:i.pageYOffset):t[n]=o}),t,n,arguments.length)}})),k.each(["top","left"],(function(t,e){k.cssHooks[e]=Wt(g.pixelPosition,(function(t,r){if(r)return r=$t(t,e),qt.test(r)?k(t).position()[e]+"px":r}))})),k.each({Height:"height",Width:"width"},(function(t,e){k.each({padding:"inner"+t,content:e,"":"outer"+t},(function(r,n){k.fn[n]=function(o,i){var a=arguments.length&&(r||"boolean"!=typeof o),s=r||(!0===o||!0===i?"margin":"border");return U(this,(function(e,r,o){var i;return v(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+t],i["scroll"+t],e.body["offset"+t],i["offset"+t],i["client"+t])):void 0===o?k.css(e,r,s):k.style(e,r,o,s)}),e,a?o:void 0,a)}}))})),k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){k.fn[e]=function(t){return this.on(e,t)}})),k.fn.extend({bind:function(t,e,r){return this.on(t,null,e,r)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,r,n){return this.on(e,t,r,n)},undelegate:function(t,e,r){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",r)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){k.fn[e]=function(t,r){return arguments.length>0?this.on(e,null,t,r):this.trigger(e)}}));var Ze=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;k.proxy=function(t,e){var r,n,o;if("string"==typeof e&&(r=t[e],e=t,t=r),b(t))return n=s.call(arguments,2),(o=function(){return t.apply(e||this,n.concat(s.call(arguments)))}).guid=t.guid=t.guid||k.guid++,o},k.holdReady=function(t){t?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=L,k.isFunction=b,k.isWindow=v,k.camelCase=K,k.type=_,k.now=Date.now,k.isNumeric=function(t){var e=k.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},k.trim=function(t){return null==t?"":(t+"").replace(Ze,"")},void 0===(n=function(){return k}.apply(e,[]))||(t.exports=n);var Xe=r.jQuery,Qe=r.$;return k.noConflict=function(t){return r.$===k&&(r.$=Qe),t&&r.jQuery===k&&(r.jQuery=Xe),k},void 0===o&&(r.jQuery=r.$=k),k}))},function(t,e,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function o(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)o(r,n)&&(t[n]=r[n])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var i={arraySet:function(t,e,r,n,o){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),o);else for(var i=0;i<n;i++)t[o+i]=e[r+i]},flattenChunks:function(t){var e,r,n,o,i,a;for(n=0,e=0,r=t.length;e<r;e++)n+=t[e].length;for(a=new Uint8Array(n),o=0,e=0,r=t.length;e<r;e++)i=t[e],a.set(i,o),o+=i.length;return a}},a={arraySet:function(t,e,r,n,o){for(var i=0;i<n;i++)t[o+i]=e[r+i]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,i)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,a))},e.setTyped(n)},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)a.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.validateGraph=e.canUse32BitsIndices=e.extractPixel=e.getMatrixImpact=e.matrixFromCamera=e.getCorrectionRatio=e.floatColor=e.zIndexOrdering=e.createNormalizationFunction=e.getPixelRatio=e.createElement=e.cancelFrame=e.requestFrame=e.assignDeep=e.assign=e.isPlainObject=void 0;var i=o(r(7)),a=r(12);function s(t){return"object"==typeof t&&null!==t&&t.constructor===Object}e.isPlainObject=s,e.assign=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];t=t||{};for(var n=0,o=e.length;n<o;n++){var i=e[n];i&&Object.assign(t,i)}return t},e.assignDeep=function t(e){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];e=e||{};for(var o=0,i=r.length;o<i;o++){var a=r[o];if(a)for(var l in a)s(a[l])?e[l]=t(e[l],a[l]):e[l]=a[l]}return e},e.requestFrame="undefined"!=typeof requestAnimationFrame?function(t){return requestAnimationFrame(t)}:function(t){return setTimeout(t,0)},e.cancelFrame="undefined"!=typeof cancelAnimationFrame?function(t){return cancelAnimationFrame(t)}:function(t){return clearTimeout(t)},e.createElement=function(t,e,r){var n=document.createElement(t);if(e)for(var o in e)n.style[o]=e[o];if(r)for(var o in r)n.setAttribute(o,r[o]);return n},e.getPixelRatio=function(){return void 0!==window.devicePixelRatio?window.devicePixelRatio:1},e.createNormalizationFunction=function(t){var e=n(t.x,2),r=e[0],o=e[1],i=n(t.y,2),a=i[0],s=i[1],l=Math.max(o-r,s-a);0===l&&(l=1);var d=(o+r)/2,c=(s+a)/2,u=function(t){return{x:.5+(t.x-d)/l,y:.5+(t.y-c)/l}};return u.applyTo=function(t){t.x=.5+(t.x-d)/l,t.y=.5+(t.y-c)/l},u.inverse=function(t){return{x:d+l*(t.x-.5),y:c+l*(t.y-.5)}},u.ratio=l,u},e.zIndexOrdering=function(t,e,r){return r.sort((function(t,r){var n=e(t)||0,o=e(r)||0;return n<o?-1:n>o?1:0}))};var l={},d=new Int8Array(4),c=new Int32Array(d.buffer,0,1),u=new Float32Array(d.buffer,0,1),p=/^\s*rgba?\s*\(/,h=/^\s*rgba?\s*\(\s*([0-9]*)\s*,\s*([0-9]*)\s*,\s*([0-9]*)(?:\s*,\s*(.*)?)?\)\s*$/;function f(t,e){var r=t.height/t.width,n=e.height/e.width;return r<1&&n>1||r>1&&n<1?1:Math.min(Math.max(n,1/n),Math.max(1/r,r))}e.floatColor=function(t){if(void 0!==l[t])return l[t];var e=0,r=0,n=0,o=1;if("#"===t[0])4===t.length?(e=parseInt(t.charAt(1)+t.charAt(1),16),r=parseInt(t.charAt(2)+t.charAt(2),16),n=parseInt(t.charAt(3)+t.charAt(3),16)):(e=parseInt(t.charAt(1)+t.charAt(2),16),r=parseInt(t.charAt(3)+t.charAt(4),16),n=parseInt(t.charAt(5)+t.charAt(6),16));else if(p.test(t)){var i=t.match(h);i&&(e=+i[1],r=+i[2],n=+i[3],i[4]&&(o=+i[4]))}o=255*o|0,c[0]=4278190079&(o<<24|n<<16|r<<8|e);var a=u[0];return l[t]=a,a},e.getCorrectionRatio=f,e.matrixFromCamera=function(t,e,r,n,o){var i=t.angle,s=t.ratio,l=t.x,d=t.y,c=e.width,u=e.height,p=(0,a.identity)(),h=Math.min(c,u)-2*n,m=f(e,r);return o?((0,a.multiply)(p,(0,a.translate)((0,a.identity)(),l,d)),(0,a.multiply)(p,(0,a.scale)((0,a.identity)(),s)),(0,a.multiply)(p,(0,a.rotate)((0,a.identity)(),i)),(0,a.multiply)(p,(0,a.scale)((0,a.identity)(),c/h/2/m,u/h/2/m))):((0,a.multiply)(p,(0,a.scale)((0,a.identity)(),h/c*2*m,h/u*2*m)),(0,a.multiply)(p,(0,a.rotate)((0,a.identity)(),-i)),(0,a.multiply)(p,(0,a.scale)((0,a.identity)(),1/s)),(0,a.multiply)(p,(0,a.translate)((0,a.identity)(),-l,-d))),p},e.getMatrixImpact=function(t,e,r){var o=n((0,a.multiplyVec)(t,[Math.cos(e.angle),Math.sin(e.angle),0]),2),i=o[0],s=o[1];return 1/Math.sqrt(Math.pow(i,2)+Math.pow(s,2))/r.width},e.extractPixel=function(t,e,r,n){var o=n||new Uint8Array(4);return t.readPixels(e,r,1,1,t.RGBA,t.UNSIGNED_BYTE,o),o},e.canUse32BitsIndices=function(t){return"undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||!!t.getExtension("OES_element_index_uint")},e.validateGraph=function(t){if(!(0,i.default)(t))throw new Error("Sigma: invalid graph instance.");t.forEachNode((function(t,e){if(!Number.isFinite(e.x)||!Number.isFinite(e.y))throw new Error("Sigma: Coordinates of node "+t+" are invalid. A node must have a numeric 'x' and 'y' attribute.")}))}},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.createEdgeCompoundProgram=e.AbstractEdgeProgram=void 0;var i=function(t){function e(e,r,n,o,i){return t.call(this,e,r,n,o,i)||this}return o(e,t),e}(r(16).AbstractProgram);e.AbstractEdgeProgram=i,e.createEdgeCompoundProgram=function(t){return function(){function e(e,r){this.programs=t.map((function(t){return new t(e,r)}))}return e.prototype.bufferData=function(){this.programs.forEach((function(t){return t.bufferData()}))},e.prototype.allocate=function(t){this.programs.forEach((function(e){return e.allocate(t)}))},e.prototype.bind=function(){},e.prototype.computeIndices=function(){this.programs.forEach((function(t){return t.computeIndices()}))},e.prototype.render=function(t){this.programs.forEach((function(e){e.bind(),e.bufferData(),e.render(t)}))},e.prototype.process=function(t,e,r,n,o){this.programs.forEach((function(i){return i.process(t,e,r,n,o)}))},e}()}},function(t,e,r){"use strict";var n,o=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},i=function(){var t={};return function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}t[e]=r}return t[e]}}(),a=[];function s(t){for(var e=-1,r=0;r<a.length;r++)if(a[r].identifier===t){e=r;break}return e}function l(t,e){for(var r={},n=[],o=0;o<t.length;o++){var i=t[o],l=e.base?i[0]+e.base:i[0],d=r[l]||0,c="".concat(l," ").concat(d);r[l]=d+1;var u=s(c),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(a[u].references++,a[u].updater(p)):a.push({identifier:c,updater:g(p,e),references:1}),n.push(c)}return n}function d(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,u=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function p(t,e,r,n){var o=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=u(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function h(t,e,r){var n=r.css,o=r.media,i=r.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var f=null,m=0;function g(t,e){var r,n,o;if(e.singleton){var i=m++;r=f||(f=d(e)),n=p.bind(null,r,i,!1),o=p.bind(null,r,i,!0)}else r=d(e),n=h.bind(null,r,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var r=l(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<r.length;n++){var o=s(r[n]);a[o].references--}for(var i=l(t,e),d=0;d<r.length;d++){var c=s(r[d]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}r=i}}}},function(t,e,r){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=function(t,e){var r=t[1]||"",n=t[3];if(!n)return r;if(e&&"function"==typeof btoa){var o=(a=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[r].concat(i).concat([o]).join("\n")}var a,s,l;return[r].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,n){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(n)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);n&&o[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),e.push(l))}},e}},function(t,e){t.exports=function(t){return null!==t&&"object"==typeof t&&"function"==typeof t.addUndirectedEdgeWithKey&&"function"==typeof t.dropNode&&"boolean"==typeof t.multi}},function(t,e,r){"use strict";var n,o="object"==typeof Reflect?Reflect:null,i=o&&"function"==typeof o.apply?o.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};n=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function s(){s.init.call(this)}t.exports=s,t.exports.once=function(t,e){return new Promise((function(r,n){function o(r){t.removeListener(e,i),n(r)}function i(){"function"==typeof t.removeListener&&t.removeListener("error",o),r([].slice.call(arguments))}b(t,e,i,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&b(t,"error",e,r)}(t,o,{once:!0})}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var l=10;function d(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function c(t){return void 0===t._maxListeners?s.defaultMaxListeners:t._maxListeners}function u(t,e,r,n){var o,i,a,s;if(d(r),void 0===(i=t._events)?(i=t._events=Object.create(null),t._eventsCount=0):(void 0!==i.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),i=t._events),a=i[e]),void 0===a)a=i[e]=r,++t._eventsCount;else if("function"==typeof a?a=i[e]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(o=c(t))>0&&a.length>o&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=a.length,s=l,console&&console.warn&&console.warn(s)}return t}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},o=p.bind(n);return o.listener=r,n.wrapFn=o,o}function f(t,e,r){var n=t._events;if(void 0===n)return[];var o=n[e];return void 0===o?[]:"function"==typeof o?r?[o.listener||o]:[o]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(o):g(o,o.length)}function m(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function g(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}function b(t,e,r,n){if("function"==typeof t.on)n.once?t.once(e,r):t.on(e,r);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function o(i){n.once&&t.removeEventListener(e,o),r(i)}))}}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");l=t}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,o=this._events;if(void 0!==o)n=n&&void 0===o.error;else if(!n)return!1;if(n){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var l=o[t];if(void 0===l)return!1;if("function"==typeof l)i(l,this,e);else{var d=l.length,c=g(l,d);for(r=0;r<d;++r)i(c[r],this,e)}return!0},s.prototype.addListener=function(t,e){return u(this,t,e,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(t,e){return u(this,t,e,!0)},s.prototype.once=function(t,e){return d(e),this.on(t,h(this,t,e)),this},s.prototype.prependOnceListener=function(t,e){return d(e),this.prependListener(t,h(this,t,e)),this},s.prototype.removeListener=function(t,e){var r,n,o,i,a;if(d(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(o=-1,i=r.length-1;i>=0;i--)if(r[i]===e||r[i].listener===e){a=r[i].listener,o=i;break}if(o<0)return this;0===o?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,o),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,a||e)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var o,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(o=i[n])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},s.prototype.listeners=function(t){return f(this,t,!0)},s.prototype.rawListeners=function(t){return f(this,t,!1)},s.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):m.call(t,e)},s.prototype.listenerCount=m,s.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(t,e,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(t,e,r){"use strict";var n=r(73),o=r(77),i=[].slice,a=["keyword","gray","hex"],s={};Object.keys(o).forEach((function(t){s[i.call(o[t].labels).sort().join("")]=t}));var l={};function d(t,e){if(!(this instanceof d))return new d(t,e);if(e&&e in a&&(e=null),e&&!(e in o))throw new Error("Unknown model: "+e);var r,c;if(null==t)this.model="rgb",this.color=[0,0,0],this.valpha=1;else if(t instanceof d)this.model=t.model,this.color=t.color.slice(),this.valpha=t.valpha;else if("string"==typeof t){var u=n.get(t);if(null===u)throw new Error("Unable to parse color from string: "+t);this.model=u.model,c=o[this.model].channels,this.color=u.value.slice(0,c),this.valpha="number"==typeof u.value[c]?u.value[c]:1}else if(t.length){this.model=e||"rgb",c=o[this.model].channels;var p=i.call(t,0,c);this.color=h(p,c),this.valpha="number"==typeof t[c]?t[c]:1}else if("number"==typeof t)t&=16777215,this.model="rgb",this.color=[t>>16&255,t>>8&255,255&t],this.valpha=1;else{this.valpha=1;var f=Object.keys(t);"alpha"in t&&(f.splice(f.indexOf("alpha"),1),this.valpha="number"==typeof t.alpha?t.alpha:0);var m=f.sort().join("");if(!(m in s))throw new Error("Unable to parse color from object: "+JSON.stringify(t));this.model=s[m];var g=o[this.model].labels,b=[];for(r=0;r<g.length;r++)b.push(t[g[r]]);this.color=h(b)}if(l[this.model])for(c=o[this.model].channels,r=0;r<c;r++){var v=l[this.model][r];v&&(this.color[r]=v(this.color[r]))}this.valpha=Math.max(0,Math.min(1,this.valpha)),Object.freeze&&Object.freeze(this)}function c(t,e,r){return(t=Array.isArray(t)?t:[t]).forEach((function(t){(l[t]||(l[t]=[]))[e]=r})),t=t[0],function(n){var o;return arguments.length?(r&&(n=r(n)),(o=this[t]()).color[e]=n,o):(o=this[t]().color[e],r&&(o=r(o)),o)}}function u(t){return function(e){return Math.max(0,Math.min(t,e))}}function p(t){return Array.isArray(t)?t:[t]}function h(t,e){for(var r=0;r<e;r++)"number"!=typeof t[r]&&(t[r]=0);return t}d.prototype={toString:function(){return this.string()},toJSON:function(){return this[this.model]()},string:function(t){var e=this.model in n.to?this:this.rgb(),r=1===(e=e.round("number"==typeof t?t:1)).valpha?e.color:e.color.concat(this.valpha);return n.to[e.model](r)},percentString:function(t){var e=this.rgb().round("number"==typeof t?t:1),r=1===e.valpha?e.color:e.color.concat(this.valpha);return n.to.rgb.percent(r)},array:function(){return 1===this.valpha?this.color.slice():this.color.concat(this.valpha)},object:function(){for(var t={},e=o[this.model].channels,r=o[this.model].labels,n=0;n<e;n++)t[r[n]]=this.color[n];return 1!==this.valpha&&(t.alpha=this.valpha),t},unitArray:function(){var t=this.rgb().color;return t[0]/=255,t[1]/=255,t[2]/=255,1!==this.valpha&&t.push(this.valpha),t},unitObject:function(){var t=this.rgb().object();return t.r/=255,t.g/=255,t.b/=255,1!==this.valpha&&(t.alpha=this.valpha),t},round:function(t){return t=Math.max(t||0,0),new d(this.color.map(function(t){return function(e){return function(t,e){return Number(t.toFixed(e))}(e,t)}}(t)).concat(this.valpha),this.model)},alpha:function(t){return arguments.length?new d(this.color.concat(Math.max(0,Math.min(1,t))),this.model):this.valpha},red:c("rgb",0,u(255)),green:c("rgb",1,u(255)),blue:c("rgb",2,u(255)),hue:c(["hsl","hsv","hsl","hwb","hcg"],0,(function(t){return(t%360+360)%360})),saturationl:c("hsl",1,u(100)),lightness:c("hsl",2,u(100)),saturationv:c("hsv",1,u(100)),value:c("hsv",2,u(100)),chroma:c("hcg",1,u(100)),gray:c("hcg",2,u(100)),white:c("hwb",1,u(100)),wblack:c("hwb",2,u(100)),cyan:c("cmyk",0,u(100)),magenta:c("cmyk",1,u(100)),yellow:c("cmyk",2,u(100)),black:c("cmyk",3,u(100)),x:c("xyz",0,u(100)),y:c("xyz",1,u(100)),z:c("xyz",2,u(100)),l:c("lab",0,u(100)),a:c("lab",1),b:c("lab",2),keyword:function(t){return arguments.length?new d(t):o[this.model].keyword(this.color)},hex:function(t){return arguments.length?new d(t):n.to.hex(this.rgb().round().color)},rgbNumber:function(){var t=this.rgb().color;return(255&t[0])<<16|(255&t[1])<<8|255&t[2]},luminosity:function(){for(var t=this.rgb().color,e=[],r=0;r<t.length;r++){var n=t[r]/255;e[r]=n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),r=t.luminosity();return e>r?(e+.05)/(r+.05):(r+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?"AAA":e>=4.5?"AA":""},isDark:function(){var t=this.rgb().color;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},isLight:function(){return!this.isDark()},negate:function(){for(var t=this.rgb(),e=0;e<3;e++)t.color[e]=255-t.color[e];return t},lighten:function(t){var e=this.hsl();return e.color[2]+=e.color[2]*t,e},darken:function(t){var e=this.hsl();return e.color[2]-=e.color[2]*t,e},saturate:function(t){var e=this.hsl();return e.color[1]+=e.color[1]*t,e},desaturate:function(t){var e=this.hsl();return e.color[1]-=e.color[1]*t,e},whiten:function(t){var e=this.hwb();return e.color[1]+=e.color[1]*t,e},blacken:function(t){var e=this.hwb();return e.color[2]+=e.color[2]*t,e},grayscale:function(){var t=this.rgb().color,e=.3*t[0]+.59*t[1]+.11*t[2];return d.rgb(e,e,e)},fade:function(t){return this.alpha(this.valpha-this.valpha*t)},opaquer:function(t){return this.alpha(this.valpha+this.valpha*t)},rotate:function(t){var e=this.hsl(),r=e.color[0];return r=(r=(r+t)%360)<0?360+r:r,e.color[0]=r,e},mix:function(t,e){if(!t||!t.rgb)throw new Error('Argument to "mix" was not a Color instance, but rather an instance of '+typeof t);var r=t.rgb(),n=this.rgb(),o=void 0===e?.5:e,i=2*o-1,a=r.alpha()-n.alpha(),s=((i*a==-1?i:(i+a)/(1+i*a))+1)/2,l=1-s;return d.rgb(s*r.red()+l*n.red(),s*r.green()+l*n.green(),s*r.blue()+l*n.blue(),r.alpha()*o+n.alpha()*(1-o))}},Object.keys(o).forEach((function(t){if(-1===a.indexOf(t)){var e=o[t].channels;d.prototype[t]=function(){if(this.model===t)return new d(this);if(arguments.length)return new d(arguments,t);var r="number"==typeof arguments[e]?e:this.valpha;return new d(p(o[this.model][t].raw(this.color)).concat(r),t)},d[t]=function(r){return"number"==typeof r&&(r=h(i.call(arguments),e)),new d(r,t)}}})),t.exports=d},function(t,e,r){t.exports=function(){"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function r(t){return(r=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function n(t,e){return(n=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function o(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function i(t,e,r){return(i=o()?Reflect.construct:function(t,e,r){var o=[null];o.push.apply(o,e);var i=new(Function.bind.apply(t,o));return r&&n(i,r.prototype),i}).apply(null,arguments)}function a(t){var e="function"==typeof Map?new Map:void 0;return(a=function(t){if(null===t||(o=t,-1===Function.toString.call(o).indexOf("[native code]")))return t;var o;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,a)}function a(){return i(t,arguments,r(this).constructor)}return a.prototype=Object.create(t.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),n(a,t)})(t)}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var l=function(){for(var t=arguments[0],e=1,r=arguments.length;e<r;e++)if(arguments[e])for(var n in arguments[e])t[n]=arguments[e][n];return t};function d(t,e,r,n){var o=t._nodes.get(e),i=null;return o?i="mixed"===n?o.out&&o.out[r]||o.undirected&&o.undirected[r]:"directed"===n?o.out&&o.out[r]:o.undirected&&o.undirected[r]:i}function c(e){return null!==e&&"object"===t(e)&&"function"==typeof e.addUndirectedEdgeWithKey&&"function"==typeof e.dropNode}function u(e){return"object"===t(e)&&null!==e&&e.constructor===Object}function p(t){var e;for(e in t)return!1;return!0}function h(t,e,r){Object.defineProperty(t,e,{enumerable:!1,configurable:!1,writable:!0,value:r})}function f(t,e,r){var n={enumerable:!0,configurable:!0};"function"==typeof r?n.get=r:(n.value=r,n.writable=!1),Object.defineProperty(t,e,n)}function m(t){return!(!u(t)||t.attributes&&!Array.isArray(t.attributes))}"function"==typeof Object.assign&&(l=Object.assign);var g,b="object"==typeof Reflect?Reflect:null,v=b&&"function"==typeof b.apply?b.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};g=b&&"function"==typeof b.ownKeys?b.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var y=Number.isNaN||function(t){return t!=t};function x(){x.init.call(this)}var w=x;x.EventEmitter=x,x.prototype._events=void 0,x.prototype._eventsCount=0,x.prototype._maxListeners=void 0;var _=10;function k(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function E(t){return void 0===t._maxListeners?x.defaultMaxListeners:t._maxListeners}function C(t,e,r,n){var o,i,a,s;if(k(r),void 0===(i=t._events)?(i=t._events=Object.create(null),t._eventsCount=0):(void 0!==i.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),i=t._events),a=i[e]),void 0===a)a=i[e]=r,++t._eventsCount;else if("function"==typeof a?a=i[e]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(o=E(t))>0&&a.length>o&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=a.length,s=l,console&&console.warn&&console.warn(s)}return t}function T(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function S(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},o=T.bind(n);return o.listener=r,n.wrapFn=o,o}function A(t,e,r){var n=t._events;if(void 0===n)return[];var o=n[e];return void 0===o?[]:"function"==typeof o?r?[o.listener||o]:[o]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(o):D(o,o.length)}function L(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function D(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}function N(t){Object.defineProperty(this,"_next",{writable:!1,enumerable:!1,value:t}),this.done=!1}Object.defineProperty(x,"defaultMaxListeners",{enumerable:!0,get:function(){return _},set:function(t){if("number"!=typeof t||t<0||y(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");_=t}}),x.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},x.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||y(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},x.prototype.getMaxListeners=function(){return E(this)},x.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,o=this._events;if(void 0!==o)n=n&&void 0===o.error;else if(!n)return!1;if(n){var i;if(e.length>0&&(i=e[0]),i instanceof Error)throw i;var a=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw a.context=i,a}var s=o[t];if(void 0===s)return!1;if("function"==typeof s)v(s,this,e);else{var l=s.length,d=D(s,l);for(r=0;r<l;++r)v(d[r],this,e)}return!0},x.prototype.addListener=function(t,e){return C(this,t,e,!1)},x.prototype.on=x.prototype.addListener,x.prototype.prependListener=function(t,e){return C(this,t,e,!0)},x.prototype.once=function(t,e){return k(e),this.on(t,S(this,t,e)),this},x.prototype.prependOnceListener=function(t,e){return k(e),this.prependListener(t,S(this,t,e)),this},x.prototype.removeListener=function(t,e){var r,n,o,i,a;if(k(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(o=-1,i=r.length-1;i>=0;i--)if(r[i]===e||r[i].listener===e){a=r[i].listener,o=i;break}if(o<0)return this;0===o?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,o),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,a||e)}return this},x.prototype.off=x.prototype.removeListener,x.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var o,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(o=i[n])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},x.prototype.listeners=function(t){return A(this,t,!0)},x.prototype.rawListeners=function(t){return A(this,t,!1)},x.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):L.call(t,e)},x.prototype.listenerCount=L,x.prototype.eventNames=function(){return this._eventsCount>0?g(this._events):[]},w.once=function(t,e){return new Promise((function(r,n){function o(){void 0!==i&&t.removeListener("error",i),r([].slice.call(arguments))}var i;"error"!==e&&(i=function(r){t.removeListener(e,o),n(r)},t.once("error",i)),t.once(e,o)}))},N.prototype.next=function(){if(this.done)return{done:!0};var t=this._next();return t.done&&(this.done=!0),t},"undefined"!=typeof Symbol&&(N.prototype[Symbol.iterator]=function(){return this}),N.of=function(){var t=arguments,e=t.length,r=0;return new N((function(){return r>=e?{done:!0}:{done:!1,value:t[r++]}}))},N.empty=function(){var t=new N(null);return t.done=!0,t},N.is=function(t){return t instanceof N||"object"==typeof t&&null!==t&&"function"==typeof t.next};var O=N,M=function(t,e){for(var r,n=arguments.length>1?e:1/0,o=n!==1/0?new Array(n):[],i=0;;){if(i===n)return o;if((r=t.next()).done)return i!==e?o.slice(0,i):o;o[i++]=r.value}},j=function(t){function r(e,r){var n;return(n=t.call(this)||this).name="GraphError",n.message=e||"",n.data=r||{},n}return e(r,t),r}(a(Error)),z=function(t){function r(e,n){var o;return(o=t.call(this,e,n)||this).name="InvalidArgumentsGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(o),r.prototype.constructor),o}return e(r,t),r}(j),P=function(t){function r(e,n){var o;return(o=t.call(this,e,n)||this).name="NotFoundGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(o),r.prototype.constructor),o}return e(r,t),r}(j),R=function(t){function r(e,n){var o;return(o=t.call(this,e,n)||this).name="UsageGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(o),r.prototype.constructor),o}return e(r,t),r}(j);function I(t,e){this.key=t,this.attributes=e,this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.directedSelfLoops=0,this.undirectedSelfLoops=0,this.in={},this.out={},this.undirected={}}function F(t,e){this.key=t,this.attributes=e,this.inDegree=0,this.outDegree=0,this.directedSelfLoops=0,this.in={},this.out={}}function G(t,e){this.key=t,this.attributes=e,this.undirectedDegree=0,this.undirectedSelfLoops=0,this.undirected={}}function q(t,e,r,n,o,i){this.key=e,this.attributes=i,this.undirected=t,this.source=n,this.target=o,this.generatedKey=r}function H(t,e,r,n,o,i,a){var s,l,d="out",c="in";if(e&&(d=c="undirected"),t.multi){if(void 0===(l=(s=i[d])[o])&&(l=new Set,s[o]=l),l.add(r),n===o&&e)return;void 0===(s=a[c])[n]&&(s[n]=l)}else{if(i[d][o]=r,n===o&&e)return;a[c][n]=r}}function B(t,e,r){var n=t.multi,o=r.source,i=r.target,a=o.key,s=i.key,l=o[e?"undirected":"out"],d=e?"undirected":"in";if(s in l)if(n){var c=l[s];1===c.size?(delete l[s],delete i[d][a]):c.delete(r)}else delete l[s];n||delete i[d][a]}F.prototype.upgradeToMixed=function(){this.undirectedDegree=0,this.undirectedSelfLoops=0,this.undirected={}},G.prototype.upgradeToMixed=function(){this.inDegree=0,this.outDegree=0,this.directedSelfLoops=0,this.in={},this.out={}};var U=[{name:function(t){return"get".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new R("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new R("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+t,a=""+n;if(n=arguments[2],!(o=d(this,i,a,r)))throw new P("Graph.".concat(e,': could not find an edge for the given path ("').concat(i,'" - "').concat(a,'").'))}else if(t=""+t,!(o=this._edges.get(t)))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'));if("mixed"!==r&&o.undirected!==("undirected"===r))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" ').concat(r," edge in the graph."));return o.attributes[n]}}},{name:function(t){return"get".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t){var n;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new R("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>1){if(this.multi)throw new R("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,i=""+arguments[1];if(!(n=d(this,o,i,r)))throw new P("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(i,'").'))}else if(t=""+t,!(n=this._edges.get(t)))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'));if("mixed"!==r&&n.undirected!==("undirected"===r))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" ').concat(r," edge in the graph."));return n.attributes}}},{name:function(t){return"has".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new R("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new R("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+t,a=""+n;if(n=arguments[2],!(o=d(this,i,a,r)))throw new P("Graph.".concat(e,': could not find an edge for the given path ("').concat(i,'" - "').concat(a,'").'))}else if(t=""+t,!(o=this._edges.get(t)))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'));if("mixed"!==r&&o.undirected!==("undirected"===r))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" ').concat(r," edge in the graph."));return o.attributes.hasOwnProperty(n)}}},{name:function(t){return"set".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n,o){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new R("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new R("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+t,s=""+n;if(n=arguments[2],o=arguments[3],!(i=d(this,a,s,r)))throw new P("Graph.".concat(e,': could not find an edge for the given path ("').concat(a,'" - "').concat(s,'").'))}else if(t=""+t,!(i=this._edges.get(t)))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'));if("mixed"!==r&&i.undirected!==("undirected"===r))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" ').concat(r," edge in the graph."));return i.attributes[n]=o,this.emit("edgeAttributesUpdated",{key:i.key,type:"set",attributes:i.attributes,name:n}),this}}},{name:function(t){return"update".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n,o){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new R("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new R("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+t,s=""+n;if(n=arguments[2],o=arguments[3],!(i=d(this,a,s,r)))throw new P("Graph.".concat(e,': could not find an edge for the given path ("').concat(a,'" - "').concat(s,'").'))}else if(t=""+t,!(i=this._edges.get(t)))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'));if("function"!=typeof o)throw new z("Graph.".concat(e,": updater should be a function."));if("mixed"!==r&&i.undirected!==("undirected"===r))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" ').concat(r," edge in the graph."));return i.attributes[n]=o(i.attributes[n]),this.emit("edgeAttributesUpdated",{key:i.key,type:"set",attributes:i.attributes,name:n}),this}}},{name:function(t){return"remove".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new R("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new R("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+t,a=""+n;if(n=arguments[2],!(o=d(this,i,a,r)))throw new P("Graph.".concat(e,': could not find an edge for the given path ("').concat(i,'" - "').concat(a,'").'))}else if(t=""+t,!(o=this._edges.get(t)))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'));if("mixed"!==r&&o.undirected!==("undirected"===r))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" ').concat(r," edge in the graph."));return delete o.attributes[n],this.emit("edgeAttributesUpdated",{key:o.key,type:"remove",attributes:o.attributes,name:n}),this}}},{name:function(t){return"replace".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new R("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new R("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+t,a=""+n;if(n=arguments[2],!(o=d(this,i,a,r)))throw new P("Graph.".concat(e,': could not find an edge for the given path ("').concat(i,'" - "').concat(a,'").'))}else if(t=""+t,!(o=this._edges.get(t)))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'));if(!u(n))throw new z("Graph.".concat(e,": provided attributes are not a plain object."));if("mixed"!==r&&o.undirected!==("undirected"===r))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" ').concat(r," edge in the graph."));return o.attributes=n,this.emit("edgeAttributesUpdated",{key:o.key,type:"replace",attributes:o.attributes}),this}}},{name:function(t){return"merge".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new R("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new R("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+t,a=""+n;if(n=arguments[2],!(o=d(this,i,a,r)))throw new P("Graph.".concat(e,': could not find an edge for the given path ("').concat(i,'" - "').concat(a,'").'))}else if(t=""+t,!(o=this._edges.get(t)))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'));if(!u(n))throw new z("Graph.".concat(e,": provided attributes are not a plain object."));if("mixed"!==r&&o.undirected!==("undirected"===r))throw new P("Graph.".concat(e,': could not find the "').concat(t,'" ').concat(r," edge in the graph."));return l(o.attributes,n),this.emit("edgeAttributesUpdated",{key:o.key,type:"merge",attributes:o.attributes,data:n}),this}}}],$=function(){var t,e=arguments,r=-1;return new O((function n(){if(!t){if(++r>=e.length)return{done:!0};t=e[r]}var o=t.next();return o.done?(t=null,n()):o}))},W=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function V(t,e){for(var r in e)t.push(e[r].key)}function K(t,e){for(var r in e)e[r].forEach((function(e){return t.push(e.key)}))}function Y(t,e,r){for(var n in t)if(n!==r){var o=t[n];e(o.key,o.attributes,o.source.key,o.target.key,o.source.attributes,o.target.attributes,o.undirected,o.generatedKey)}}function Z(t,e,r){for(var n in t)n!==r&&t[n].forEach((function(t){return e(t.key,t.attributes,t.source.key,t.target.key,t.source.attributes,t.target.attributes,t.undirected,t.generatedKey)}))}function X(t,e,r){for(var n in t)if(n!==r){var o=t[n];if(e(o.key,o.attributes,o.source.key,o.target.key,o.source.attributes,o.target.attributes,o.undirected,o.generatedKey))return!0}return!1}function Q(t,e,r){var n,o,i,a,s;for(var l in t)if(l!==r)for(n=t[l].values();!0!==(o=n.next()).done;)if(a=(i=o.value).source,s=i.target,e(i.key,i.attributes,a.key,s.key,a.attributes,s.attributes,i.undirected,i.generatedKey))return!0;return!1}function J(t,e){var r=Object.keys(t),n=r.length,o=null,i=0;return new O((function a(){var s;if(o){var l=o.next();if(l.done)return o=null,i++,a();s=l.value}else{if(i>=n)return{done:!0};var d=r[i];if(d===e)return i++,a();if((s=t[d])instanceof Set)return o=s.values(),a();i++}return{done:!1,value:[s.key,s.attributes,s.source.key,s.target.key,s.source.attributes,s.target.attributes]}}))}function tt(t,e,r){var n=e[r];n&&t.push(n.key)}function et(t,e,r){var n=e[r];n&&n.forEach((function(e){return t.push(e.key)}))}function rt(t,e,r){var n=t[e];if(n){var o=n.source,i=n.target;r(n.key,n.attributes,o.key,i.key,o.attributes,i.attributes,n.undirected,n.generatedKey)}}function nt(t,e,r){var n=t[e];n&&n.forEach((function(t){return r(t.key,t.attributes,t.source.key,t.target.key,t.source.attributes,t.target.attributes,t.undirected,t.generatedKey)}))}function ot(t,e,r){var n=t[e];if(n){var o=n.source,i=n.target;return r(n.key,n.attributes,o.key,i.key,o.attributes,i.attributes,n.undirected,n.generatedKey)}}function it(t,e,r){var n=t[e];if(n){for(var o,i,a=n.values();!0!==(o=a.next()).done;)if(r((i=o.value).key,i.attributes,i.source.key,i.target.key,i.source.attributes,i.target.attributes,i.undirected,i.generatedKey))return!0;return!1}}function at(t,e){var r=t[e];if(r instanceof Set){var n=r.values();return new O((function(){var t=n.next();if(t.done)return t;var e=t.value;return{done:!1,value:[e.key,e.attributes,e.source.key,e.target.key,e.source.attributes,e.target.attributes]}}))}return O.of([r.key,r.attributes,r.source.key,r.target.key,r.source.attributes,r.target.attributes])}function st(t,e){if(0===t.size)return[];if("mixed"===e||e===t.type)return"function"==typeof Array.from?Array.from(t._edges.keys()):M(t._edges.keys(),t._edges.size);for(var r,n,o="undirected"===e?t.undirectedSize:t.directedSize,i=new Array(o),a="undirected"===e,s=t._edges.values(),l=0;!0!==(r=s.next()).done;)(n=r.value).undirected===a&&(i[l++]=n.key);return i}function lt(t,e,r){if(0!==t.size)for(var n,o,i="mixed"!==e&&e!==t.type,a="undirected"===e,s=t._edges.values();!0!==(n=s.next()).done;)if(o=n.value,!i||o.undirected===a){var l=o,d=l.key,c=l.attributes,u=l.source,p=l.target;r(d,c,u.key,p.key,u.attributes,p.attributes,o.undirected,o.generatedKey)}}function dt(t,e,r){if(0!==t.size)for(var n,o,i="mixed"!==e&&e!==t.type,a="undirected"===e,s=t._edges.values();!0!==(n=s.next()).done;)if(o=n.value,!i||o.undirected===a){var l=o,d=l.key,c=l.attributes,u=l.source,p=l.target;if(r(d,c,u.key,p.key,u.attributes,p.attributes,o.undirected,o.generatedKey))break}}function ct(t,e){if(0===t.size)return O.empty();var r="mixed"!==e&&e!==t.type,n="undirected"===e,o=t._edges.values();return new O((function(){for(var t,e;;){if((t=o.next()).done)return t;if(e=t.value,!r||e.undirected===n)break}return{value:[e.key,e.attributes,e.source.key,e.target.key,e.source.attributes,e.target.attributes],done:!1}}))}function ut(t,e,r,n){var o=[],i=t?K:V;return"undirected"!==e&&("out"!==r&&i(o,n.in),"in"!==r&&i(o,n.out),!r&&n.directedSelfLoops>0&&o.splice(o.lastIndexOf(n.key),1)),"directed"!==e&&i(o,n.undirected),o}function pt(t,e,r,n,o){var i=t?Z:Y;"undirected"!==e&&("out"!==r&&i(n.in,o),"in"!==r&&i(n.out,o,r?null:n.key)),"directed"!==e&&i(n.undirected,o)}function ht(t,e,r,n,o){var i=t?Q:X;if("undirected"!==e){if("out"!==r&&i(n.in,o))return;if("in"!==r&&i(n.out,o,r?null:n.key))return}"directed"===e||i(n.undirected,o)}function ft(t,e,r){var n=O.empty();return"undirected"!==t&&("out"!==e&&void 0!==r.in&&(n=$(n,J(r.in))),"in"!==e&&void 0!==r.out&&(n=$(n,J(r.out,e?null:r.key)))),"directed"!==t&&void 0!==r.undirected&&(n=$(n,J(r.undirected))),n}function mt(t,e,r,n,o){var i=e?et:tt,a=[];return"undirected"!==t&&(void 0!==n.in&&"out"!==r&&i(a,n.in,o),void 0!==n.out&&"in"!==r&&i(a,n.out,o),!r&&n.directedSelfLoops>0&&a.splice(a.lastIndexOf(n.key),1)),"directed"!==t&&void 0!==n.undirected&&i(a,n.undirected,o),a}function gt(t,e,r,n,o,i){var a=e?nt:rt;"undirected"!==t&&(void 0!==n.in&&"out"!==r&&a(n.in,o,i),n.key!==o&&void 0!==n.out&&"in"!==r&&a(n.out,o,i)),"directed"!==t&&void 0!==n.undirected&&a(n.undirected,o,i)}function bt(t,e,r,n,o,i){var a=e?it:ot;if("undirected"!==t){if(void 0!==n.in&&"out"!==r&&a(n.in,o,i))return;if(n.key!==o&&void 0!==n.out&&"in"!==r&&a(n.out,o,i,r?null:n.key))return}"directed"===t||void 0===n.undirected||a(n.undirected,o,i)}function vt(t,e,r,n){var o=O.empty();return"undirected"!==t&&(void 0!==r.in&&"out"!==e&&n in r.in&&(o=$(o,at(r.in,n))),void 0!==r.out&&"in"!==e&&n in r.out&&(o=$(o,at(r.out,n)))),"directed"!==t&&void 0!==r.undirected&&n in r.undirected&&(o=$(o,at(r.undirected,n))),o}var yt=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function xt(t,e){if(void 0!==e)for(var r in e)t.add(r)}function wt(t,e,r){if("mixed"!==t){if("undirected"===t)return Object.keys(r.undirected);if("string"==typeof e)return Object.keys(r[e])}var n=new Set;return"undirected"!==t&&("out"!==e&&xt(n,r.in),"in"!==e&&xt(n,r.out)),"directed"!==t&&xt(n,r.undirected),M(n.values(),n.size)}function _t(t,e,r){for(var n in e){var o=e[n];o instanceof Set&&(o=o.values().next().value);var i=o.source,a=o.target,s=i===t?a:i;r(s.key,s.attributes)}}function kt(t,e,r,n){for(var o in r){var i=r[o];i instanceof Set&&(i=i.values().next().value);var a=i.source,s=i.target,l=a===e?s:a;t.has(l.key)||(t.add(l.key),n(l.key,l.attributes))}}function Et(t,e,r){for(var n in e){var o=e[n];o instanceof Set&&(o=o.values().next().value);var i=o.source,a=o.target,s=i===t?a:i;if(r(s.key,s.attributes))return!0}return!1}function Ct(t,e,r,n){for(var o in r){var i=r[o];i instanceof Set&&(i=i.values().next().value);var a=i.source,s=i.target,l=a===e?s:a;if(!t.has(l.key)&&(t.add(l.key),n(l.key,l.attributes)))return!0}return!1}function Tt(t,e){var r=Object.keys(e),n=r.length,o=0;return new O((function(){if(o>=n)return{done:!0};var i=e[r[o++]];i instanceof Set&&(i=i.values().next().value);var a=i.source,s=i.target,l=a===t?s:a;return{done:!1,value:[l.key,l.attributes]}}))}function St(t,e,r){var n=Object.keys(r),o=n.length,i=0;return new O((function a(){if(i>=o)return{done:!0};var s=r[n[i++]];s instanceof Set&&(s=s.values().next().value);var l=s.source,d=s.target,c=l===e?d:l;return t.has(c.key)?a():(t.add(c.key),{done:!1,value:[c.key,c.attributes]})}))}function At(t,e,r,n,o){var i=t._nodes.get(n);if("undirected"!==e){if("out"!==r&&void 0!==i.in)for(var a in i.in)if(a===o)return!0;if("in"!==r&&void 0!==i.out)for(var s in i.out)if(s===o)return!0}if("directed"!==e&&void 0!==i.undirected)for(var l in i.undirected)if(l===o)return!0;return!1}function Lt(t,e,r){for(var n,o,i,a,s,l,d,c=e._nodes.values(),u=e.type;!0!==(n=c.next()).done;){if(o=n.value,"undirected"!==u)for(i in a=o.out)if(l=(s=a[i]).target,d=r(o.key,l.key,o.attributes,l.attributes,s.key,s.attributes,s.undirected,s.generatedKey),t&&d)return;if("directed"!==u)for(i in a=o.undirected)if((l=(s=a[i]).target).key!==i&&(l=s.source),d=r(o.key,l.key,o.attributes,l.attributes,s.key,s.attributes,s.undirected,s.generatedKey),t&&d)return}}function Dt(t,e,r){for(var n,o,i,a,s,l,d,c,u,p=e._nodes.values(),h=e.type;!0!==(n=p.next()).done;){if(o=n.value,"undirected"!==h)for(i in l=o.out)for(a=l[i].values();!0!==(s=a.next()).done;)if(c=(d=s.value).target,u=r(o.key,c.key,o.attributes,c.attributes,d.key,d.attributes,d.undirected,d.generatedKey),t&&u)return;if("directed"!==h)for(i in l=o.undirected)for(a=l[i].values();!0!==(s=a.next()).done;)if((c=(d=s.value).target).key!==i&&(c=d.source),u=r(o.key,c.key,o.attributes,c.attributes,d.key,d.attributes,d.undirected,d.generatedKey),t&&u)return}}function Nt(t,e){var r={key:t};return p(e.attributes)||(r.attributes=l({},e.attributes)),r}function Ot(t,e){var r={source:e.source.key,target:e.target.key};return e.generatedKey||(r.key=t),p(e.attributes)||(r.attributes=l({},e.attributes)),e.undirected&&(r.undirected=!0),r}function Mt(t){return u(t)?"key"in t?!("attributes"in t)||u(t.attributes)&&null!==t.attributes?null:"invalid-attributes":"no-key":"not-object"}function jt(t){return u(t)?"source"in t?"target"in t?!("attributes"in t)||u(t.attributes)&&null!==t.attributes?"undirected"in t&&"boolean"!=typeof t.undirected?"invalid-undirected":null:"invalid-attributes":"no-target":"no-source":"not-object"}var zt=new Set(["directed","undirected","mixed"]),Pt=new Set(["domain","_events","_eventsCount","_maxListeners"]),Rt={allowSelfLoops:!0,edgeKeyGenerator:null,multi:!1,type:"mixed"};function It(t,e,r){var n=new t.NodeDataClass(e,r);return t._nodes.set(e,n),t.emit("nodeAdded",{key:e,attributes:r}),n}function Ft(t,e,r,n,o,i,a,s){if(!n&&"undirected"===t.type)throw new R("Graph.".concat(e,": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));if(n&&"directed"===t.type)throw new R("Graph.".concat(e,": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));if(s&&!u(s))throw new z("Graph.".concat(e,': invalid attributes. Expecting an object but got "').concat(s,'"'));if(i=""+i,a=""+a,s=s||{},!t.allowSelfLoops&&i===a)throw new R("Graph.".concat(e,': source & target are the same ("').concat(i,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var l=t._nodes.get(i),d=t._nodes.get(a);if(!l)throw new P("Graph.".concat(e,': source node "').concat(i,'" not found.'));if(!d)throw new P("Graph.".concat(e,': target node "').concat(a,'" not found.'));var c={key:null,undirected:n,source:i,target:a,attributes:s};if(r&&(o=t._edgeKeyGenerator(c)),o=""+o,t._edges.has(o))throw new R("Graph.".concat(e,': the "').concat(o,'" edge already exists in the graph.'));if(!t.multi&&(n?void 0!==l.undirected[a]:void 0!==l.out[a]))throw new R("Graph.".concat(e,': an edge linking "').concat(i,'" to "').concat(a,"\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option."));var p=new q(n,o,r,l,d,s);return t._edges.set(o,p),i===a?n?(l.undirectedSelfLoops++,t._undirectedSelfLoopCount++):(l.directedSelfLoops++,t._directedSelfLoopCount++):n?(l.undirectedDegree++,d.undirectedDegree++):(l.outDegree++,d.inDegree++),H(t,n,p,i,a,l,d),n?t._undirectedSize++:t._directedSize++,c.key=o,t.emit("edgeAdded",c),o}function Gt(t,e,r,n,o,i,a,s,d){if(!n&&"undirected"===t.type)throw new R("Graph.".concat(e,": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));if(n&&"directed"===t.type)throw new R("Graph.".concat(e,": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));if(s)if(d){if("function"!=typeof s)throw new z("Graph.".concat(e,': invalid updater function. Expecting a function but got "').concat(s,'"'))}else if(!u(s))throw new z("Graph.".concat(e,': invalid attributes. Expecting an object but got "').concat(s,'"'));var c;if(i=""+i,a=""+a,d&&(c=s,s=void 0),!t.allowSelfLoops&&i===a)throw new R("Graph.".concat(e,': source & target are the same ("').concat(i,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var p,h,f=t._nodes.get(i),m=t._nodes.get(a);if(!r&&(p=t._edges.get(o))){if(p.source.key!==i||p.target.key!==a||n&&(p.source.key!==a||p.target.key!==i))throw new R("Graph.".concat(e,': inconsistency detected when attempting to merge the "').concat(o,'" edge with "').concat(i,'" source & "').concat(a,'" target vs. ("').concat(p.source.key,'", "').concat(p.target.key,'").'));h=p}if(h||t.multi||!f||(h=n?f.undirected[a]:f.out[a]),h){if(d?!c:!s)return h.key;if(d){var g=h.attributes;h.attributes=c(g),t.emit("edgeAttributesUpdated",{type:"replace",key:h.key,attributes:h.attributes})}else l(h.attributes,s),t.emit("edgeAttributesUpdated",{type:"merge",key:h.key,attributes:h.attributes,data:s});return h.key}s=s||{},d&&c&&(s=c(s));var b={key:null,undirected:n,source:i,target:a,attributes:s};if(r&&(o=t._edgeKeyGenerator(b)),o=""+o,t._edges.has(o))throw new R("Graph.".concat(e,': the "').concat(o,'" edge already exists in the graph.'));return f||(f=It(t,i,{}),i===a&&(m=f)),m||(m=It(t,a,{})),p=new q(n,o,r,f,m,s),t._edges.set(o,p),i===a?n?(f.undirectedSelfLoops++,t._undirectedSelfLoopCount++):(f.directedSelfLoops++,t._directedSelfLoopCount++):n?(f.undirectedDegree++,m.undirectedDegree++):(f.outDegree++,m.inDegree++),H(t,n,p,i,a,f,m),n?t._undirectedSize++:t._directedSize++,b.key=o,t.emit("edgeAdded",b),o}var qt=function(t){function r(e){var r;if(r=t.call(this)||this,(e=l({},Rt,e)).edgeKeyGenerator&&"function"!=typeof e.edgeKeyGenerator)throw new z("Graph.constructor: invalid 'edgeKeyGenerator' option. Expecting a function but got \"".concat(e.edgeKeyGenerator,'".'));if("boolean"!=typeof e.multi)throw new z("Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"".concat(e.multi,'".'));if(!zt.has(e.type))throw new z('Graph.constructor: invalid \'type\' option. Should be one of "mixed", "directed" or "undirected" but got "'.concat(e.type,'".'));if("boolean"!=typeof e.allowSelfLoops)throw new z("Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"".concat(e.allowSelfLoops,'".'));var n,o="mixed"===e.type?I:"directed"===e.type?F:G;return h(s(r),"NodeDataClass",o),h(s(r),"_attributes",{}),h(s(r),"_nodes",new Map),h(s(r),"_edges",new Map),h(s(r),"_directedSize",0),h(s(r),"_undirectedSize",0),h(s(r),"_directedSelfLoopCount",0),h(s(r),"_undirectedSelfLoopCount",0),h(s(r),"_edgeKeyGenerator",e.edgeKeyGenerator||(n=0,function(){return"_geid".concat(n++,"_")})),h(s(r),"_options",e),Pt.forEach((function(t){return h(s(r),t,r[t])})),f(s(r),"order",(function(){return r._nodes.size})),f(s(r),"size",(function(){return r._edges.size})),f(s(r),"directedSize",(function(){return r._directedSize})),f(s(r),"undirectedSize",(function(){return r._undirectedSize})),f(s(r),"selfLoopCount",(function(){return r._directedSelfLoopCount+r._undirectedSelfLoopCount})),f(s(r),"directedSelfLoopCount",(function(){return r._directedSelfLoopCount})),f(s(r),"undirectedSelfLoopCount",(function(){return r._undirectedSelfLoopCount})),f(s(r),"multi",r._options.multi),f(s(r),"type",r._options.type),f(s(r),"allowSelfLoops",r._options.allowSelfLoops),f(s(r),"implementation",(function(){return"graphology"})),r}e(r,t);var n=r.prototype;return n.hasNode=function(t){return this._nodes.has(""+t)},n.hasDirectedEdge=function(t,e){if("undirected"===this.type)return!1;if(1===arguments.length){var r=""+t,n=this._edges.get(r);return!!n&&!n.undirected}if(2===arguments.length){t=""+t,e=""+e;var o=this._nodes.get(t);if(!o)return!1;var i=o.out[e];return!(!i||this.multi&&!i.size)}throw new z("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},n.hasUndirectedEdge=function(t,e){if("directed"===this.type)return!1;if(1===arguments.length){var r=""+t,n=this._edges.get(r);return!!n&&n.undirected}if(2===arguments.length){t=""+t,e=""+e;var o=this._nodes.get(t);if(!o)return!1;var i=o.undirected[e];return!(!i||this.multi&&!i.size)}throw new z("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},n.hasEdge=function(t,e){if(1===arguments.length){var r=""+t;return this._edges.has(r)}if(2===arguments.length){t=""+t,e=""+e;var n=this._nodes.get(t);if(!n)return!1;var o=void 0!==n.out&&n.out[e];return o||(o=void 0!==n.undirected&&n.undirected[e]),!(!o||this.multi&&!o.size)}throw new z("Graph.hasEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},n.directedEdge=function(t,e){if("undirected"!==this.type){if(t=""+t,e=""+e,this.multi)throw new R("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");var r=this._nodes.get(t);if(!r)throw new P('Graph.directedEdge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new P('Graph.directedEdge: could not find the "'.concat(e,'" target node in the graph.'));var n=r.out&&r.out[e]||void 0;return n?n.key:void 0}},n.undirectedEdge=function(t,e){if("directed"!==this.type){if(t=""+t,e=""+e,this.multi)throw new R("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");var r=this._nodes.get(t);if(!r)throw new P('Graph.undirectedEdge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new P('Graph.undirectedEdge: could not find the "'.concat(e,'" target node in the graph.'));var n=r.undirected&&r.undirected[e]||void 0;return n?n.key:void 0}},n.edge=function(t,e){if(this.multi)throw new R("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new P('Graph.edge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new P('Graph.edge: could not find the "'.concat(e,'" target node in the graph.'));var n=r.out&&r.out[e]||r.undirected&&r.undirected[e]||void 0;if(n)return n.key},n.inDegree=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("boolean"!=typeof e)throw new z('Graph.inDegree: Expecting a boolean but got "'.concat(e,'" for the second parameter (allowing self-loops to be counted).'));t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.inDegree: could not find the "'.concat(t,'" node in the graph.'));if("undirected"===this.type)return 0;var n=e?r.directedSelfLoops:0;return r.inDegree+n},n.outDegree=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("boolean"!=typeof e)throw new z('Graph.outDegree: Expecting a boolean but got "'.concat(e,'" for the second parameter (allowing self-loops to be counted).'));t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.outDegree: could not find the "'.concat(t,'" node in the graph.'));if("undirected"===this.type)return 0;var n=e?r.directedSelfLoops:0;return r.outDegree+n},n.directedDegree=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("boolean"!=typeof e)throw new z('Graph.directedDegree: Expecting a boolean but got "'.concat(e,'" for the second parameter (allowing self-loops to be counted).'));t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.directedDegree: could not find the "'.concat(t,'" node in the graph.'));if("undirected"===this.type)return 0;var n=e?r.directedSelfLoops:0,o=r.inDegree+n,i=r.outDegree+n;return o+i},n.undirectedDegree=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("boolean"!=typeof e)throw new z('Graph.undirectedDegree: Expecting a boolean but got "'.concat(e,'" for the second parameter (allowing self-loops to be counted).'));t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.undirectedDegree: could not find the "'.concat(t,'" node in the graph.'));if("directed"===this.type)return 0;var n=e?r.undirectedSelfLoops:0;return r.undirectedDegree+2*n},n.degree=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("boolean"!=typeof e)throw new z('Graph.degree: Expecting a boolean but got "'.concat(e,'" for the second parameter (allowing self-loops to be counted).'));t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.degree: could not find the "'.concat(t,'" node in the graph.'));var n=0,o=0;return"directed"!==this.type&&(e&&(o=r.undirectedSelfLoops),n+=r.undirectedDegree+2*o),"undirected"!==this.type&&(e&&(o=r.directedSelfLoops),n+=r.inDegree+r.outDegree+2*o),n},n.source=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new P('Graph.source: could not find the "'.concat(t,'" edge in the graph.'));return e.source.key},n.target=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new P('Graph.target: could not find the "'.concat(t,'" edge in the graph.'));return e.target.key},n.extremities=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new P('Graph.extremities: could not find the "'.concat(t,'" edge in the graph.'));return[e.source.key,e.target.key]},n.opposite=function(t,e){t=""+t,e=""+e;var r=this._edges.get(e);if(!r)throw new P('Graph.opposite: could not find the "'.concat(e,'" edge in the graph.'));var n=r.source.key,o=r.target.key;if(t!==n&&t!==o)throw new P('Graph.opposite: the "'.concat(t,'" node is not attached to the "').concat(e,'" edge (').concat(n,", ").concat(o,")."));return t===n?o:n},n.hasExtremity=function(t,e){t=""+t,e=""+e;var r=this._edges.get(t);if(!r)throw new P('Graph.hasExtremity: could not find the "'.concat(t,'" edge in the graph.'));return r.source.key===e||r.target.key===e},n.isUndirected=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new P('Graph.isUndirected: could not find the "'.concat(t,'" edge in the graph.'));return e.undirected},n.isDirected=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new P('Graph.isDirected: could not find the "'.concat(t,'" edge in the graph.'));return!e.undirected},n.isSelfLoop=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new P('Graph.isSelfLoop: could not find the "'.concat(t,'" edge in the graph.'));return e.source===e.target},n.hasGeneratedKey=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new P('Graph.hasGeneratedKey: could not find the "'.concat(t,'" edge in the graph.'));return e.generatedKey},n.addNode=function(t,e){return function(t,e,r){if(r&&!u(r))throw new z('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(r,'"'));if(e=""+e,r=r||{},t._nodes.has(e))throw new R('Graph.addNode: the "'.concat(e,'" node already exist in the graph.'));var n=new t.NodeDataClass(e,r);return t._nodes.set(e,n),t.emit("nodeAdded",{key:e,attributes:r}),n}(this,t,e).key},n.mergeNode=function(t,e){if(e&&!u(e))throw new z('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(e,'"'));t=""+t,e=e||{};var r=this._nodes.get(t);return r?(e&&(l(r.attributes,e),this.emit("nodeAttributesUpdated",{type:"merge",key:t,attributes:r.attributes,data:e})),t):(r=new this.NodeDataClass(t,e),this._nodes.set(t,r),this.emit("nodeAdded",{key:t,attributes:e}),t)},n.updateNode=function(t,e){if(e&&"function"!=typeof e)throw new z('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(e,'"'));t=""+t;var r=this._nodes.get(t);if(r){if(e){var n=r.attributes;r.attributes=e(n),this.emit("nodeAttributesUpdated",{type:"replace",key:t,attributes:r.attributes})}return t}var o=e?e({}):{};return r=new this.NodeDataClass(t,o),this._nodes.set(t,r),this.emit("nodeAdded",{key:t,attributes:o}),t},n.dropNode=function(t){var e=this;t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.dropNode: could not find the "'.concat(t,'" node in the graph.'));this.forEachEdge(t,(function(t){e.dropEdge(t)})),this._nodes.delete(t),this.emit("nodeDropped",{key:t,attributes:r.attributes})},n.dropEdge=function(t){var e;if(arguments.length>1){var r=""+arguments[0],n=""+arguments[1];if(!(e=d(this,r,n,this.type)))throw new P('Graph.dropEdge: could not find the "'.concat(r,'" -> "').concat(n,'" edge in the graph.'))}else if(t=""+t,!(e=this._edges.get(t)))throw new P('Graph.dropEdge: could not find the "'.concat(t,'" edge in the graph.'));this._edges.delete(e.key);var o=e,i=o.source,a=o.target,s=o.attributes,l=e.undirected;return i===a?l?(i.undirectedSelfLoops--,this._undirectedSelfLoopCount--):(i.directedSelfLoops--,this._directedSelfLoopCount--):l?(i.undirectedDegree--,a.undirectedDegree--):(i.outDegree--,a.inDegree--),B(this,l,e),l?this._undirectedSize--:this._directedSize--,this.emit("edgeDropped",{key:t,attributes:s,source:i.key,target:a.key,undirected:l}),this},n.clear=function(){this._edges.clear(),this._nodes.clear(),this.emit("cleared")},n.clearEdges=function(){this._edges.clear(),this.clearIndex(),this.emit("edgesCleared")},n.getAttribute=function(t){return this._attributes[t]},n.getAttributes=function(){return this._attributes},n.hasAttribute=function(t){return this._attributes.hasOwnProperty(t)},n.setAttribute=function(t,e){return this._attributes[t]=e,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:t}),this},n.updateAttribute=function(t,e){if("function"!=typeof e)throw new z("Graph.updateAttribute: updater should be a function.");var r=this._attributes[t];return this._attributes[t]=e(r),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:t}),this},n.removeAttribute=function(t){return delete this._attributes[t],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:t}),this},n.replaceAttributes=function(t){if(!u(t))throw new z("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=t,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this},n.mergeAttributes=function(t){if(!u(t))throw new z("Graph.mergeAttributes: provided attributes are not a plain object.");return l(this._attributes,t),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:t}),this},n.getNodeAttribute=function(t,e){t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.getNodeAttribute: could not find the "'.concat(t,'" node in the graph.'));return r.attributes[e]},n.getNodeAttributes=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new P('Graph.getNodeAttributes: could not find the "'.concat(t,'" node in the graph.'));return e.attributes},n.hasNodeAttribute=function(t,e){t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.hasNodeAttribute: could not find the "'.concat(t,'" node in the graph.'));return r.attributes.hasOwnProperty(e)},n.setNodeAttribute=function(t,e,r){t=""+t;var n=this._nodes.get(t);if(!n)throw new P('Graph.setNodeAttribute: could not find the "'.concat(t,'" node in the graph.'));if(arguments.length<3)throw new z("Graph.setNodeAttribute: not enough arguments. Either you forgot to pass the attribute's name or value, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.");return n.attributes[e]=r,this.emit("nodeAttributesUpdated",{key:t,type:"set",attributes:n.attributes,name:e}),this},n.updateNodeAttribute=function(t,e,r){t=""+t;var n=this._nodes.get(t);if(!n)throw new P('Graph.updateNodeAttribute: could not find the "'.concat(t,'" node in the graph.'));if(arguments.length<3)throw new z("Graph.updateNodeAttribute: not enough arguments. Either you forgot to pass the attribute's name or updater, or you meant to use #.replaceNodeAttributes / #.mergeNodeAttributes instead.");if("function"!=typeof r)throw new z("Graph.updateAttribute: updater should be a function.");var o=n.attributes,i=r(o[e]);return o[e]=i,this.emit("nodeAttributesUpdated",{key:t,type:"set",attributes:n.attributes,name:e}),this},n.removeNodeAttribute=function(t,e){t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.hasNodeAttribute: could not find the "'.concat(t,'" node in the graph.'));return delete r.attributes[e],this.emit("nodeAttributesUpdated",{key:t,type:"remove",attributes:r.attributes,name:e}),this},n.replaceNodeAttributes=function(t,e){t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.replaceNodeAttributes: could not find the "'.concat(t,'" node in the graph.'));if(!u(e))throw new z("Graph.replaceNodeAttributes: provided attributes are not a plain object.");return r.attributes=e,this.emit("nodeAttributesUpdated",{key:t,type:"replace",attributes:r.attributes}),this},n.mergeNodeAttributes=function(t,e){t=""+t;var r=this._nodes.get(t);if(!r)throw new P('Graph.mergeNodeAttributes: could not find the "'.concat(t,'" node in the graph.'));if(!u(e))throw new z("Graph.mergeNodeAttributes: provided attributes are not a plain object.");return l(r.attributes,e),this.emit("nodeAttributesUpdated",{key:t,type:"merge",attributes:r.attributes,data:e}),this},n.updateEachNodeAttributes=function(t,e){if("function"!=typeof t)throw new z("Graph.updateEachNodeAttributes: expecting an updater function.");if(e&&!m(e))throw new z("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,n,o=this._nodes.values();!0!==(r=o.next()).done;)(n=r.value).attributes=t(n.key,n.attributes);this.emit("eachNodeAttributesUpdated",{hints:e||null})},n.updateEachEdgeAttributes=function(t,e){if("function"!=typeof t)throw new z("Graph.updateEachEdgeAttributes: expecting an updater function.");if(e&&!m(e))throw new z("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,n,o=this._edges.values();!0!==(r=o.next()).done;)(n=r.value).attributes=t(n.key,n.attributes);this.emit("eachEdgeAttributesUpdated",{hints:e||null})},n.forEach=function(t){if("function"!=typeof t)throw new z("Graph.forEach: expecting a callback.");this.multi?Dt(!1,this,t):Lt(!1,this,t)},n.forEachUntil=function(t){if("function"!=typeof t)throw new z("Graph.forEach: expecting a callback.");this.multi?Dt(!0,this,t):Lt(!0,this,t)},n.adjacency=function(){return this.multi?(i=(t=this)._nodes.values(),a=t.type,s="outer",l=null,new O((function t(){var d;if("outer"===s)return!0===(d=i.next()).done?d:(e=d.value,s="directed",t());if("directed"===s)return"undirected"===a?(s="undirected",t()):(n=e.out,r=Object.keys(e.out),o=0,s="inner-directed",t());if("undirected"===s){if("directed"===a)return s="outer",t();n=e.undirected,r=Object.keys(e.undirected),o=0,s="inner-undirected"}if(!l&&o>=r.length)return s="inner-undirected"===s?"outer":"undirected",t();if(!l){var c=r[o++];return l=n[c].values(),t()}if((d=l.next()).done)return l=null,t();var u=d.value,p=u.target;return"inner-undirected"===s&&p.key===e.key&&(p=u.source),{done:!1,value:[e.key,p.key,e.attributes,p.attributes,u.key,u.attributes]}}))):function(t){var e,r,n,o,i=t._nodes.values(),a=t.type,s="outer";return new O((function t(){var l;if("outer"===s)return!0===(l=i.next()).done?l:(e=l.value,s="directed",t());if("directed"===s)return"undirected"===a?(s="undirected",t()):(n=e.out,r=Object.keys(e.out),o=0,s="inner-directed",t());if("undirected"===s){if("directed"===a)return s="outer",t();n=e.undirected,r=Object.keys(e.undirected),o=0,s="inner-undirected"}if(o>=r.length)return s="inner-undirected"===s?"outer":"undirected",t();var d=r[o++],c=n[d],u=c.target;return"inner-undirected"===s&&u.key===e.key&&(u=c.source),{done:!1,value:[e.key,u.key,e.attributes,u.attributes,c.key,c.attributes]}}))}(this);var t,e,r,n,o,i,a,s,l},n.nodes=function(){return"function"==typeof Array.from?Array.from(this._nodes.keys()):M(this._nodes.keys(),this._nodes.size)},n.forEachNode=function(t){if("function"!=typeof t)throw new z("Graph.forEachNode: expecting a callback.");this._nodes.forEach((function(e,r){t(r,e.attributes)}))},n.forEachNodeUntil=function(t){if("function"!=typeof t)throw new z("Graph.forEachNode: expecting a callback.");for(var e,r,n=this._nodes.values();!0!==(e=n.next())&&!t((r=e.value).key,r.attributes););},n.nodeEntries=function(){var t=this._nodes.values();return new O((function(){var e=t.next();if(e.done)return e;var r=e.value;return{value:[r.key,r.attributes],done:!1}}))},n.exportNode=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new P('Graph.exportNode: could not find the "'.concat(t,'" node in the graph.'));return Nt(t,e)},n.exportEdge=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new P('Graph.exportEdge: could not find the "'.concat(t,'" edge in the graph.'));return Ot(t,e)},n.export=function(){var t=new Array(this._nodes.size),e=0;this._nodes.forEach((function(r,n){t[e++]=Nt(n,r)}));var r=new Array(this._edges.size);return e=0,this._edges.forEach((function(t,n){r[e++]=Ot(n,t)})),{attributes:this.getAttributes(),nodes:t,edges:r,options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops}}},n.importNode=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=Mt(t);if(r){if("not-object"===r)throw new z('Graph.importNode: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if("no-key"===r)throw new z("Graph.importNode: no key provided.");if("invalid-attributes"===r)throw new z("Graph.importNode: invalid attributes. Attributes should be a plain object, null or omitted.")}var n=t.key,o=t.attributes,i=void 0===o?{}:o;return e?this.mergeNode(n,i):this.addNode(n,i),this},n.importEdge=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=jt(t);if(r){if("not-object"===r)throw new z('Graph.importEdge: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if("no-source"===r)throw new z("Graph.importEdge: missing souce.");if("no-target"===r)throw new z("Graph.importEdge: missing target.");if("invalid-attributes"===r)throw new z("Graph.importEdge: invalid attributes. Attributes should be a plain object, null or omitted.");if("invalid-undirected"===r)throw new z("Graph.importEdge: invalid undirected. Undirected should be boolean or omitted.")}var n=t.source,o=t.target,i=t.attributes,a=void 0===i?{}:i,s=t.undirected,l=void 0!==s&&s;return"key"in t?(e?l?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:l?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey).call(this,t.key,n,o,a):(e?l?this.mergeUndirectedEdge:this.mergeDirectedEdge:l?this.addUndirectedEdge:this.addDirectedEdge).call(this,n,o,a),this},n.import=function(t){var e,r,n,o=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(c(t))return this.import(t.export(),o),this;if(!u(t))throw new z("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(t.attributes){if(!u(t.attributes))throw new z("Graph.import: invalid attributes. Expecting a plain object.");o?this.mergeAttributes(t.attributes):this.replaceAttributes(t.attributes)}if(t.nodes){if(n=t.nodes,!Array.isArray(n))throw new z("Graph.import: invalid nodes. Expecting an array.");for(e=0,r=n.length;e<r;e++)this.importNode(n[e],o)}if(t.edges){if(n=t.edges,!Array.isArray(n))throw new z("Graph.import: invalid edges. Expecting an array.");for(e=0,r=n.length;e<r;e++)this.importEdge(n[e],o)}return this},n.nullCopy=function(t){return new r(l({},this._options,t))},n.emptyCopy=function(t){var e=this.nullCopy(t);return this._nodes.forEach((function(t,r){var n=l({},t.attributes);t=new e.NodeDataClass(r,n),e._nodes.set(r,t)})),e},n.copy=function(){var t=new r(this._options);return t.import(this),t},n.upgradeToMixed=function(){return"mixed"===this.type||(this._nodes.forEach((function(t){return t.upgradeToMixed()})),this._options.type="mixed",f(this,"type",this._options.type),h(this,"NodeDataClass",I)),this},n.upgradeToMulti=function(){return this.multi||(this._options.multi=!0,f(this,"multi",!0),(t=this)._nodes.forEach((function(e,r){if(e.out)for(var n in e.out){var o=new Set;o.add(e.out[n]),e.out[n]=o,t._nodes.get(n).in[r]=o}if(e.undirected)for(var i in e.undirected)if(!(i>r)){var a=new Set;a.add(e.undirected[i]),e.undirected[i]=a,t._nodes.get(i).undirected[r]=a}}))),this;var t},n.clearIndex=function(){return this._nodes.forEach((function(t){void 0!==t.in&&(t.in={},t.out={}),void 0!==t.undirected&&(t.undirected={})})),this},n.toJSON=function(){return this.export()},n.toString=function(){return"[object Graph]"},n.inspect=function(){var t=this,e={};this._nodes.forEach((function(t,r){e[r]=t.attributes}));var r={},n={};this._edges.forEach((function(e,o){var i=e.undirected?"--":"->",a="",s="(".concat(e.source.key,")").concat(i,"(").concat(e.target.key,")");e.generatedKey?t.multi&&(void 0===n[s]?n[s]=0:n[s]++,a+="".concat(n[s],". ")):a+="[".concat(o,"]: "),r[a+=s]=e.attributes}));var o={};for(var i in this)this.hasOwnProperty(i)&&!Pt.has(i)&&"function"!=typeof this[i]&&(o[i]=this[i]);return o.attributes=this._attributes,o.nodes=e,o.edges=r,h(o,"constructor",this.constructor),o},r}(w.EventEmitter);"undefined"!=typeof Symbol&&(qt.prototype[Symbol.for("nodejs.util.inspect.custom")]=qt.prototype.inspect),[{name:function(t){return"".concat(t,"Edge")},generateKey:!0},{name:function(t){return"".concat(t,"DirectedEdge")},generateKey:!0,type:"directed"},{name:function(t){return"".concat(t,"UndirectedEdge")},generateKey:!0,type:"undirected"},{name:function(t){return"".concat(t,"EdgeWithKey")}},{name:function(t){return"".concat(t,"DirectedEdgeWithKey")},type:"directed"},{name:function(t){return"".concat(t,"UndirectedEdgeWithKey")},type:"undirected"}].forEach((function(t){["add","merge","update"].forEach((function(e){var r=t.name(e),n="add"===e?Ft:Gt;t.generateKey?qt.prototype[r]=function(o,i,a){return n(this,r,!0,"undirected"===(t.type||this.type),null,o,i,a,"update"===e)}:qt.prototype[r]=function(o,i,a,s){return n(this,r,!1,"undirected"===(t.type||this.type),o,i,a,s,"update"===e)}}))})),"undefined"!=typeof Symbol&&(qt.prototype[Symbol.iterator]=qt.prototype.adjacency),function(t){U.forEach((function(e){var r=e.name,n=e.attacher;n(t,r("Edge"),"mixed"),n(t,r("DirectedEdge"),"directed"),n(t,r("UndirectedEdge"),"undirected")}))}(qt),function(t){W.forEach((function(e){!function(t,e){var r=e.name,n=e.type,o=e.direction;t.prototype[r]=function(t,e){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return[];if(!arguments.length)return st(this,n);if(1===arguments.length){t=""+t;var i=this._nodes.get(t);if(void 0===i)throw new P("Graph.".concat(r,': could not find the "').concat(t,'" node in the graph.'));return ut(this.multi,"mixed"===n?this.type:n,o,i)}if(2===arguments.length){t=""+t,e=""+e;var a=this._nodes.get(t);if(!a)throw new P("Graph.".concat(r,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new P("Graph.".concat(r,':  could not find the "').concat(e,'" target node in the graph.'));return mt(n,this.multi,o,a,e)}throw new z("Graph.".concat(r,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(t,e),function(t,e){var r=e.name,n=e.type,o=e.direction,i="forEach"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[i]=function(t,e,r){if("mixed"===n||"mixed"===this.type||n===this.type){if(1===arguments.length)return lt(this,n,r=t);if(2===arguments.length){t=""+t,r=e;var a=this._nodes.get(t);if(void 0===a)throw new P("Graph.".concat(i,': could not find the "').concat(t,'" node in the graph.'));return pt(this.multi,"mixed"===n?this.type:n,o,a,r)}if(3===arguments.length){t=""+t,e=""+e;var s=this._nodes.get(t);if(!s)throw new P("Graph.".concat(i,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new P("Graph.".concat(i,':  could not find the "').concat(e,'" target node in the graph.'));return gt(n,this.multi,o,s,e,r)}throw new z("Graph.".concat(i,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))}}}(t,e),function(t,e){var r=e.name,n=e.type,o=e.direction,i="forEach"+r[0].toUpperCase()+r.slice(1,-1)+"Until";t.prototype[i]=function(t,e,r){if("mixed"===n||"mixed"===this.type||n===this.type){if(1===arguments.length)return dt(this,n,r=t);if(2===arguments.length){t=""+t,r=e;var a=this._nodes.get(t);if(void 0===a)throw new P("Graph.".concat(i,': could not find the "').concat(t,'" node in the graph.'));return ht(this.multi,"mixed"===n?this.type:n,o,a,r)}if(3===arguments.length){t=""+t,e=""+e;var s=this._nodes.get(t);if(!s)throw new P("Graph.".concat(i,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new P("Graph.".concat(i,':  could not find the "').concat(e,'" target node in the graph.'));return bt(n,this.multi,o,s,e,r)}throw new z("Graph.".concat(i,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))}}}(t,e),function(t,e){var r=e.name,n=e.type,o=e.direction,i=r.slice(0,-1)+"Entries";t.prototype[i]=function(t,e){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return O.empty();if(!arguments.length)return ct(this,n);if(1===arguments.length){t=""+t;var r=this._nodes.get(t);if(!r)throw new P("Graph.".concat(i,': could not find the "').concat(t,'" node in the graph.'));return ft(n,o,r)}if(2===arguments.length){t=""+t,e=""+e;var a=this._nodes.get(t);if(!a)throw new P("Graph.".concat(i,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new P("Graph.".concat(i,':  could not find the "').concat(e,'" target node in the graph.'));return vt(n,o,a,e)}throw new z("Graph.".concat(i,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(t,e)}))}(qt),function(t){yt.forEach((function(e){!function(t,e){var r=e.name,n=e.type,o=e.direction;t.prototype[r]=function(t){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return[];if(2===arguments.length){var e=""+arguments[0],i=""+arguments[1];if(!this._nodes.has(e))throw new P("Graph.".concat(r,': could not find the "').concat(e,'" node in the graph.'));if(!this._nodes.has(i))throw new P("Graph.".concat(r,': could not find the "').concat(i,'" node in the graph.'));return At(this,n,o,e,i)}if(1===arguments.length){t=""+t;var a=this._nodes.get(t);if(void 0===a)throw new P("Graph.".concat(r,': could not find the "').concat(t,'" node in the graph.'));return wt("mixed"===n?this.type:n,o,a)}throw new z("Graph.".concat(r,": invalid number of arguments (expecting 1 or 2 and got ").concat(arguments.length,")."))}}(t,e),function(t,e){var r=e.name,n=e.type,o=e.direction,i="forEach"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[i]=function(t,e){if("mixed"===n||"mixed"===this.type||n===this.type){t=""+t;var r=this._nodes.get(t);if(void 0===r)throw new P("Graph.".concat(i,': could not find the "').concat(t,'" node in the graph.'));!function(t,e,r,n){if("mixed"!==t){if("undirected"===t)return _t(r,r.undirected,n);if("string"==typeof e)return _t(r,r[e],n)}var o=new Set;"undirected"!==t&&("out"!==e&&kt(o,r,r.in,n),"in"!==e&&kt(o,r,r.out,n)),"directed"!==t&&kt(o,r,r.undirected,n)}("mixed"===n?this.type:n,o,r,e)}}}(t,e),function(t,e){var r=e.name,n=e.type,o=e.direction,i="forEach"+r[0].toUpperCase()+r.slice(1,-1)+"Until";t.prototype[i]=function(t,e){if("mixed"===n||"mixed"===this.type||n===this.type){t=""+t;var r=this._nodes.get(t);if(void 0===r)throw new P("Graph.".concat(i,': could not find the "').concat(t,'" node in the graph.'));!function(t,e,r,n){if("mixed"!==t){if("undirected"===t)return Et(r,r.undirected,n);if("string"==typeof e)return Et(r,r[e],n)}var o=new Set;if("undirected"!==t){if("out"!==e&&Ct(o,r,r.in,n))return;if("in"!==e&&Ct(o,r,r.out,n))return}"directed"===t||Ct(o,r,r.undirected,n)}("mixed"===n?this.type:n,o,r,e)}}}(t,e),function(t,e){var r=e.name,n=e.type,o=e.direction,i=r.slice(0,-1)+"Entries";t.prototype[i]=function(t){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return O.empty();t=""+t;var e=this._nodes.get(t);if(void 0===e)throw new P("Graph.".concat(i,': could not find the "').concat(t,'" node in the graph.'));return function(t,e,r){if("mixed"!==t){if("undirected"===t)return Tt(r,r.undirected);if("string"==typeof e)return Tt(r,r[e])}var n=O.empty(),o=new Set;return"undirected"!==t&&("out"!==e&&(n=$(n,St(o,r,r.in))),"in"!==e&&(n=$(n,St(o,r,r.out)))),"directed"!==t&&(n=$(n,St(o,r,r.undirected))),n}("mixed"===n?this.type:n,o,e)}}(t,e)}))}(qt);var Ht=function(t){function r(e){var r=l({type:"directed"},e);if("multi"in r&&!1!==r.multi)throw new z("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("directed"!==r.type)throw new z('DirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(qt),Bt=function(t){function r(e){var r=l({type:"undirected"},e);if("multi"in r&&!1!==r.multi)throw new z("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("undirected"!==r.type)throw new z('UndirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(qt),Ut=function(t){function r(e){var r=l({multi:!0},e);if("multi"in r&&!0!==r.multi)throw new z("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");return t.call(this,r)||this}return e(r,t),r}(qt),$t=function(t){function r(e){var r=l({type:"directed",multi:!0},e);if("multi"in r&&!0!==r.multi)throw new z("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("directed"!==r.type)throw new z('MultiDirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(qt),Wt=function(t){function r(e){var r=l({type:"undirected",multi:!0},e);if("multi"in r&&!0!==r.multi)throw new z("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("undirected"!==r.type)throw new z('MultiUndirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(qt);function Vt(t){t.from=function(e,r){var n=l({},e.options,r),o=new t(n);return o.import(e),o}}return Vt(qt),Vt(Ht),Vt(Bt),Vt(Ut),Vt($t),Vt(Wt),qt.Graph=qt,qt.DirectedGraph=Ht,qt.UndirectedGraph=Bt,qt.MultiGraph=Ut,qt.MultiDirectedGraph=$t,qt.MultiUndirectedGraph=Wt,qt.InvalidArgumentsGraphError=z,qt.NotFoundGraphError=P,qt.UsageGraphError=R,qt}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.multiplyVec=e.multiply=e.translate=e.rotate=e.scale=e.identity=void 0,e.identity=function(){return Float32Array.of(1,0,0,0,1,0,0,0,1)},e.scale=function(t,e,r){return t[0]=e,t[4]="number"==typeof r?r:e,t},e.rotate=function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[3]=-r,t[4]=n,t},e.translate=function(t,e,r){return t[6]=e,t[7]=r,t},e.multiply=function(t,e){var r=t[0],n=t[1],o=t[2],i=t[3],a=t[4],s=t[5],l=t[6],d=t[7],c=t[8],u=e[0],p=e[1],h=e[2],f=e[3],m=e[4],g=e[5],b=e[6],v=e[7],y=e[8];return t[0]=u*r+p*i+h*l,t[1]=u*n+p*a+h*d,t[2]=u*o+p*s+h*c,t[3]=f*r+m*i+g*l,t[4]=f*n+m*a+g*d,t[5]=f*o+m*s+g*c,t[6]=b*r+v*i+y*l,t[7]=b*n+v*a+y*d,t[8]=b*o+v*s+y*c,t},e.multiplyVec=function(t,e){var r=t[0],n=t[1],o=t[2],i=t[3],a=t[4],s=t[5],l=t[6],d=t[7],c=t[8],u=e[0],p=e[1],h=e[2],f=Array.isArray(e)?[0,0,0]:Float32Array.of(0,0,0);return f[0]=u*r+p*i+h*l,f[1]=u*n+p*a+h*d,f[2]=u*o+p*s+h*c,f}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.cubicInOut=e.cubicOut=e.cubicIn=e.quadraticInOut=e.quadraticOut=e.quadraticIn=e.linear=void 0;e.linear=function(t){return t};e.quadraticIn=function(t){return t*t};e.quadraticOut=function(t){return t*(2-t)};e.quadraticInOut=function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)};e.cubicIn=function(t){return t*t*t};e.cubicOut=function(t){return--t*t*t+1};e.cubicInOut=function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)};var n={linear:e.linear,quadraticIn:e.quadraticIn,quadraticOut:e.quadraticOut,quadraticInOut:e.quadraticInOut,cubicIn:e.cubicIn,cubicOut:e.cubicOut,cubicInOut:e.cubicInOut};e.default=n},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.getWheelDelta=e.getTouchCoords=e.getTouchesArray=e.getWheelCoords=e.getMouseCoords=e.getPosition=void 0;var a=r(8);function s(t,e){var r=e.getBoundingClientRect();return{x:t.clientX-r.left,y:t.clientY-r.top}}function l(t,e){return i(i({},s(t,e)),{clientX:t.clientX,clientY:t.clientY,ctrlKey:t.ctrlKey,metaKey:t.metaKey,altKey:t.altKey,shiftKey:t.shiftKey,sigmaDefaultPrevented:!1,preventSigmaDefault:function(){this.sigmaDefaultPrevented=!0},original:t})}e.getPosition=s,e.getMouseCoords=l,e.getWheelCoords=function(t,e){return i(i({},l(t,e)),{deltaY:t.deltaY,delta:c(t)})};function d(t){for(var e=[],r=0,n=Math.min(t.length,2);r<n;r++)e.push(t[r]);return e}function c(t){if(void 0!==t.deltaY)return-3*t.deltaY/360;if(void 0!==t.detail)return t.detail/-9;throw new Error("Captor: could not extract delta from event.")}e.getTouchesArray=d,e.getTouchCoords=function(t,e){return{touches:d(t.touches).map((function(t){return s(t,e)})),ctrlKey:t.ctrlKey,metaKey:t.metaKey,altKey:t.altKey,shiftKey:t.shiftKey,preventDefault:t.preventDefault.bind(t),original:t}},e.getWheelDelta=c;var u=function(t){function e(e,r){var n=t.call(this)||this;return n.container=e,n.renderer=r,n}return o(e,t),e}(a.EventEmitter);e.default=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r){if(e.label){var n=r.labelSize,o=r.labelFont,i=r.labelWeight,a=r.labelColor.attribute?e[r.labelColor.attribute]||r.labelColor.color||"#000":r.labelColor.color;t.fillStyle=a,t.font=i+" "+n+"px "+o,t.fillText(e.label,e.x+e.size+3,e.y+n/3)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AbstractProgram=void 0;var n=r(42),o=function(){function t(t,e,r,o,i){this.array=new Float32Array,this.points=o,this.attributes=i,this.gl=t,this.vertexShaderSource=e,this.fragmentShaderSource=r;var a=t.createBuffer();if(null===a)throw new Error("AbstractProgram: error while creating the buffer");this.buffer=a,t.bindBuffer(t.ARRAY_BUFFER,this.buffer),this.vertexShader=(0,n.loadVertexShader)(t,this.vertexShaderSource),this.fragmentShader=(0,n.loadFragmentShader)(t,this.fragmentShaderSource),this.program=(0,n.loadProgram)(t,[this.vertexShader,this.fragmentShader])}return t.prototype.bufferData=function(){var t=this.gl;t.bufferData(t.ARRAY_BUFFER,this.array,t.DYNAMIC_DRAW)},t.prototype.allocate=function(t){this.array=new Float32Array(this.points*this.attributes*t)},t.prototype.hasNothingToRender=function(){return 0===this.array.length},t}();e.AbstractProgram=o},function(t,e){(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float feather = 0.001;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\n\nvoid main(void) {\n  float dist = length(v_normal) * v_thickness;\n\n  float t = smoothstep(\n    v_thickness - feather,\n    v_thickness,\n    dist\n  );\n\n  gl_FragColor = mix(v_color, transparent, t);\n}";t.exports=r})()},function(t,e,r){"use strict";t.exports=function(t,e,r,n){for(var o=65535&t|0,i=t>>>16&65535|0,a=0;0!==r;){r-=a=r>2e3?2e3:r;do{i=i+(o=o+e[n++]|0)|0}while(--a);o%=65521,i%=65521}return o|i<<16|0}},function(t,e,r){"use strict";var n=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();t.exports=function(t,e,r,o){var i=n,a=o+r;t^=-1;for(var s=o;s<a;s++)t=t>>>8^i[255&(t^e[s])];return-1^t}},function(t,e,r){"use strict";var n=r(2),o=!0,i=!0;try{String.fromCharCode.apply(null,[0])}catch(t){o=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){i=!1}for(var a=new n.Buf8(256),s=0;s<256;s++)a[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1;function l(t,e){if(e<65534&&(t.subarray&&i||!t.subarray&&o))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var r="",a=0;a<e;a++)r+=String.fromCharCode(t[a]);return r}a[254]=a[254]=1,e.string2buf=function(t){var e,r,o,i,a,s=t.length,l=0;for(i=0;i<s;i++)55296==(64512&(r=t.charCodeAt(i)))&&i+1<s&&56320==(64512&(o=t.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(o-56320),i++),l+=r<128?1:r<2048?2:r<65536?3:4;for(e=new n.Buf8(l),a=0,i=0;a<l;i++)55296==(64512&(r=t.charCodeAt(i)))&&i+1<s&&56320==(64512&(o=t.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(o-56320),i++),r<128?e[a++]=r:r<2048?(e[a++]=192|r>>>6,e[a++]=128|63&r):r<65536?(e[a++]=224|r>>>12,e[a++]=128|r>>>6&63,e[a++]=128|63&r):(e[a++]=240|r>>>18,e[a++]=128|r>>>12&63,e[a++]=128|r>>>6&63,e[a++]=128|63&r);return e},e.buf2binstring=function(t){return l(t,t.length)},e.binstring2buf=function(t){for(var e=new n.Buf8(t.length),r=0,o=e.length;r<o;r++)e[r]=t.charCodeAt(r);return e},e.buf2string=function(t,e){var r,n,o,i,s=e||t.length,d=new Array(2*s);for(n=0,r=0;r<s;)if((o=t[r++])<128)d[n++]=o;else if((i=a[o])>4)d[n++]=65533,r+=i-1;else{for(o&=2===i?31:3===i?15:7;i>1&&r<s;)o=o<<6|63&t[r++],i--;i>1?d[n++]=65533:o<65536?d[n++]=o:(o-=65536,d[n++]=55296|o>>10&1023,d[n++]=56320|1023&o)}return l(d,n)},e.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+a[t[r]]>e?r:e}},function(t,e,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(t,e,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(t,e,r){var n=r(78),o={};for(var i in n)n.hasOwnProperty(i)&&(o[n[i]]=i);var a=t.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var s in a)if(a.hasOwnProperty(s)){if(!("channels"in a[s]))throw new Error("missing channels property: "+s);if(!("labels"in a[s]))throw new Error("missing channel labels property: "+s);if(a[s].labels.length!==a[s].channels)throw new Error("channel and label counts mismatch: "+s);var l=a[s].channels,d=a[s].labels;delete a[s].channels,delete a[s].labels,Object.defineProperty(a[s],"channels",{value:l}),Object.defineProperty(a[s],"labels",{value:d})}a.rgb.hsl=function(t){var e,r,n=t[0]/255,o=t[1]/255,i=t[2]/255,a=Math.min(n,o,i),s=Math.max(n,o,i),l=s-a;return s===a?e=0:n===s?e=(o-i)/l:o===s?e=2+(i-n)/l:i===s&&(e=4+(n-o)/l),(e=Math.min(60*e,360))<0&&(e+=360),r=(a+s)/2,[e,100*(s===a?0:r<=.5?l/(s+a):l/(2-s-a)),100*r]},a.rgb.hsv=function(t){var e,r,n,o,i,a=t[0]/255,s=t[1]/255,l=t[2]/255,d=Math.max(a,s,l),c=d-Math.min(a,s,l),u=function(t){return(d-t)/6/c+.5};return 0===c?o=i=0:(i=c/d,e=u(a),r=u(s),n=u(l),a===d?o=n-r:s===d?o=1/3+e-n:l===d&&(o=2/3+r-e),o<0?o+=1:o>1&&(o-=1)),[360*o,100*i,100*d]},a.rgb.hwb=function(t){var e=t[0],r=t[1],n=t[2];return[a.rgb.hsl(t)[0],100*(1/255*Math.min(e,Math.min(r,n))),100*(n=1-1/255*Math.max(e,Math.max(r,n)))]},a.rgb.cmyk=function(t){var e,r=t[0]/255,n=t[1]/255,o=t[2]/255;return[100*((1-r-(e=Math.min(1-r,1-n,1-o)))/(1-e)||0),100*((1-n-e)/(1-e)||0),100*((1-o-e)/(1-e)||0),100*e]},a.rgb.keyword=function(t){var e=o[t];if(e)return e;var r,i,a,s=1/0;for(var l in n)if(n.hasOwnProperty(l)){var d=n[l],c=(i=t,a=d,Math.pow(i[0]-a[0],2)+Math.pow(i[1]-a[1],2)+Math.pow(i[2]-a[2],2));c<s&&(s=c,r=l)}return r},a.keyword.rgb=function(t){return n[t]},a.rgb.xyz=function(t){var e=t[0]/255,r=t[1]/255,n=t[2]/255;return[100*(.4124*(e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*e+.7152*r+.0722*n),100*(.0193*e+.1192*r+.9505*n)]},a.rgb.lab=function(t){var e=a.rgb.xyz(t),r=e[0],n=e[1],o=e[2];return n/=100,o/=108.883,r=(r/=95.047)>.008856?Math.pow(r,1/3):7.787*r+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(r-n),200*(n-(o=o>.008856?Math.pow(o,1/3):7.787*o+16/116))]},a.hsl.rgb=function(t){var e,r,n,o,i,a=t[0]/360,s=t[1]/100,l=t[2]/100;if(0===s)return[i=255*l,i,i];e=2*l-(r=l<.5?l*(1+s):l+s-l*s),o=[0,0,0];for(var d=0;d<3;d++)(n=a+1/3*-(d-1))<0&&n++,n>1&&n--,i=6*n<1?e+6*(r-e)*n:2*n<1?r:3*n<2?e+(r-e)*(2/3-n)*6:e,o[d]=255*i;return o},a.hsl.hsv=function(t){var e=t[0],r=t[1]/100,n=t[2]/100,o=r,i=Math.max(n,.01);return r*=(n*=2)<=1?n:2-n,o*=i<=1?i:2-i,[e,100*(0===n?2*o/(i+o):2*r/(n+r)),100*((n+r)/2)]},a.hsv.rgb=function(t){var e=t[0]/60,r=t[1]/100,n=t[2]/100,o=Math.floor(e)%6,i=e-Math.floor(e),a=255*n*(1-r),s=255*n*(1-r*i),l=255*n*(1-r*(1-i));switch(n*=255,o){case 0:return[n,l,a];case 1:return[s,n,a];case 2:return[a,n,l];case 3:return[a,s,n];case 4:return[l,a,n];case 5:return[n,a,s]}},a.hsv.hsl=function(t){var e,r,n,o=t[0],i=t[1]/100,a=t[2]/100,s=Math.max(a,.01);return n=(2-i)*a,r=i*s,[o,100*(r=(r/=(e=(2-i)*s)<=1?e:2-e)||0),100*(n/=2)]},a.hwb.rgb=function(t){var e,r,n,o,i,a,s,l=t[0]/360,d=t[1]/100,c=t[2]/100,u=d+c;switch(u>1&&(d/=u,c/=u),n=6*l-(e=Math.floor(6*l)),0!=(1&e)&&(n=1-n),o=d+n*((r=1-c)-d),e){default:case 6:case 0:i=r,a=o,s=d;break;case 1:i=o,a=r,s=d;break;case 2:i=d,a=r,s=o;break;case 3:i=d,a=o,s=r;break;case 4:i=o,a=d,s=r;break;case 5:i=r,a=d,s=o}return[255*i,255*a,255*s]},a.cmyk.rgb=function(t){var e=t[0]/100,r=t[1]/100,n=t[2]/100,o=t[3]/100;return[255*(1-Math.min(1,e*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o)),255*(1-Math.min(1,n*(1-o)+o))]},a.xyz.rgb=function(t){var e,r,n,o=t[0]/100,i=t[1]/100,a=t[2]/100;return r=-.9689*o+1.8758*i+.0415*a,n=.0557*o+-.204*i+1.057*a,e=(e=3.2406*o+-1.5372*i+-.4986*a)>.0031308?1.055*Math.pow(e,1/2.4)-.055:12.92*e,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,[255*(e=Math.min(Math.max(0,e),1)),255*(r=Math.min(Math.max(0,r),1)),255*(n=Math.min(Math.max(0,n),1))]},a.xyz.lab=function(t){var e=t[0],r=t[1],n=t[2];return r/=100,n/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(e-r),200*(r-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]},a.lab.xyz=function(t){var e,r,n,o=t[0];e=t[1]/500+(r=(o+16)/116),n=r-t[2]/200;var i=Math.pow(r,3),a=Math.pow(e,3),s=Math.pow(n,3);return r=i>.008856?i:(r-16/116)/7.787,e=a>.008856?a:(e-16/116)/7.787,n=s>.008856?s:(n-16/116)/7.787,[e*=95.047,r*=100,n*=108.883]},a.lab.lch=function(t){var e,r=t[0],n=t[1],o=t[2];return(e=360*Math.atan2(o,n)/2/Math.PI)<0&&(e+=360),[r,Math.sqrt(n*n+o*o),e]},a.lch.lab=function(t){var e,r=t[0],n=t[1];return e=t[2]/360*2*Math.PI,[r,n*Math.cos(e),n*Math.sin(e)]},a.rgb.ansi16=function(t){var e=t[0],r=t[1],n=t[2],o=1 in arguments?arguments[1]:a.rgb.hsv(t)[2];if(0===(o=Math.round(o/50)))return 30;var i=30+(Math.round(n/255)<<2|Math.round(r/255)<<1|Math.round(e/255));return 2===o&&(i+=60),i},a.hsv.ansi16=function(t){return a.rgb.ansi16(a.hsv.rgb(t),t[2])},a.rgb.ansi256=function(t){var e=t[0],r=t[1],n=t[2];return e===r&&r===n?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(r/255*5)+Math.round(n/255*5)},a.ansi16.rgb=function(t){var e=t%10;if(0===e||7===e)return t>50&&(e+=3.5),[e=e/10.5*255,e,e];var r=.5*(1+~~(t>50));return[(1&e)*r*255,(e>>1&1)*r*255,(e>>2&1)*r*255]},a.ansi256.rgb=function(t){if(t>=232){var e=10*(t-232)+8;return[e,e,e]}var r;return t-=16,[Math.floor(t/36)/5*255,Math.floor((r=t%36)/6)/5*255,r%6/5*255]},a.rgb.hex=function(t){var e=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},a.hex.rgb=function(t){var e=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];var r=e[0];3===e[0].length&&(r=r.split("").map((function(t){return t+t})).join(""));var n=parseInt(r,16);return[n>>16&255,n>>8&255,255&n]},a.rgb.hcg=function(t){var e,r=t[0]/255,n=t[1]/255,o=t[2]/255,i=Math.max(Math.max(r,n),o),a=Math.min(Math.min(r,n),o),s=i-a;return e=s<=0?0:i===r?(n-o)/s%6:i===n?2+(o-r)/s:4+(r-n)/s+4,e/=6,[360*(e%=1),100*s,100*(s<1?a/(1-s):0)]},a.hsl.hcg=function(t){var e=t[1]/100,r=t[2]/100,n=1,o=0;return(n=r<.5?2*e*r:2*e*(1-r))<1&&(o=(r-.5*n)/(1-n)),[t[0],100*n,100*o]},a.hsv.hcg=function(t){var e=t[1]/100,r=t[2]/100,n=e*r,o=0;return n<1&&(o=(r-n)/(1-n)),[t[0],100*n,100*o]},a.hcg.rgb=function(t){var e=t[0]/360,r=t[1]/100,n=t[2]/100;if(0===r)return[255*n,255*n,255*n];var o,i=[0,0,0],a=e%1*6,s=a%1,l=1-s;switch(Math.floor(a)){case 0:i[0]=1,i[1]=s,i[2]=0;break;case 1:i[0]=l,i[1]=1,i[2]=0;break;case 2:i[0]=0,i[1]=1,i[2]=s;break;case 3:i[0]=0,i[1]=l,i[2]=1;break;case 4:i[0]=s,i[1]=0,i[2]=1;break;default:i[0]=1,i[1]=0,i[2]=l}return o=(1-r)*n,[255*(r*i[0]+o),255*(r*i[1]+o),255*(r*i[2]+o)]},a.hcg.hsv=function(t){var e=t[1]/100,r=e+t[2]/100*(1-e),n=0;return r>0&&(n=e/r),[t[0],100*n,100*r]},a.hcg.hsl=function(t){var e=t[1]/100,r=t[2]/100*(1-e)+.5*e,n=0;return r>0&&r<.5?n=e/(2*r):r>=.5&&r<1&&(n=e/(2*(1-r))),[t[0],100*n,100*r]},a.hcg.hwb=function(t){var e=t[1]/100,r=e+t[2]/100*(1-e);return[t[0],100*(r-e),100*(1-r)]},a.hwb.hcg=function(t){var e=t[1]/100,r=1-t[2]/100,n=r-e,o=0;return n<1&&(o=(r-n)/(1-n)),[t[0],100*n,100*o]},a.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},a.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},a.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},a.gray.hsl=a.gray.hsv=function(t){return[0,0,t[0]]},a.gray.hwb=function(t){return[0,100,t[0]]},a.gray.cmyk=function(t){return[0,0,0,t[0]]},a.gray.lab=function(t){return[t[0],0,0]},a.gray.hex=function(t){var e=255&Math.round(t[0]/100*255),r=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(r.length)+r},a.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]}},function(t,e,r){"use strict";var n={};(0,r(2).assign)(n,r(53),r(56),r(22)),t.exports=n},,function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(8),s=r(32),l=i(r(13)),d=r(3),c=function(t){function e(){var e=t.call(this)||this;return e.x=.5,e.y=.5,e.angle=0,e.ratio=1,e.nextFrame=null,e.previousState=null,e.enabled=!0,e.previousState=e.getState(),e}return o(e,t),e.from=function(t){return(new e).setState(t)},e.prototype.enable=function(){return this.enabled=!0,this},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.getState=function(){return{x:this.x,y:this.y,angle:this.angle,ratio:this.ratio}},e.prototype.hasState=function(t){return this.x===t.x&&this.y===t.y&&this.ratio===t.ratio&&this.angle===t.angle},e.prototype.getPreviousState=function(){var t=this.previousState;return t?{x:t.x,y:t.y,angle:t.angle,ratio:t.ratio}:null},e.prototype.isAnimated=function(){return!!this.nextFrame},e.prototype.setState=function(t){return this.enabled?(this.previousState=this.getState(),"number"==typeof t.x&&(this.x=t.x),"number"==typeof t.y&&(this.y=t.y),"number"==typeof t.angle&&(this.angle=t.angle),"number"==typeof t.ratio&&(this.ratio=t.ratio),this.hasState(this.previousState)||this.emit("updated",this.getState()),this):this},e.prototype.animate=function(t,e,r){var n=this;if(this.enabled){var o=Object.assign({},s.ANIMATE_DEFAULTS,e),i="function"==typeof o.easing?o.easing:l.default[o.easing],a=Date.now(),c=this.getState(),u=function(){var e=(Date.now()-a)/o.duration;if(e>=1)return n.nextFrame=null,n.setState(t),void(n.animationCallback&&(n.animationCallback.call(null),n.animationCallback=void 0));var r=i(e),s={};t.x&&(s.x=c.x+(t.x-c.x)*r),t.y&&(s.y=c.y+(t.y-c.y)*r),t.angle&&(s.angle=c.angle+(t.angle-c.angle)*r),t.ratio&&(s.ratio=c.ratio+(t.ratio-c.ratio)*r),n.setState(s),n.nextFrame=(0,d.requestFrame)(u)};this.nextFrame?((0,d.cancelFrame)(this.nextFrame),this.animationCallback&&this.animationCallback.call(null),this.nextFrame=(0,d.requestFrame)(u)):u(),this.animationCallback=r}},e.prototype.animatedZoom=function(t){if(t){if("number"==typeof t)return this.animate({ratio:this.ratio/t});this.animate({ratio:this.ratio/(t.factor||1.5)},t)}else this.animate({ratio:this.ratio/1.5})},e.prototype.animatedUnzoom=function(t){if(t){if("number"==typeof t)return this.animate({ratio:this.ratio*t});this.animate({ratio:this.ratio*(t.factor||1.5)},t)}else this.animate({ratio:1.5*this.ratio})},e.prototype.animatedReset=function(t){this.animate({x:.5,y:.5,ratio:1,angle:0},t)},e.prototype.copy=function(){return e.from(this.getState())},e}(a.EventEmitter);e.default=c},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&i(e,t,r);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});var l=s(r(14)),d=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.enabled=!0,n.draggedEvents=0,n.downStartTime=null,n.lastMouseX=null,n.lastMouseY=null,n.isMouseDown=!1,n.isMoving=!1,n.movingTimeout=null,n.startCameraState=null,n.clicks=0,n.doubleClickTimeout=null,n.currentWheelDirection=0,n.handleClick=n.handleClick.bind(n),n.handleRightClick=n.handleRightClick.bind(n),n.handleDown=n.handleDown.bind(n),n.handleUp=n.handleUp.bind(n),n.handleMove=n.handleMove.bind(n),n.handleWheel=n.handleWheel.bind(n),n.handleOut=n.handleOut.bind(n),e.addEventListener("click",n.handleClick,!1),e.addEventListener("contextmenu",n.handleRightClick,!1),e.addEventListener("mousedown",n.handleDown,!1),e.addEventListener("wheel",n.handleWheel,!1),e.addEventListener("mouseout",n.handleOut,!1),document.addEventListener("mousemove",n.handleMove,!1),document.addEventListener("mouseup",n.handleUp,!1),n}return o(e,t),e.prototype.kill=function(){var t=this.container;t.removeEventListener("click",this.handleClick),t.removeEventListener("contextmenu",this.handleRightClick),t.removeEventListener("mousedown",this.handleDown),t.removeEventListener("wheel",this.handleWheel),t.removeEventListener("mouseout",this.handleOut),document.removeEventListener("mousemove",this.handleMove),document.removeEventListener("mouseup",this.handleUp)},e.prototype.handleClick=function(t){var e=this;if(this.enabled){if(this.clicks++,2===this.clicks)return this.clicks=0,"number"==typeof this.doubleClickTimeout&&(clearTimeout(this.doubleClickTimeout),this.doubleClickTimeout=null),this.handleDoubleClick(t);setTimeout((function(){e.clicks=0,e.doubleClickTimeout=null}),300),this.draggedEvents<3&&this.emit("click",(0,l.getMouseCoords)(t,this.container))}},e.prototype.handleRightClick=function(t){this.enabled&&this.emit("rightClick",(0,l.getMouseCoords)(t,this.container))},e.prototype.handleDoubleClick=function(t){if(this.enabled){t.preventDefault?t.preventDefault():t.returnValue=!1,t.stopPropagation();var e=(0,l.getMouseCoords)(t,this.container);if(this.emit("doubleClick",e),e.sigmaDefaultPrevented)return!1;var r=this.renderer.getCamera(),n=r.getState().ratio/2.2;return r.animate(this.renderer.getViewportZoomedState((0,l.getPosition)(t,this.container),n),{easing:"quadraticInOut",duration:200}),!1}},e.prototype.handleDown=function(t){if(this.enabled){this.startCameraState=this.renderer.getCamera().getState();var e=(0,l.getPosition)(t,this.container),r=e.x,n=e.y;this.lastMouseX=r,this.lastMouseY=n,this.draggedEvents=0,this.downStartTime=Date.now(),t.which,this.isMouseDown=!0,this.emit("mousedown",(0,l.getMouseCoords)(t,this.container))}},e.prototype.handleUp=function(t){var e=this;if(this.enabled&&this.isMouseDown){var r=this.renderer.getCamera();this.isMouseDown=!1,"number"==typeof this.movingTimeout&&(clearTimeout(this.movingTimeout),this.movingTimeout=null);var n=(0,l.getPosition)(t,this.container),o=n.x,i=n.y,a=r.getState(),s=r.getPreviousState()||{x:0,y:0};this.isMoving?r.animate({x:a.x+3*(a.x-s.x),y:a.y+3*(a.y-s.y)},{duration:200,easing:"quadraticOut"}):this.lastMouseX===o&&this.lastMouseY===i||r.setState({x:a.x,y:a.y}),this.isMoving=!1,setTimeout((function(){e.draggedEvents=0,e.renderer.refresh()}),0),this.emit("mouseup",(0,l.getMouseCoords)(t,this.container))}},e.prototype.handleMove=function(t){var e=this;if(this.enabled){var r=(0,l.getMouseCoords)(t,this.container);if(this.emit("mousemovebody",r),t.target===this.container&&(this.emit("mousemove",r),this.isMouseDown)){this.isMoving=!0,this.draggedEvents++,"number"==typeof this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){e.movingTimeout=null,e.isMoving=!1}),100);var n=this.renderer.getCamera(),o=(0,l.getPosition)(t,this.container),i=o.x,a=o.y,s=this.renderer.viewportToFramedGraph({x:this.lastMouseX,y:this.lastMouseY}),d=this.renderer.viewportToFramedGraph({x:i,y:a}),c=s.x-d.x,u=s.y-d.y,p=n.getState(),h=p.x+c,f=p.y+u;return n.setState({x:h,y:f}),this.lastMouseX=i,this.lastMouseY=a,t.preventDefault?t.preventDefault():t.returnValue=!1,t.stopPropagation(),!1}}},e.prototype.handleWheel=function(t){var e=this;if(!this.enabled)return!1;t.preventDefault?t.preventDefault():t.returnValue=!1,t.stopPropagation();var r=(0,l.getWheelDelta)(t);if(!r)return!1;var n=(0,l.getWheelCoords)(t,this.container);if(this.emit("wheel",n),n.sigmaDefaultPrevented)return!1;var o=r>0?1/1.7:1.7,i=this.renderer.getCamera(),a=i.getState().ratio*o,s=r>0?1:-1,d=Date.now();return this.currentWheelDirection===s&&this.lastWheelTriggerTime&&d-this.lastWheelTriggerTime<50||(i.animate(this.renderer.getViewportZoomedState((0,l.getPosition)(t,this.container),a),{easing:"quadraticOut",duration:250},(function(){e.currentWheelDirection=0})),this.currentWheelDirection=s,this.lastWheelTriggerTime=d),!1},e.prototype.handleOut=function(){},e}(l.default);e.default=d},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)a.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a},o=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,o=0,i=e.length;o<i;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.rectangleCollidesWithQuad=e.squareCollidesWithQuad=e.getCircumscribedAlignedRectangle=e.isRectangleAligned=void 0;var a=i(r(33)),s=!1;function l(t){return t.x1===t.x2||t.y1===t.y2}function d(t){var e=Math.sqrt(Math.pow(t.x2-t.x1,2)+Math.pow(t.y2-t.y1,2)),r=(t.y1-t.y2)*t.height/e,n=(t.x2-t.x1)*t.height/e,o={x:t.x1,y:t.y1},i={x:t.x2,y:t.y2},a={x:t.x1+r,y:t.y1+n},s={x:t.x2+r,y:t.y2+n},l=Math.min(o.x,i.x,a.x,s.x),d=Math.max(o.x,i.x,a.x,s.x),c=Math.min(o.y,i.y,a.y,s.y);return{x1:l,y1:c,x2:d,y2:c,height:Math.max(o.y,i.y,a.y,s.y)-c}}function c(t,e,r,n,o,i,a){return t<n+i&&t+r>n&&e<o+a&&e+r>o}function u(t,e,r,n,o,i,a,s){return t<o+a&&t+r>o&&e<i+s&&e+n>i}function p(t,e,r,n,o,i){var a=t<r+o/2;return e<n+i/2?a?1:2:a?3:4}e.isRectangleAligned=l,e.getCircumscribedAlignedRectangle=d,e.squareCollidesWithQuad=c,e.rectangleCollidesWithQuad=u;var h=function(){function t(t){var e;void 0===t&&(t={}),this.containers=((e={}).outside=[],e),this.cache=null,this.lastRectangle=null;var r=Math.pow(4,5);this.data=new Float32Array((4*r-1)/3*4),t.boundaries?this.resize(t.boundaries):this.resize({x:0,y:0,width:1,height:1})}return t.prototype.add=function(t,e,r,n){return function(t,e,r,n,o,i,a){for(var l=o-a,d=i-a,u=2*a,p=0,h=0;;){if(p>=t)return r[h]=r[h]||[],void r[h].push(n);var f=4*h+4,m=4*h+8,g=4*h+12,b=4*h+16,v=c(l,d,u,e[f+0],e[f+1],e[f+2],e[f+3]),y=c(l,d,u,e[m+0],e[m+1],e[m+2],e[m+3]),x=c(l,d,u,e[g+0],e[g+1],e[g+2],e[g+3]),w=c(l,d,u,e[b+0],e[b+1],e[b+2],e[b+3]),_=[v,y,x,w].reduce((function(t,e){return e?t+1:t}),0);if(0===_&&0===p)return r.outside.push(n),void(!s&&r.outside.length>=5&&(s=!0,console.warn("sigma/quadtree.insertNode: At least 5 nodes are outside the global quadtree zone. You might have a problem with the normalization function or the custom bounding box.")));if(0===_)throw new Error("sigma/quadtree.insertNode: no collision (level: "+p+", key: "+n+", x: "+o+", y: "+i+", size: "+a+").");if(3===_)throw new Error("sigma/quadtree.insertNode: 3 impossible collisions (level: "+p+", key: "+n+", x: "+o+", y: "+i+", size: "+a+").");if(_>1)return r[h]=r[h]||[],void r[h].push(n);p++,v&&(h=f),y&&(h=m),x&&(h=g),w&&(h=b)}}(5,this.data,this.containers,t,e,r,n),this},t.prototype.resize=function(t){this.clear(),this.data[0]=t.x,this.data[1]=t.y,this.data[2]=t.width,this.data[3]=t.height,function(t,e){for(var r=[0,0];r.length;){var n=r.pop(),o=r.pop(),i=4*o+4,a=4*o+8,s=4*o+12,l=4*o+16,d=e[o+0],c=e[o+1],u=e[o+2]/2,p=e[o+3]/2;e[i+0]=d,e[i+1]=c,e[i+2]=u,e[i+3]=p,e[a+0]=d+u,e[a+1]=c,e[a+2]=u,e[a+3]=p,e[s+0]=d,e[s+1]=c+p,e[s+2]=u,e[s+3]=p,e[l+0]=d+u,e[l+1]=c+p,e[l+2]=u,e[l+3]=p,n<t-1&&(r.push(l,n+1),r.push(s,n+1),r.push(a,n+1),r.push(i,n+1))}}(5,this.data)},t.prototype.clear=function(){var t;return this.containers=((t={}).outside=[],t),this},t.prototype.point=function(t,e){var r=this.containers.outside,i=0,a=0;do{this.containers[i]&&r.push.apply(r,o([],n(this.containers[i]),!1)),i=4*i+4*p(t,e,this.data[i+0],this.data[i+1],this.data[i+2],this.data[i+3]),a++}while(a<=5);return r},t.prototype.rectangle=function(t,e,r,i,s){var c,p=this.lastRectangle;return p&&t===p.x1&&r===p.x2&&e===p.y1&&i===p.y2&&s===p.height||(this.lastRectangle={x1:t,y1:e,x2:r,y2:i,height:s},l(this.lastRectangle)||(this.lastRectangle=d(this.lastRectangle)),this.cache=function(t,e,r,n,o,i,s){for(var l,d=[0,0],c=[];d.length;){var p=d.pop(),h=d.pop();if((l=r[h])&&(0,a.default)(c,l),!(p>=t)){var f=4*h+4,m=4*h+8,g=4*h+12,b=4*h+16,v=u(n,o,i,s,e[f+0],e[f+1],e[f+2],e[f+3]),y=u(n,o,i,s,e[m+0],e[m+1],e[m+2],e[m+3]),x=u(n,o,i,s,e[g+0],e[g+1],e[g+2],e[g+3]),w=u(n,o,i,s,e[b+0],e[b+1],e[b+2],e[b+3]);v&&d.push(f,p+1),y&&d.push(m,p+1),x&&d.push(g,p+1),w&&d.push(b,p+1)}}return c}(5,this.data,this.containers,t,e,Math.abs(t-r)||Math.abs(e-i),s),(c=this.cache).push.apply(c,o([],n(this.containers.outside),!1))),this.cache},t}();e.default=h},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=r(8),l=a(r(31)),d=a(r(27)),c=a(r(28)),u=a(r(29)),p=r(3),h=r(34),f=r(35),m=a(r(51)),g=r(12),b=r(52),v=l.default.nodeExtent,y=(0,p.getPixelRatio)();function x(t,e,r){if(!r.hasOwnProperty("x")||!r.hasOwnProperty("y"))throw new Error('Sigma: could not find a valid position (x, y) for node "'+e+'". All your nodes must have a number "x" and "y". Maybe your forgot to apply a layout or your "nodeReducer" is not returning the correct data?');return r.color||(r.color=t.defaultNodeColor),r.label||""===r.label||(r.label=null),void 0!==r.label&&null!==r.label?r.label=""+r.label:r.label=null,r.size||(r.size=2),r.hasOwnProperty("hidden")||(r.hidden=!1),r.hasOwnProperty("highlighted")||(r.highlighted=!1),r.type&&""!==r.type||(r.type=t.defaultNodeType),r.zIndex||(r.zIndex=0),r}function w(t,e,r){return r.color||(r.color=t.defaultEdgeColor),r.label||(r.label=""),r.size||(r.size=.5),r.hasOwnProperty("hidden")||(r.hidden=!1),r.type&&""!==r.type||(r.type=t.defaultEdgeType),r.zIndex||(r.zIndex=0),r}var _=function(t){function e(e,r,n){void 0===n&&(n={});var o=t.call(this)||this;if(o.elements={},o.canvasContexts={},o.webGLContexts={},o.activeListeners={},o.quadtree=new u.default,o.labelGrid=new h.LabelGrid,o.nodeDataCache={},o.edgeDataCache={},o.nodeKeyToIndex={},o.edgeKeyToIndex={},o.nodeExtent={x:[0,1],y:[0,1]},o.matrix=(0,g.identity)(),o.invMatrix=(0,g.identity)(),o.correctionRatio=1,o.customBBox=null,o.normalizationFunction=(0,p.createNormalizationFunction)({x:[-1/0,1/0],y:[-1/0,1/0]}),o.cameraSizeRatio=1,o.width=0,o.height=0,o.displayedLabels=new Set,o.highlightedNodes=new Set,o.hoveredNode=null,o.hoveredEdge=null,o.renderFrame=null,o.renderHighlightedNodesFrame=null,o.needToProcess=!1,o.needToSoftProcess=!1,o.checkEdgesEventsFrame=null,o.nodePrograms={},o.hoverNodePrograms={},o.edgePrograms={},o.settings=(0,p.assign)({},f.DEFAULT_SETTINGS,n),(0,f.validateSettings)(o.settings),(0,p.validateGraph)(e),!(r instanceof HTMLElement))throw new Error("Sigma: container should be an html element.");o.graph=e,o.container=r,o.initializeCache(),o.createWebGLContext("edges",{preserveDrawingBuffer:!0}),o.createCanvasContext("edgeLabels"),o.createWebGLContext("nodes"),o.createCanvasContext("labels"),o.createCanvasContext("hovers"),o.createWebGLContext("hoverNodes"),o.createCanvasContext("mouse");var i=o.webGLContexts.nodes;for(var a in i.blendFunc(i.ONE,i.ONE_MINUS_SRC_ALPHA),i.enable(i.BLEND),(i=o.webGLContexts.edges).blendFunc(i.ONE,i.ONE_MINUS_SRC_ALPHA),i.enable(i.BLEND),o.settings.nodeProgramClasses){var s=o.settings.nodeProgramClasses[a];o.nodePrograms[a]=new s(o.webGLContexts.nodes,o),o.hoverNodePrograms[a]=new s(o.webGLContexts.hoverNodes,o)}for(var a in o.settings.edgeProgramClasses){var l=o.settings.edgeProgramClasses[a];o.edgePrograms[a]=new l(o.webGLContexts.edges,o)}return o.resize(),o.camera=new d.default,o.bindCameraHandlers(),o.mouseCaptor=new c.default(o.elements.mouse,o),o.touchCaptor=new m.default(o.elements.mouse,o),o.bindEventHandlers(),o.bindGraphHandlers(),o.process(),o.render(),o}return o(e,t),e.prototype.createCanvas=function(t){var e=(0,p.createElement)("canvas",{position:"absolute"},{class:"sigma-"+t});return this.elements[t]=e,this.container.appendChild(e),e},e.prototype.createCanvasContext=function(t){var e=this.createCanvas(t);return this.canvasContexts[t]=e.getContext("2d",{preserveDrawingBuffer:!1,antialias:!1}),this},e.prototype.createWebGLContext=function(t,e){var r,n=this.createCanvas(t),o=i({preserveDrawingBuffer:!1,antialias:!1},e||{});return(r=n.getContext("webgl2",o))||(r=n.getContext("webgl",o)),r||(r=n.getContext("experimental-webgl",o)),this.webGLContexts[t]=r,this},e.prototype.initializeCache=function(){var t=this,e=this.graph,r=0;e.forEachNode((function(e){t.nodeKeyToIndex[e]=r++})),r=0,e.forEachEdge((function(e){t.edgeKeyToIndex[e]=r++}))},e.prototype.bindCameraHandlers=function(){var t=this;return this.activeListeners.camera=function(){t._scheduleRefresh()},this.camera.on("updated",this.activeListeners.camera),this},e.prototype.bindEventHandlers=function(){var t=this;this.activeListeners.handleResize=function(){t.needToSoftProcess=!0,t._scheduleRefresh()},window.addEventListener("resize",this.activeListeners.handleResize);var e=function(t,e,r,n,o){return t>r-o&&t<r+o&&e>n-o&&e<n+o&&Math.sqrt(Math.pow(t-r,2)+Math.pow(e-n,2))<o};this.activeListeners.handleMove=function(r){for(var n,o,i,a=(n=r.x,o=r.y,i=t.viewportToFramedGraph({x:n,y:o}),t.quadtree.point(i.x,1-i.y)),s=1/0,l=null,d=0,c=a.length;d<c;d++){var u=a[d],h=t.nodeDataCache[u],f=t.framedGraphToViewport(h),m=t.scaleSize(h.size);if(!h.hidden&&e(r.x,r.y,f.x,f.y,m)){var g=Math.sqrt(Math.pow(r.x-f.x,2)+Math.pow(r.y-f.y,2));g<s&&(s=g,l=u)}}if(l&&t.hoveredNode!==l&&!t.nodeDataCache[l].hidden)return t.hoveredNode&&t.emit("leaveNode",{node:t.hoveredNode}),t.hoveredNode=l,t.emit("enterNode",{node:l}),void t.scheduleHighlightedNodesRender();if(t.hoveredNode){h=t.nodeDataCache[t.hoveredNode],f=t.framedGraphToViewport(h),m=t.scaleSize(h.size);if(!e(r.x,r.y,f.x,f.y,m)){u=t.hoveredNode;return t.hoveredNode=null,t.emit("leaveNode",{node:u}),t.scheduleHighlightedNodesRender()}}var b={x:r.x,y:r.y};!0===t.settings.enableEdgeHoverEvents?t.checkEdgeHoverEvents(b):"debounce"===t.settings.enableEdgeHoverEvents&&(t.checkEdgesEventsFrame||(t.checkEdgesEventsFrame=(0,p.requestFrame)((function(){t.checkEdgeHoverEvents(b),t.checkEdgesEventsFrame=null}))))};var r=function(e){return function(r){var n={event:r,preventSigmaDefault:function(){this.event.preventSigmaDefault()}};if(t.hoveredNode)return t.emit(e+"Node",i(i({},n),{node:t.hoveredNode}));if("wheel"===e?t.settings.enableEdgeWheelEvents:t.settings.enableEdgeClickEvents){var o=t.getEdgeAtPoint(r.x,r.y);if(o)return t.emit(e+"Edge",i(i({},n),{edge:o}))}return t.emit(e+"Stage",n)}};return this.activeListeners.handleClick=r("click"),this.activeListeners.handleRightClick=r("rightClick"),this.activeListeners.handleDoubleClick=r("doubleClick"),this.activeListeners.handleWheel=r("wheel"),this.activeListeners.handleDown=r("down"),this.mouseCaptor.on("mousemove",this.activeListeners.handleMove),this.mouseCaptor.on("click",this.activeListeners.handleClick),this.mouseCaptor.on("rightClick",this.activeListeners.handleRightClick),this.mouseCaptor.on("doubleClick",this.activeListeners.handleDoubleClick),this.mouseCaptor.on("wheel",this.activeListeners.handleWheel),this.mouseCaptor.on("mousedown",this.activeListeners.handleDown),this},e.prototype.bindGraphHandlers=function(){var t=this,e=this.graph;return this.activeListeners.graphUpdate=function(){t.needToProcess=!0,t._scheduleRefresh()},this.activeListeners.softGraphUpdate=function(){t.needToSoftProcess=!0,t._scheduleRefresh()},this.activeListeners.addNodeGraphUpdate=function(r){t.nodeKeyToIndex[r.key]=e.order-1,t.activeListeners.graphUpdate()},this.activeListeners.addEdgeGraphUpdate=function(r){t.nodeKeyToIndex[r.key]=e.order-1,t.activeListeners.graphUpdate()},e.on("nodeAdded",this.activeListeners.addNodeGraphUpdate),e.on("nodeDropped",this.activeListeners.graphUpdate),e.on("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),e.on("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),e.on("edgeAdded",this.activeListeners.addEdgeGraphUpdate),e.on("edgeDropped",this.activeListeners.graphUpdate),e.on("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),e.on("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),e.on("edgesCleared",this.activeListeners.graphUpdate),e.on("cleared",this.activeListeners.graphUpdate),this},e.prototype.checkEdgeHoverEvents=function(t){var e=this.hoveredNode?null:this.getEdgeAtPoint(t.x,t.y);return e!==this.hoveredEdge&&(this.hoveredEdge&&this.emit("leaveEdge",{edge:this.hoveredEdge}),e&&this.emit("enterEdge",{edge:e}),this.hoveredEdge=e),this},e.prototype.getEdgeAtPoint=function(t,e){var r=this,n=this.edgeDataCache,o=this.nodeDataCache;if(!(0,b.isPixelColored)(this.webGLContexts.edges,t*y,e*y))return null;var i=this.viewportToGraph({x:t,y:e}),a=i.x,s=i.y,l=0;return this.graph.someEdge((function(t,e,i,a,s,d){var c=s.x,u=s.y,p=d.x,h=d.y;if(n[t].hidden||o[i].hidden||o[a].hidden)return!1;if(c!==p||u!==h){var f=Math.sqrt(Math.pow(p-c,2)+Math.pow(h-u,2)),m=r.graphToViewport({x:c,y:u}),g=m.x,b=m.y,v=r.graphToViewport({x:p,y:h}),y=v.x,x=v.y,w=Math.sqrt(Math.pow(y-g,2)+Math.pow(x-b,2));return l=f/w,!0}})),l&&this.graph.findEdge((function(t,e,o,i,d,c){if((0,b.doEdgeCollideWithPoint)(a,s,d.x,d.y,c.x,c.y,n[t].size*l/r.cameraSizeRatio))return!0}))||null},e.prototype.process=function(t){var e=this;void 0===t&&(t=!1);var r=this.graph,n=this.settings,o=this.getDimensions(),i=[1/0,-1/0],a=[1/0,-1/0];this.quadtree.clear(),this.labelGrid.resizeAndClear(o,n.labelGridCellSize),this.highlightedNodes=new Set;this.nodeExtent=v(r,["x","y"]);var s=new d.default,l=(0,p.matrixFromCamera)(s.getState(),this.getDimensions(),this.getGraphDimensions(),this.getSetting("stagePadding")||0);this.normalizationFunction=(0,p.createNormalizationFunction)(this.customBBox||this.nodeExtent);for(var c={},u=r.nodes(),h=0,f=u.length;h<f;h++){var m=u[h],g=Object.assign({},r.getNodeAttributes(m));n.nodeReducer&&(g=n.nodeReducer(m,g)),c[(y=x(this.settings,m,g)).type]=(c[y.type]||0)+1,this.nodeDataCache[m]=y,this.normalizationFunction.applyTo(y),this.settings.zIndex&&(y.zIndex<i[0]&&(i[0]=y.zIndex),y.zIndex>i[1]&&(i[1]=y.zIndex))}for(var b in this.nodePrograms){if(!this.nodePrograms.hasOwnProperty(b))throw new Error('Sigma: could not find a suitable program for node type "'+b+'"!');t||this.nodePrograms[b].allocate(c[b]||0),c[b]=0}this.settings.zIndex&&i[0]!==i[1]&&(u=(0,p.zIndexOrdering)(i,(function(t){return e.nodeDataCache[t].zIndex}),u));for(h=0,f=u.length;h<f;h++){m=u[h];var y=this.nodeDataCache[m];this.quadtree.add(m,y.x,1-y.y,y.size/this.width),y.label&&this.labelGrid.add(m,y.size,this.framedGraphToViewport(y,{matrix:l})),this.nodePrograms[y.type].process(y,y.hidden,c[y.type]++),y.highlighted&&!y.hidden&&this.highlightedNodes.add(m),this.nodeKeyToIndex[m]=h}this.labelGrid.organize();var _={},k=r.edges();for(h=0,f=k.length;h<f;h++){var E=k[h];g=Object.assign({},r.getEdgeAttributes(E));n.edgeReducer&&(g=n.edgeReducer(E,g)),_[(y=w(this.settings,0,g)).type]=(_[y.type]||0)+1,this.edgeDataCache[E]=y,this.settings.zIndex&&(y.zIndex<a[0]&&(a[0]=y.zIndex),y.zIndex>a[1]&&(a[1]=y.zIndex))}for(var b in this.edgePrograms){if(!this.edgePrograms.hasOwnProperty(b))throw new Error('Sigma: could not find a suitable program for edge type "'+b+'"!');t||this.edgePrograms[b].allocate(_[b]||0),_[b]=0}this.settings.zIndex&&a[0]!==a[1]&&(k=(0,p.zIndexOrdering)(a,(function(t){return e.edgeDataCache[t].zIndex}),k));for(h=0,f=k.length;h<f;h++){E=k[h],y=this.edgeDataCache[E];var C=r.extremities(E),T=this.nodeDataCache[C[0]],S=this.nodeDataCache[C[1]],A=y.hidden||T.hidden||S.hidden;this.edgePrograms[y.type].process(T,S,y,A,_[y.type]++),this.nodeKeyToIndex[E]=h}for(var b in this.edgePrograms){var L=this.edgePrograms[b];t||"function"!=typeof L.computeIndices||L.computeIndices()}return this},e.prototype._refresh=function(){return this.needToProcess?this.process():this.needToSoftProcess&&this.process(!0),this.needToProcess=!1,this.needToSoftProcess=!1,this.render(),this},e.prototype._scheduleRefresh=function(){var t=this;return this.renderFrame||(this.renderFrame=(0,p.requestFrame)((function(){t._refresh(),t.renderFrame=null}))),this},e.prototype.renderLabels=function(){if(!this.settings.renderLabels)return this;var t,e=this.camera.getState();if(e.ratio>=1)t=new Set(this.graph.nodes());else{var r=this.viewRectangle();t=new Set(this.quadtree.rectangle(r.x1,1-r.y1,r.x2,1-r.y2,r.height))}var n=this.labelGrid.getLabelsToDisplay(e.ratio,this.settings.labelDensity);this.displayedLabels=new Set;for(var o=this.canvasContexts.labels,i=0,a=n.length;i<a;i++){var s=n[i],l=this.nodeDataCache[s];if(!l.hidden){var d=this.framedGraphToViewport(l),c=d.x,u=d.y,p=this.scaleSize(l.size);p<this.settings.labelRenderedSizeThreshold||t.has(s)&&(this.displayedLabels.add(s),this.settings.labelRenderer(o,{key:s,label:l.label,color:l.color,size:p,x:c,y:u},this.settings))}}return this},e.prototype.renderEdgeLabels=function(){if(!this.settings.renderEdgeLabels)return this;var t=this.canvasContexts.edgeLabels;t.clearRect(0,0,this.width,this.height);for(var e=(0,h.edgeLabelsToDisplayFromNodes)({graph:this.graph,hoveredNode:this.hoveredNode,displayedNodeLabels:this.displayedLabels,highlightedNodes:this.highlightedNodes}),r=0,n=e.length;r<n;r++){var o=e[r],a=this.graph.extremities(o),s=this.nodeDataCache[a[0]],l=this.nodeDataCache[a[1]],d=this.edgeDataCache[o];d.hidden||s.hidden||l.hidden||this.settings.edgeLabelRenderer(t,{key:o,label:d.label,color:d.color,size:this.scaleSize(d.size)},i(i(i({key:a[0]},s),this.framedGraphToViewport(s)),{size:this.scaleSize(s.size)}),i(i(i({key:a[1]},l),this.framedGraphToViewport(l)),{size:this.scaleSize(l.size)}),this.settings)}return this},e.prototype.renderHighlightedNodes=function(){var t=this,e=this.canvasContexts.hovers;e.clearRect(0,0,this.width,this.height);var r=[];this.hoveredNode&&!this.nodeDataCache[this.hoveredNode].hidden&&r.push(this.hoveredNode),this.highlightedNodes.forEach((function(e){e!==t.hoveredNode&&r.push(e)})),r.forEach((function(r){return function(r){var n=t.nodeDataCache[r],o=t.framedGraphToViewport(n),i=o.x,a=o.y,s=t.scaleSize(n.size);t.settings.hoverRenderer(e,{key:r,label:n.label,color:n.color,size:s,x:i,y:a},t.settings)}(r)}));var n={};for(var o in r.forEach((function(e){var r=t.nodeDataCache[e].type;n[r]=(n[r]||0)+1})),this.hoverNodePrograms)this.hoverNodePrograms[o].allocate(n[o]||0),n[o]=0;for(var o in r.forEach((function(e){var r=t.nodeDataCache[e];t.hoverNodePrograms[r.type].process(r,r.hidden,n[r.type]++)})),this.hoverNodePrograms){var i=this.hoverNodePrograms[o];i.bind(),i.bufferData(),i.render({matrix:this.matrix,width:this.width,height:this.height,ratio:this.camera.ratio,correctionRatio:this.correctionRatio/this.camera.ratio,scalingRatio:y})}},e.prototype.scheduleHighlightedNodesRender=function(){var t=this;this.renderHighlightedNodesFrame||this.renderFrame||(this.renderHighlightedNodesFrame=(0,p.requestFrame)((function(){t.renderHighlightedNodesFrame=null,t.renderHighlightedNodes(),t.renderEdgeLabels()})))},e.prototype.render=function(){if(this.renderFrame&&((0,p.cancelFrame)(this.renderFrame),this.renderFrame=null,this.needToProcess=!1,this.needToSoftProcess=!1),this.resize(),this.clear(),this.updateCachedValues(),!this.graph.order)return this;var t=this.mouseCaptor,e=this.camera.isAnimated()||t.isMoving||t.draggedEvents||t.currentWheelDirection,r=this.camera.getState(),n=this.getDimensions(),o=this.getGraphDimensions(),i=this.getSetting("stagePadding")||0;for(var a in this.matrix=(0,p.matrixFromCamera)(r,n,o,i),this.invMatrix=(0,p.matrixFromCamera)(r,n,o,i,!0),this.correctionRatio=(0,p.getMatrixImpact)(this.matrix,r,n),this.nodePrograms){(s=this.nodePrograms[a]).bind(),s.bufferData(),s.render({matrix:this.matrix,width:this.width,height:this.height,ratio:r.ratio,correctionRatio:this.correctionRatio/r.ratio,scalingRatio:y})}if(!this.settings.hideEdgesOnMove||!e)for(var a in this.edgePrograms){var s;(s=this.edgePrograms[a]).bind(),s.bufferData(),s.render({matrix:this.matrix,width:this.width,height:this.height,ratio:r.ratio,correctionRatio:this.correctionRatio/r.ratio,scalingRatio:y})}return this.settings.hideLabelsOnMove&&e||(this.renderLabels(),this.renderEdgeLabels(),this.renderHighlightedNodes(),this.emit("afterRender")),this},e.prototype.updateCachedValues=function(){var t=this.camera.getState().ratio;this.cameraSizeRatio=Math.sqrt(t)},e.prototype.getCamera=function(){return this.camera},e.prototype.getGraph=function(){return this.graph},e.prototype.getMouseCaptor=function(){return this.mouseCaptor},e.prototype.getTouchCaptor=function(){return this.touchCaptor},e.prototype.getDimensions=function(){return{width:this.width,height:this.height}},e.prototype.getGraphDimensions=function(){var t=this.customBBox||this.nodeExtent;return{width:t.x[1]-t.x[0]||1,height:t.y[1]-t.y[0]||1}},e.prototype.getNodeDisplayData=function(t){var e=this.nodeDataCache[t];return e?Object.assign({},e):void 0},e.prototype.getEdgeDisplayData=function(t){var e=this.edgeDataCache[t];return e?Object.assign({},e):void 0},e.prototype.getSettings=function(){return i({},this.settings)},e.prototype.getSetting=function(t){return this.settings[t]},e.prototype.setSetting=function(t,e){return this.settings[t]=e,(0,f.validateSettings)(this.settings),this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.updateSetting=function(t,e){return this.settings[t]=e(this.settings[t]),(0,f.validateSettings)(this.settings),this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.resize=function(){var t=this.width,e=this.height;if(this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,0===this.width)throw new Error("Sigma: container has no width.");if(0===this.height)throw new Error("Sigma: container has no height.");if(t===this.width&&e===this.height)return this;for(var r in this.elements){var n=this.elements[r];n.style.width=this.width+"px",n.style.height=this.height+"px"}for(var r in this.canvasContexts)this.elements[r].setAttribute("width",this.width*y+"px"),this.elements[r].setAttribute("height",this.height*y+"px"),1!==y&&this.canvasContexts[r].scale(y,y);for(var r in this.webGLContexts)this.elements[r].setAttribute("width",this.width*y+"px"),this.elements[r].setAttribute("height",this.height*y+"px"),this.webGLContexts[r].viewport(0,0,this.width*y,this.height*y);return this},e.prototype.clear=function(){return this.webGLContexts.nodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT),this.webGLContexts.edges.clear(this.webGLContexts.edges.COLOR_BUFFER_BIT),this.webGLContexts.hoverNodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT),this.canvasContexts.labels.clearRect(0,0,this.width,this.height),this.canvasContexts.hovers.clearRect(0,0,this.width,this.height),this.canvasContexts.edgeLabels.clearRect(0,0,this.width,this.height),this},e.prototype.refresh=function(){return this.needToProcess=!0,this._refresh(),this},e.prototype.scheduleRefresh=function(){return this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.getViewportZoomedState=function(t,e){var r=this.camera.getState(),n=r.ratio,o=r.angle,i=r.x,a=r.y,s=e/n,l={x:this.width/2,y:this.height/2},d=this.viewportToFramedGraph(t),c=this.viewportToFramedGraph(l);return{angle:o,x:(d.x-c.x)*(1-s)+i,y:(d.y-c.y)*(1-s)+a,ratio:e}},e.prototype.viewRectangle=function(){var t=0*this.width/8,e=0*this.height/8,r=this.viewportToFramedGraph({x:0-t,y:0-e}),n=this.viewportToFramedGraph({x:this.width+t,y:0-e}),o=this.viewportToFramedGraph({x:0,y:this.height+e});return{x1:r.x,y1:r.y,x2:n.x,y2:n.y,height:n.y-o.y}},e.prototype.framedGraphToViewport=function(t,e){void 0===e&&(e={});var r=!!e.cameraState||!!e.viewportDimensions||!!e.graphDimensions,n=e.matrix?e.matrix:r?(0,p.matrixFromCamera)(e.cameraState||this.camera.getState(),e.viewportDimensions||this.getDimensions(),e.graphDimensions||this.getGraphDimensions(),e.padding||this.getSetting("stagePadding")||0):this.matrix,o=[t.x,t.y,1],i=(0,g.multiplyVec)(n,o);return{x:(1+i[0])*this.width/2,y:(1-i[1])*this.height/2}},e.prototype.viewportToFramedGraph=function(t,e){void 0===e&&(e={});var r=!!e.cameraState||!!e.viewportDimensions||!e.graphDimensions,n=e.matrix?e.matrix:r?(0,p.matrixFromCamera)(e.cameraState||this.camera.getState(),e.viewportDimensions||this.getDimensions(),e.graphDimensions||this.getGraphDimensions(),e.padding||this.getSetting("stagePadding")||0,!0):this.invMatrix,o=[t.x/this.width*2-1,1-t.y/this.height*2,1],i=(0,g.multiplyVec)(n,o);return{x:i[0],y:i[1]}},e.prototype.viewportToGraph=function(t){return this.normalizationFunction.inverse(this.viewportToFramedGraph(t))},e.prototype.graphToViewport=function(t){return this.framedGraphToViewport(this.normalizationFunction(t))},e.prototype.getBBox=function(){return v(this.graph,["x","y"])},e.prototype.getCustomBBox=function(){return this.customBBox},e.prototype.setCustomBBox=function(t){return this.customBBox=t,this._scheduleRefresh(),this},e.prototype.kill=function(){var t=this.graph;this.emit("kill"),this.removeAllListeners(),this.camera.removeListener("updated",this.activeListeners.camera),window.removeEventListener("resize",this.activeListeners.handleResize),this.mouseCaptor.kill(),this.touchCaptor.kill(),t.removeListener("nodeAdded",this.activeListeners.addNodeGraphUpdate),t.removeListener("nodeDropped",this.activeListeners.graphUpdate),t.removeListener("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),t.removeListener("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),t.removeListener("edgeAdded",this.activeListeners.addEdgeGraphUpdate),t.removeListener("edgeDropped",this.activeListeners.graphUpdate),t.removeListener("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),t.removeListener("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),t.removeListener("edgesCleared",this.activeListeners.graphUpdate),t.removeListener("cleared",this.activeListeners.graphUpdate),this.quadtree=new u.default,this.nodeDataCache={},this.edgeDataCache={},this.highlightedNodes.clear(),this.renderFrame&&((0,p.cancelFrame)(this.renderFrame),this.renderFrame=null),this.renderHighlightedNodesFrame&&((0,p.cancelFrame)(this.renderHighlightedNodesFrame),this.renderHighlightedNodesFrame=null);for(var e=this.container;e.firstChild;)e.removeChild(e.firstChild)},e.prototype.scaleSize=function(t){return t/this.cameraSizeRatio},e.prototype.getCanvases=function(){return i({},this.elements)},e}(s.EventEmitter);e.default=_},function(t,e,r){var n=r(7);function o(t,e){if(!n(t))throw new Error("graphology-metrics/extent: the given graph is not a valid graphology instance.");var r,o,i,a=[].concat(e),s={};for(i=0;i<a.length;i++)o=a[i],s[o]=[1/0,-1/0];return t.forEachNode((function(t,e){for(i=0;i<a.length;i++)o=a[i],(r=e[o])<s[o][0]&&(s[o][0]=r),r>s[o][1]&&(s[o][1]=r)})),"string"==typeof e?s[e]:s}var i=o;i.nodeExtent=o,i.edgeExtent=function(t,e){if(!n(t))throw new Error("graphology-metrics/extent: the given graph is not a valid graphology instance.");var r,o,i,a=[].concat(e),s={};for(i=0;i<a.length;i++)o=a[i],s[o]=[1/0,-1/0];return t.forEachEdge((function(t,e){for(i=0;i<a.length;i++)o=a[i],(r=e[o])<s[o][0]&&(s[o][0]=r),r>s[o][1]&&(s[o][1]=r)})),"string"==typeof e?s[e]:s},t.exports=i},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.animateNodes=e.ANIMATE_DEFAULTS=void 0;var o=r(3),i=n(r(13));e.ANIMATE_DEFAULTS={easing:"quadraticInOut",duration:150},e.animateNodes=function(t,r,n,a){var s=Object.assign({},e.ANIMATE_DEFAULTS,n),l="function"==typeof s.easing?s.easing:i.default[s.easing],d=Date.now(),c={};for(var u in r){var p=r[u];for(var h in c[u]={},p)c[u][h]=t.getNodeAttribute(u,h)}var f=null,m=function(){var e=(Date.now()-d)/s.duration;if(e>=1){for(var n in r){var i=r[n];for(var u in i)t.setNodeAttribute(n,u,i[u])}"function"==typeof a&&a()}else{for(var n in e=l(e),r){i=r[n];var p=c[n];for(var u in i)t.setNodeAttribute(n,u,i[u]*e+p[u]*(1-e))}f=(0,o.requestFrame)(m)}};return m(),function(){f&&(0,o.cancelFrame)(f)}}},function(t,e){t.exports=function(t,e){var r=e.length;if(0!==r){var n=t.length;t.length+=r;for(var o=0;o<r;o++)t[n+o]=e[o]}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.edgeLabelsToDisplayFromNodes=e.LabelGrid=void 0;var n=function(){function t(t,e){this.key=t,this.size=e}return t.compare=function(t,e){return t.size>e.size?-1:t.size<e.size||t.key>e.key?1:-1},t}(),o=function(){function t(){this.width=0,this.height=0,this.cellSize=0,this.columns=0,this.rows=0,this.cells={}}return t.prototype.resizeAndClear=function(t,e){this.width=t.width,this.height=t.height,this.cellSize=e,this.columns=Math.ceil(t.width/e),this.rows=Math.ceil(t.height/e),this.cells={}},t.prototype.getIndex=function(t){var e=Math.floor(t.x/this.cellSize),r=Math.floor(t.y/this.cellSize);return e*this.columns+r},t.prototype.add=function(t,e,r){var o=new n(t,e),i=this.getIndex(r),a=this.cells[i];a||(a=[],this.cells[i]=a),a.push(o)},t.prototype.organize=function(){for(var t in this.cells){this.cells[t].sort(n.compare)}},t.prototype.getLabelsToDisplay=function(t,e){var r=this.cellSize*this.cellSize,n=r/t/t*e/r,o=Math.ceil(n),i=[];for(var a in this.cells)for(var s=this.cells[a],l=0;l<Math.min(o,s.length);l++)i.push(s[l].key);return i},t}();e.LabelGrid=o,e.edgeLabelsToDisplayFromNodes=function(t){var e=t.graph,r=t.hoveredNode,n=t.highlightedNodes,o=t.displayedNodeLabels,i=[];return e.forEachEdge((function(t,e,a,s){(a===r||s===r||n.has(a)||n.has(s)||o.has(a)&&o.has(s))&&i.push(t)})),i}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_SETTINGS=e.validateSettings=void 0;var o=n(r(15)),i=n(r(36)),a=n(r(37)),s=n(r(38)),l=n(r(43)),d=n(r(45));e.validateSettings=function(t){if("number"!=typeof t.labelDensity||t.labelDensity<0)throw new Error("Settings: invalid `labelDensity`. Expecting a positive number.")},e.DEFAULT_SETTINGS={hideEdgesOnMove:!1,hideLabelsOnMove:!1,renderLabels:!0,renderEdgeLabels:!1,enableEdgeClickEvents:!1,enableEdgeWheelEvents:!1,enableEdgeHoverEvents:!1,defaultNodeColor:"#999",defaultNodeType:"circle",defaultEdgeColor:"#ccc",defaultEdgeType:"line",labelFont:"Arial",labelSize:14,labelWeight:"normal",labelColor:{color:"#000"},edgeLabelFont:"Arial",edgeLabelSize:14,edgeLabelWeight:"normal",edgeLabelColor:{attribute:"color"},stagePadding:30,labelDensity:.07,labelGridCellSize:60,labelRenderedSizeThreshold:6,nodeReducer:null,edgeReducer:null,zIndex:!1,labelRenderer:o.default,hoverRenderer:i.default,edgeLabelRenderer:a.default,nodeProgramClasses:{circle:s.default},edgeProgramClasses:{arrow:d.default,line:l.default}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(r(15));e.default=function(t,e,r){var n=r.labelSize,i=r.labelFont,a=r.labelWeight;if(t.font=a+" "+n+"px "+i,t.fillStyle="#FFF",t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowBlur=8,t.shadowColor="#000","string"==typeof e.label){var s=t.measureText(e.label).width,l=Math.round(s+5),d=Math.round(n+4),c=Math.max(e.size,n/2)+2,u=Math.asin(d/2/c),p=Math.sqrt(Math.abs(Math.pow(c,2)-Math.pow(d/2,2)));t.beginPath(),t.moveTo(e.x+p,e.y+d/2),t.lineTo(e.x+c+l,e.y+d/2),t.lineTo(e.x+c+l,e.y-d/2),t.lineTo(e.x+p,e.y-d/2),t.arc(e.x,e.y,c,u,-u),t.closePath(),t.fill()}else t.beginPath(),t.arc(e.x,e.y,e.size+2,0,2*Math.PI),t.closePath(),t.fill();t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowBlur=0,(0,o.default)(t,e,r)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r,n,o){var i=o.edgeLabelSize,a=o.edgeLabelFont,s=o.edgeLabelWeight,l=o.edgeLabelColor.attribute?e[o.edgeLabelColor.attribute]||o.edgeLabelColor.color||"#000":o.edgeLabelColor.color,d=e.label;if(d){t.fillStyle=l,t.font=s+" "+i+"px "+a;var c,u,p=r.size,h=n.size,f=r.x,m=r.y,g=n.x,b=n.y,v=g-f,y=b-m,x=Math.sqrt(v*v+y*y);if(!(x<p+h)){c=((f+=v*p/x)+(g-=v*h/x))/2,u=((m+=y*p/x)+(b-=y*h/x))/2,v=g-f,y=b-m,x=Math.sqrt(v*v+y*y);var w,_=t.measureText(d).width;if(_>x){for(d+="â¦",_=t.measureText(d).width;_>x&&d.length>1;)d=d.slice(0,-2)+"â¦",_=t.measureText(d).width;if(d.length<4)return}w=v>0?y>0?Math.acos(v/x):Math.asin(y/x):y>0?Math.acos(v/x)+Math.PI:Math.asin(v/x)+Math.PI/2,t.save(),t.translate(c,u),t.rotate(w),t.fillText(d,-_/2,e.size/2+i),t.restore()}}}},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(3),s=i(r(39)),l=i(r(40)),d=r(41),c=function(t){function e(e){var r=t.call(this,e,s.default,l.default,1,4)||this;return r.bind(),r}return o(e,t),e.prototype.process=function(t,e,r){var n=this.array,o=1*r*4;if(e)return n[o++]=0,n[o++]=0,n[o++]=0,void(n[o++]=0);var i=(0,a.floatColor)(t.color);n[o++]=t.x,n[o++]=t.y,n[o++]=t.size,n[o]=i},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniform1f(this.ratioLocation,1/Math.sqrt(t.ratio)),e.uniform1f(this.scaleLocation,t.scalingRatio),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.drawArrays(e.POINTS,0,this.array.length/4)}},e}(d.AbstractNodeProgram);e.default=c},function(t,e){(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="attribute vec2 a_position;\nattribute float a_size;\nattribute vec4 a_color;\n\nuniform float u_ratio;\nuniform float u_scale;\nuniform mat3 u_matrix;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  gl_Position = vec4(\n    (u_matrix * vec3(a_position, 1)).xy,\n    0,\n    1\n  );\n\n  // Multiply the point size twice:\n  //  - x SCALING_RATIO to correct the canvas scaling\n  //  - x 2 to correct the formulae\n  gl_PointSize = a_size * u_ratio * u_scale * 2.0;\n\n  v_border = (1.0 / u_ratio) * (0.5 / a_size);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},function(t,e){(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="precision mediump float;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float radius = 0.5;\n\nvoid main(void) {\n  vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec2 m = gl_PointCoord - vec2(0.5, 0.5);\n  float dist = radius - length(m);\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(color0, v_color, t);\n}\n";t.exports=r})()},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.createNodeCompoundProgram=e.AbstractNodeProgram=void 0;var i=function(t){function e(e,r,n,o,i){var a=t.call(this,e,r,n,o,i)||this;a.positionLocation=e.getAttribLocation(a.program,"a_position"),a.sizeLocation=e.getAttribLocation(a.program,"a_size"),a.colorLocation=e.getAttribLocation(a.program,"a_color");var s=e.getUniformLocation(a.program,"u_matrix");if(null===s)throw new Error("AbstractNodeProgram: error while getting matrixLocation");a.matrixLocation=s;var l=e.getUniformLocation(a.program,"u_ratio");if(null===l)throw new Error("AbstractNodeProgram: error while getting ratioLocation");a.ratioLocation=l;var d=e.getUniformLocation(a.program,"u_scale");if(null===d)throw new Error("AbstractNodeProgram: error while getting scaleLocation");return a.scaleLocation=d,a}return o(e,t),e.prototype.bind=function(){var t=this.gl;t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.sizeLocation),t.enableVertexAttribArray(this.colorLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.sizeLocation,1,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12)},e}(r(16).AbstractProgram);e.AbstractNodeProgram=i,e.createNodeCompoundProgram=function(t){return function(){function e(e,r){this.programs=t.map((function(t){return new t(e,r)}))}return e.prototype.bufferData=function(){this.programs.forEach((function(t){return t.bufferData()}))},e.prototype.allocate=function(t){this.programs.forEach((function(e){return e.allocate(t)}))},e.prototype.bind=function(){},e.prototype.render=function(t){this.programs.forEach((function(e){return e.render(t)}))},e.prototype.process=function(t,e,r){this.programs.forEach((function(n){return n.process(t,e,r)}))},e}()}},function(t,e,r){"use strict";function n(t,e,r){var n="VERTEX"===t?e.VERTEX_SHADER:e.FRAGMENT_SHADER,o=e.createShader(n);if(null===o)throw new Error("loadShader: error while creating the shader");if(e.shaderSource(o,r),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS)){var i=e.getShaderInfoLog(o);throw e.deleteShader(o),new Error("loadShader: error while compiling the shader:\n"+i+"\n"+r)}return o}Object.defineProperty(e,"__esModule",{value:!0}),e.loadProgram=e.loadFragmentShader=e.loadVertexShader=void 0,e.loadVertexShader=function(t,e){return n("VERTEX",t,e)},e.loadFragmentShader=function(t,e){return n("FRAGMENT",t,e)},e.loadProgram=function(t,e){var r,n,o=t.createProgram();if(null===o)throw new Error("loadProgram: error while creating the program.");for(r=0,n=e.length;r<n;r++)t.attachShader(o,e[r]);if(t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw t.deleteProgram(o),new Error("loadProgram: error while linking the program.");return o}},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(3),s=i(r(44)),l=i(r(17)),d=r(4),c=function(t){function e(e){var r=t.call(this,e,s.default,l.default,4,5)||this,n=e.createBuffer();if(null===n)throw new Error("EdgeProgram: error while creating indicesBuffer");r.indicesBuffer=n,r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal");var o=e.getUniformLocation(r.program,"u_matrix");if(null===o)throw new Error("EdgeProgram: error while getting matrixLocation");r.matrixLocation=o;var i=e.getUniformLocation(r.program,"u_correctionRatio");if(null===i)throw new Error("EdgeProgram: error while getting correctionRatioLocation");r.correctionRatioLocation=i;var d=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===d)throw new Error("EdgeProgram: error while getting sqrtZoomRatioLocation");return r.sqrtZoomRatioLocation=d,r.canUse32BitsIndices=(0,a.canUse32BitsIndices)(e),r.IndicesArray=r.canUse32BitsIndices?Uint32Array:Uint16Array,r.indicesArray=new r.IndicesArray,r.indicesType=r.canUse32BitsIndices?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.bind(),r}return o(e,t),e.prototype.bind=function(){var t=this.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.colorLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,5*Float32Array.BYTES_PER_ELEMENT,16)},e.prototype.computeIndices=function(){for(var t=this.array.length/5,e=t+t/2,r=new this.IndicesArray(e),n=0,o=0;n<t;n+=4)r[o++]=n,r[o++]=n+1,r[o++]=n+2,r[o++]=n+2,r[o++]=n+1,r[o++]=n+3;this.indicesArray=r},e.prototype.bufferData=function(){t.prototype.bufferData.call(this);var e=this.gl;e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indicesArray,e.STATIC_DRAW)},e.prototype.process=function(t,e,r,n,o){if(n)for(var i=20*o,s=i+20;i<s;i++)this.array[i]=0;else{var l=r.size||1,d=t.x,c=t.y,u=e.x,p=e.y,h=(0,a.floatColor)(r.color),f=u-d,m=p-c,g=f*f+m*m,b=0,v=0;g&&(b=-m*(g=1/Math.sqrt(g))*l,v=f*g*l);var y=20*o,x=this.array;x[y++]=d,x[y++]=c,x[y++]=b,x[y++]=v,x[y++]=h,x[y++]=d,x[y++]=c,x[y++]=-b,x[y++]=-v,x[y++]=h,x[y++]=u,x[y++]=p,x[y++]=b,x[y++]=v,x[y++]=h,x[y++]=u,x[y++]=p,x[y++]=-b,x[y++]=-v,x[y]=h}},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawElements(e.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},e}(d.AbstractEdgeProgram);e.default=c},function(t,e){(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n='attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // We require edges to be at least `minThickness` pixels thick *on screen*\n  // (so we need to compensate the SQRT zoom ratio):\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n\n  // Then, we need to retrieve the normalized thickness of the edge in the WebGL\n  // referential (in a ([0, 1], [0, 1]) space), using our "magic" correction\n  // ratio:\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n\n  // Finally, we adapt the edge thickness to the "SQRT rule" in sigma (so that\n  // items are not too big when zoomed in, and not too small when zoomed out).\n  // The exact computation should be `adapted = value * zoom / sqrt(zoom)`, but\n  // it\'s simpler like this:\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness, 1)).xy, 0, 1);\n\n  // For the fragment shader though, we need a thickness that takes the "magic"\n  // correction ratio into account (as in webGLThickness), but so that the\n  // antialiasint effect does not depend on the zoom level. So here\'s yet\n  // another thickness version:\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n';t.exports=r})()},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(4),i=n(r(46)),a=n(r(49)),s=(0,o.createEdgeCompoundProgram)([a.default,i.default]);e.default=s},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(3),s=i(r(47)),l=i(r(48)),d=r(4),c=function(t){function e(e){var r=t.call(this,e,s.default,l.default,3,9)||this;r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal"),r.radiusLocation=e.getAttribLocation(r.program,"a_radius"),r.barycentricLocation=e.getAttribLocation(r.program,"a_barycentric");var n=e.getUniformLocation(r.program,"u_matrix");if(null===n)throw new Error("EdgeArrowHeadProgram: error while getting matrixLocation");r.matrixLocation=n;var o=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===o)throw new Error("EdgeArrowHeadProgram: error while getting sqrtZoomRatioLocation");r.sqrtZoomRatioLocation=o;var i=e.getUniformLocation(r.program,"u_correctionRatio");if(null===i)throw new Error("EdgeArrowHeadProgram: error while getting correctionRatioLocation");return r.correctionRatioLocation=i,r.bind(),r}return o(e,t),e.prototype.bind=function(){var t=this.gl;t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.radiusLocation),t.enableVertexAttribArray(this.colorLocation),t.enableVertexAttribArray(this.barycentricLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.radiusLocation,1,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,16),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,9*Float32Array.BYTES_PER_ELEMENT,20),t.vertexAttribPointer(this.barycentricLocation,3,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,24)},e.prototype.computeIndices=function(){},e.prototype.process=function(t,e,r,n,o){if(n)for(var i=27*o,s=i+27;i<s;i++)this.array[i]=0;else{var l=r.size||1,d=e.size||1,c=t.x,u=t.y,p=e.x,h=e.y,f=(0,a.floatColor)(r.color),m=p-c,g=h-u,b=m*m+g*g,v=0,y=0;b&&(v=-g*(b=1/Math.sqrt(b))*l,y=m*b*l);var x=27*o,w=this.array;w[x++]=p,w[x++]=h,w[x++]=-v,w[x++]=-y,w[x++]=d,w[x++]=f,w[x++]=1,w[x++]=0,w[x++]=0,w[x++]=p,w[x++]=h,w[x++]=-v,w[x++]=-y,w[x++]=d,w[x++]=f,w[x++]=0,w[x++]=1,w[x++]=0,w[x++]=p,w[x++]=h,w[x++]=-v,w[x++]=-y,w[x++]=d,w[x++]=f,w[x++]=0,w[x++]=0,w[x]=1}},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawArrays(e.TRIANGLES,0,this.array.length/9)}},e}(d.AbstractEdgeProgram);e.default=c},function(t,e){(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="attribute vec2 a_position;\nattribute vec2 a_normal;\nattribute float a_radius;\nattribute vec4 a_color;\nattribute vec3 a_barycentric;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadWidthLengthRatio = 0.66;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl and\n  // edge.clamped.vert.glsl. Please read it to get better comments on what's\n  // happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n  float adaptedWebGLNodeRadius = a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n  float adaptedWebGLArrowHeadHalfWidth = adaptedWebGLArrowHeadLength * arrowHeadWidthLengthRatio / 2.0;\n\n  float da = a_barycentric.x;\n  float db = a_barycentric.y;\n  float dc = a_barycentric.z;\n\n  vec2 delta = vec2(\n      da * (adaptedWebGLNodeRadius * unitNormal.y)\n    + db * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y + adaptedWebGLArrowHeadHalfWidth * unitNormal.x)\n    + dc * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y - adaptedWebGLArrowHeadHalfWidth * unitNormal.x),\n\n      da * (-adaptedWebGLNodeRadius * unitNormal.x)\n    + db * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x + adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n    + dc * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x - adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n  );\n\n  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;\n\n  gl_Position = vec4(position, 0, 1);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},function(t,e){(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="precision mediump float;\n\nvarying vec4 v_color;\n\nvoid main(void) {\n  gl_FragColor = v_color;\n}\n";t.exports=r})()},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(4),s=r(3),l=i(r(50)),d=i(r(17)),c=function(t){function e(e){var r=t.call(this,e,l.default,d.default,4,6)||this,n=e.createBuffer();if(null===n)throw new Error("EdgeClampedProgram: error while getting resolutionLocation");r.indicesBuffer=n,r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal"),r.radiusLocation=e.getAttribLocation(r.program,"a_radius");var o=e.getUniformLocation(r.program,"u_matrix");if(null===o)throw new Error("EdgeClampedProgram: error while getting matrixLocation");r.matrixLocation=o;var i=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===i)throw new Error("EdgeClampedProgram: error while getting cameraRatioLocation");r.sqrtZoomRatioLocation=i;var a=e.getUniformLocation(r.program,"u_correctionRatio");if(null===a)throw new Error("EdgeClampedProgram: error while getting viewportRatioLocation");return r.correctionRatioLocation=a,r.canUse32BitsIndices=(0,s.canUse32BitsIndices)(e),r.IndicesArray=r.canUse32BitsIndices?Uint32Array:Uint16Array,r.indicesArray=new r.IndicesArray,r.indicesType=r.canUse32BitsIndices?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.bind(),r}return o(e,t),e.prototype.bind=function(){var t=this.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.colorLocation),t.enableVertexAttribArray(this.radiusLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,6*Float32Array.BYTES_PER_ELEMENT,16),t.vertexAttribPointer(this.radiusLocation,1,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,20)},e.prototype.process=function(t,e,r,n,o){if(n)for(var i=24*o,a=i+24;i<a;i++)this.array[i]=0;else{var l=r.size||1,d=t.x,c=t.y,u=e.x,p=e.y,h=e.size||1,f=(0,s.floatColor)(r.color),m=u-d,g=p-c,b=m*m+g*g,v=0,y=0;b&&(v=-g*(b=1/Math.sqrt(b))*l,y=m*b*l);var x=24*o,w=this.array;w[x++]=d,w[x++]=c,w[x++]=v,w[x++]=y,w[x++]=f,w[x++]=0,w[x++]=d,w[x++]=c,w[x++]=-v,w[x++]=-y,w[x++]=f,w[x++]=0,w[x++]=u,w[x++]=p,w[x++]=v,w[x++]=y,w[x++]=f,w[x++]=h,w[x++]=u,w[x++]=p,w[x++]=-v,w[x++]=-y,w[x++]=f,w[x]=-h}},e.prototype.computeIndices=function(){for(var t=this.array.length/6,e=t+t/2,r=new this.IndicesArray(e),n=0,o=0;n<t;n+=4)r[o++]=n,r[o++]=n+1,r[o++]=n+2,r[o++]=n+2,r[o++]=n+1,r[o++]=n+3;this.indicesArray=r},e.prototype.bufferData=function(){t.prototype.bufferData.call(this);var e=this.gl;e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indicesArray,e.STATIC_DRAW)},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawElements(e.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},e}(a.AbstractEdgeProgram);e.default=c},function(t,e){(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\nattribute float a_radius;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl. Please read it to\n  // get better comments on what's happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here, we move the point to leave space for the arrow head:\n  float direction = sign(a_radius);\n  float adaptedWebGLNodeRadius = direction * a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength);\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness + compensationVector, 1)).xy, 0, 1);\n\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&i(e,t,r);return a(e,t),e},l=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)a.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a};Object.defineProperty(e,"__esModule",{value:!0});var d=s(r(14)),c=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.enabled=!0,n.isMoving=!1,n.touchMode=0,n.handleStart=n.handleStart.bind(n),n.handleLeave=n.handleLeave.bind(n),n.handleMove=n.handleMove.bind(n),e.addEventListener("touchstart",n.handleStart,!1),e.addEventListener("touchend",n.handleLeave,!1),e.addEventListener("touchcancel",n.handleLeave,!1),e.addEventListener("touchmove",n.handleMove,!1),n}return o(e,t),e.prototype.kill=function(){var t=this.container;t.removeEventListener("touchstart",this.handleStart),t.removeEventListener("touchend",this.handleLeave),t.removeEventListener("touchcancel",this.handleLeave),t.removeEventListener("touchmove",this.handleMove)},e.prototype.getDimensions=function(){return{width:this.container.offsetWidth,height:this.container.offsetHeight}},e.prototype.dispatchRelatedMouseEvent=function(t,e,r,n){var o=r||(0,d.getPosition)(e.touches[0],this.container),i=new MouseEvent(t,{clientX:o.x,clientY:o.y,altKey:e.altKey,ctrlKey:e.ctrlKey});(n||this.container).dispatchEvent(i)},e.prototype.handleStart=function(t){var e=this;if(this.enabled){t.preventDefault(),1===t.touches.length&&this.dispatchRelatedMouseEvent("mousedown",t);var r=(0,d.getTouchesArray)(t.touches);if(this.isMoving=!0,this.touchMode=r.length,this.startCameraState=this.renderer.getCamera().getState(),this.startTouchesPositions=r.map((function(t){return(0,d.getPosition)(t,e.container)})),this.lastTouchesPositions=this.startTouchesPositions,2===this.touchMode){var n=l(this.startTouchesPositions,2),o=n[0],i=o.x,a=o.y,s=n[1],c=s.x,u=s.y;this.startTouchesAngle=Math.atan2(u-a,c-i),this.startTouchesDistance=Math.sqrt(Math.pow(c-i,2)+Math.pow(u-a,2))}this.emit("touchdown",(0,d.getTouchCoords)(t,this.container))}},e.prototype.handleLeave=function(t){if(this.enabled){switch(t.preventDefault(),0===t.touches.length&&this.lastTouchesPositions&&this.lastTouchesPositions.length&&(this.dispatchRelatedMouseEvent("mouseup",t,this.lastTouchesPositions[0],document),this.dispatchRelatedMouseEvent("click",t,this.lastTouchesPositions[0])),this.movingTimeout&&(this.isMoving=!1,clearTimeout(this.movingTimeout)),this.touchMode){case 2:if(1===t.touches.length){this.handleStart(t),t.preventDefault();break}case 1:if(this.isMoving){var e=this.renderer.getCamera(),r=e.getState(),n=e.getPreviousState()||{x:0,y:0};e.animate({x:r.x+3*(r.x-n.x),y:r.y+3*(r.y-n.y)},{duration:200,easing:"quadraticOut"})}this.isMoving=!1,this.touchMode=0}this.emit("touchup",(0,d.getTouchCoords)(t,this.container))}},e.prototype.handleMove=function(t){var e,r=this;if(this.enabled){t.preventDefault(),1===t.touches.length&&this.dispatchRelatedMouseEvent("mousemove",t);var n=this.startCameraState,o=(0,d.getTouchesArray)(t.touches).map((function(t){return(0,d.getPosition)(t,r.container)}));switch(this.lastTouchesPositions=o,this.isMoving=!0,this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){r.isMoving=!1}),200),this.touchMode){case 1:var i=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0]),a=i.x,s=i.y,c=this.renderer.viewportToFramedGraph(o[0]),u=c.x,p=c.y;this.renderer.getCamera().setState({x:n.x+a-u,y:n.y+s-p});break;case 2:var h={},f=o[0],m=f.x,g=f.y,b=o[1],v=b.x,y=b.y,x=Math.atan2(y-g,v-m)-this.startTouchesAngle,w=Math.hypot(y-g,v-m)/this.startTouchesDistance;h.ratio=n.ratio/w,h.angle=n.angle+x;var _=this.getDimensions(),k=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0],{cameraState:n}),E=Math.min(_.width,_.height),C=E/_.width,T=E/_.height,S=h.ratio/E;p=g-E/2/T;u=(e=l([(u=m-E/2/C)*Math.cos(-h.angle)-p*Math.sin(-h.angle),p*Math.cos(-h.angle)+u*Math.sin(-h.angle)],2))[0],p=e[1],h.x=k.x-u*S,h.y=k.y+p*S,this.renderer.getCamera().setState(h)}this.emit("touchmove",(0,d.getTouchCoords)(t,this.container))}},e}(d.default);e.default=c},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.doEdgeCollideWithPoint=e.isPixelColored=void 0,e.isPixelColored=function(t,e,r){var n=new Uint8Array(4);return t.readPixels(e,t.drawingBufferHeight-r,1,1,t.RGBA,t.UNSIGNED_BYTE,n),n[3]>0},e.doEdgeCollideWithPoint=function(t,e,r,n,o,i,a){return!(t<r-a&&t<o-a)&&(!(e<n-a&&e<i-a)&&(!(t>r+a&&t>o+a)&&(!(e>n+a&&e>i+a)&&Math.abs((o-r)*(n-e)-(r-t)*(i-n))/Math.sqrt(Math.pow(o-r,2)+Math.pow(i-n,2))<a/2)))}},function(t,e,r){"use strict";var n=r(54),o=r(2),i=r(20),a=r(9),s=r(21),l=Object.prototype.toString;function d(t){if(!(this instanceof d))return new d(t);this.options=o.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(0!==r)throw new Error(a[r]);if(e.header&&n.deflateSetHeader(this.strm,e.header),e.dictionary){var c;if(c="string"==typeof e.dictionary?i.string2buf(e.dictionary):"[object ArrayBuffer]"===l.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,0!==(r=n.deflateSetDictionary(this.strm,c)))throw new Error(a[r]);this._dict_set=!0}}function c(t,e){var r=new d(e);if(r.push(t,!0),r.err)throw r.msg||a[r.err];return r.result}d.prototype.push=function(t,e){var r,a,s=this.strm,d=this.options.chunkSize;if(this.ended)return!1;a=e===~~e?e:!0===e?4:0,"string"==typeof t?s.input=i.string2buf(t):"[object ArrayBuffer]"===l.call(t)?s.input=new Uint8Array(t):s.input=t,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new o.Buf8(d),s.next_out=0,s.avail_out=d),1!==(r=n.deflate(s,a))&&0!==r)return this.onEnd(r),this.ended=!0,!1;0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(i.buf2binstring(o.shrinkBuf(s.output,s.next_out))):this.onData(o.shrinkBuf(s.output,s.next_out)))}while((s.avail_in>0||0===s.avail_out)&&1!==r);return 4===a?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==a||(this.onEnd(0),s.avail_out=0,!0)},d.prototype.onData=function(t){this.chunks.push(t)},d.prototype.onEnd=function(t){0===t&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Deflate=d,e.deflate=c,e.deflateRaw=function(t,e){return(e=e||{}).raw=!0,c(t,e)},e.gzip=function(t,e){return(e=e||{}).gzip=!0,c(t,e)}},function(t,e,r){"use strict";var n,o=r(2),i=r(55),a=r(18),s=r(19),l=r(9);function d(t,e){return t.msg=l[e],e}function c(t){return(t<<1)-(t>4?9:0)}function u(t){for(var e=t.length;--e>=0;)t[e]=0}function p(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(o.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function h(t,e){i._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,p(t.strm)}function f(t,e){t.pending_buf[t.pending++]=e}function m(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function g(t,e){var r,n,o=t.max_chain_length,i=t.strstart,a=t.prev_length,s=t.nice_match,l=t.strstart>t.w_size-262?t.strstart-(t.w_size-262):0,d=t.window,c=t.w_mask,u=t.prev,p=t.strstart+258,h=d[i+a-1],f=d[i+a];t.prev_length>=t.good_match&&(o>>=2),s>t.lookahead&&(s=t.lookahead);do{if(d[(r=e)+a]===f&&d[r+a-1]===h&&d[r]===d[i]&&d[++r]===d[i+1]){i+=2,r++;do{}while(d[++i]===d[++r]&&d[++i]===d[++r]&&d[++i]===d[++r]&&d[++i]===d[++r]&&d[++i]===d[++r]&&d[++i]===d[++r]&&d[++i]===d[++r]&&d[++i]===d[++r]&&i<p);if(n=258-(p-i),i=p-258,n>a){if(t.match_start=e,a=n,n>=s)break;h=d[i+a-1],f=d[i+a]}}}while((e=u[e&c])>l&&0!=--o);return a<=t.lookahead?a:t.lookahead}function b(t){var e,r,n,i,l,d,c,u,p,h,f=t.w_size;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=f+(f-262)){o.arraySet(t.window,t.window,f,f,0),t.match_start-=f,t.strstart-=f,t.block_start-=f,e=r=t.hash_size;do{n=t.head[--e],t.head[e]=n>=f?n-f:0}while(--r);e=r=f;do{n=t.prev[--e],t.prev[e]=n>=f?n-f:0}while(--r);i+=f}if(0===t.strm.avail_in)break;if(d=t.strm,c=t.window,u=t.strstart+t.lookahead,p=i,h=void 0,(h=d.avail_in)>p&&(h=p),r=0===h?0:(d.avail_in-=h,o.arraySet(c,d.input,d.next_in,h,u),1===d.state.wrap?d.adler=a(d.adler,c,h,u):2===d.state.wrap&&(d.adler=s(d.adler,c,h,u)),d.next_in+=h,d.total_in+=h,h),t.lookahead+=r,t.lookahead+t.insert>=3)for(l=t.strstart-t.insert,t.ins_h=t.window[l],t.ins_h=(t.ins_h<<t.hash_shift^t.window[l+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[l+3-1])&t.hash_mask,t.prev[l&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=l,l++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<262&&0!==t.strm.avail_in)}function v(t,e){for(var r,n;;){if(t.lookahead<262){if(b(t),t.lookahead<262&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-262&&(t.match_length=g(t,r)),t.match_length>=3)if(n=i._tr_tally(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else n=i._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(h(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,4===e?(h(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(h(t,!1),0===t.strm.avail_out)?1:2}function y(t,e){for(var r,n,o;;){if(t.lookahead<262){if(b(t),t.lookahead<262&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-262&&(t.match_length=g(t,r),t.match_length<=5&&(1===t.strategy||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){o=t.strstart+t.lookahead-3,n=i._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=o&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,n&&(h(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if((n=i._tr_tally(t,0,t.window[t.strstart-1]))&&h(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=i._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,4===e?(h(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(h(t,!1),0===t.strm.avail_out)?1:2}function x(t,e,r,n,o){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=n,this.func=o}function w(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new o.Buf16(1146),this.dyn_dtree=new o.Buf16(122),this.bl_tree=new o.Buf16(78),u(this.dyn_ltree),u(this.dyn_dtree),u(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new o.Buf16(16),this.heap=new o.Buf16(573),u(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new o.Buf16(573),u(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function _(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=2,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:113,t.adler=2===e.wrap?0:1,e.last_flush=0,i._tr_init(e),0):d(t,-2)}function k(t){var e,r=_(t);return 0===r&&((e=t.state).window_size=2*e.w_size,u(e.head),e.max_lazy_match=n[e.level].max_lazy,e.good_match=n[e.level].good_length,e.nice_match=n[e.level].nice_length,e.max_chain_length=n[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0),r}function E(t,e,r,n,i,a){if(!t)return-2;var s=1;if(-1===e&&(e=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),i<1||i>9||8!==r||n<8||n>15||e<0||e>9||a<0||a>4)return d(t,-2);8===n&&(n=9);var l=new w;return t.state=l,l.strm=t,l.wrap=s,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=i+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+3-1)/3),l.window=new o.Buf8(2*l.w_size),l.head=new o.Buf16(l.hash_size),l.prev=new o.Buf16(l.w_size),l.lit_bufsize=1<<i+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new o.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=e,l.strategy=a,l.method=r,k(t)}n=[new x(0,0,0,0,(function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(b(t),0===t.lookahead&&0===e)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var n=t.block_start+r;if((0===t.strstart||t.strstart>=n)&&(t.lookahead=t.strstart-n,t.strstart=n,h(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-262&&(h(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(h(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(h(t,!1),t.strm.avail_out),1)})),new x(4,4,8,4,v),new x(4,5,16,8,v),new x(4,6,32,32,v),new x(4,4,16,16,y),new x(8,16,32,32,y),new x(8,16,128,128,y),new x(8,32,128,256,y),new x(32,128,258,1024,y),new x(32,258,258,4096,y)],e.deflateInit=function(t,e){return E(t,e,8,15,8,0)},e.deflateInit2=E,e.deflateReset=k,e.deflateResetKeep=_,e.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?-2:(t.state.gzhead=e,0):-2},e.deflate=function(t,e){var r,o,a,l;if(!t||!t.state||e>5||e<0)return t?d(t,-2):-2;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||666===o.status&&4!==e)return d(t,0===t.avail_out?-5:-2);if(o.strm=t,r=o.last_flush,o.last_flush=e,42===o.status)if(2===o.wrap)t.adler=0,f(o,31),f(o,139),f(o,8),o.gzhead?(f(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),f(o,255&o.gzhead.time),f(o,o.gzhead.time>>8&255),f(o,o.gzhead.time>>16&255),f(o,o.gzhead.time>>24&255),f(o,9===o.level?2:o.strategy>=2||o.level<2?4:0),f(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(f(o,255&o.gzhead.extra.length),f(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=s(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=69):(f(o,0),f(o,0),f(o,0),f(o,0),f(o,0),f(o,9===o.level?2:o.strategy>=2||o.level<2?4:0),f(o,3),o.status=113);else{var g=8+(o.w_bits-8<<4)<<8;g|=(o.strategy>=2||o.level<2?0:o.level<6?1:6===o.level?2:3)<<6,0!==o.strstart&&(g|=32),g+=31-g%31,o.status=113,m(o,g),0!==o.strstart&&(m(o,t.adler>>>16),m(o,65535&t.adler)),t.adler=1}if(69===o.status)if(o.gzhead.extra){for(a=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),p(t),a=o.pending,o.pending!==o.pending_buf_size));)f(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=73)}else o.status=73;if(73===o.status)if(o.gzhead.name){a=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),p(t),a=o.pending,o.pending===o.pending_buf_size)){l=1;break}l=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,f(o,l)}while(0!==l);o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),0===l&&(o.gzindex=0,o.status=91)}else o.status=91;if(91===o.status)if(o.gzhead.comment){a=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),p(t),a=o.pending,o.pending===o.pending_buf_size)){l=1;break}l=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,f(o,l)}while(0!==l);o.gzhead.hcrc&&o.pending>a&&(t.adler=s(t.adler,o.pending_buf,o.pending-a,a)),0===l&&(o.status=103)}else o.status=103;if(103===o.status&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&p(t),o.pending+2<=o.pending_buf_size&&(f(o,255&t.adler),f(o,t.adler>>8&255),t.adler=0,o.status=113)):o.status=113),0!==o.pending){if(p(t),0===t.avail_out)return o.last_flush=-1,0}else if(0===t.avail_in&&c(e)<=c(r)&&4!==e)return d(t,-5);if(666===o.status&&0!==t.avail_in)return d(t,-5);if(0!==t.avail_in||0!==o.lookahead||0!==e&&666!==o.status){var v=2===o.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(b(t),0===t.lookahead)){if(0===e)return 1;break}if(t.match_length=0,r=i._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(h(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(h(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(h(t,!1),0===t.strm.avail_out)?1:2}(o,e):3===o.strategy?function(t,e){for(var r,n,o,a,s=t.window;;){if(t.lookahead<=258){if(b(t),t.lookahead<=258&&0===e)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=s[o=t.strstart-1])===s[++o]&&n===s[++o]&&n===s[++o]){a=t.strstart+258;do{}while(n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&o<a);t.match_length=258-(a-o),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(r=i._tr_tally(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=i._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(h(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(h(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(h(t,!1),0===t.strm.avail_out)?1:2}(o,e):n[o.level].func(o,e);if(3!==v&&4!==v||(o.status=666),1===v||3===v)return 0===t.avail_out&&(o.last_flush=-1),0;if(2===v&&(1===e?i._tr_align(o):5!==e&&(i._tr_stored_block(o,0,0,!1),3===e&&(u(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),p(t),0===t.avail_out))return o.last_flush=-1,0}return 4!==e?0:o.wrap<=0?1:(2===o.wrap?(f(o,255&t.adler),f(o,t.adler>>8&255),f(o,t.adler>>16&255),f(o,t.adler>>24&255),f(o,255&t.total_in),f(o,t.total_in>>8&255),f(o,t.total_in>>16&255),f(o,t.total_in>>24&255)):(m(o,t.adler>>>16),m(o,65535&t.adler)),p(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?0:1)},e.deflateEnd=function(t){var e;return t&&t.state?42!==(e=t.state.status)&&69!==e&&73!==e&&91!==e&&103!==e&&113!==e&&666!==e?d(t,-2):(t.state=null,113===e?d(t,-3):0):-2},e.deflateSetDictionary=function(t,e){var r,n,i,s,l,d,c,p,h=e.length;if(!t||!t.state)return-2;if(2===(s=(r=t.state).wrap)||1===s&&42!==r.status||r.lookahead)return-2;for(1===s&&(t.adler=a(t.adler,e,h,0)),r.wrap=0,h>=r.w_size&&(0===s&&(u(r.head),r.strstart=0,r.block_start=0,r.insert=0),p=new o.Buf8(r.w_size),o.arraySet(p,e,h-r.w_size,r.w_size,0),e=p,h=r.w_size),l=t.avail_in,d=t.next_in,c=t.input,t.avail_in=h,t.next_in=0,t.input=e,b(r);r.lookahead>=3;){n=r.strstart,i=r.lookahead-2;do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+3-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++}while(--i);r.strstart=n,r.lookahead=2,b(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,t.next_in=d,t.input=c,t.avail_in=l,r.wrap=s,0},e.deflateInfo="pako deflate (from Nodeca project)"},function(t,e,r){"use strict";var n=r(2);function o(t){for(var e=t.length;--e>=0;)t[e]=0}var i=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],a=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],l=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],d=new Array(576);o(d);var c=new Array(60);o(c);var u=new Array(512);o(u);var p=new Array(256);o(p);var h=new Array(29);o(h);var f,m,g,b=new Array(30);function v(t,e,r,n,o){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=n,this.max_length=o,this.has_stree=t&&t.length}function y(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function x(t){return t<256?u[t]:u[256+(t>>>7)]}function w(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function _(t,e,r){t.bi_valid>16-r?(t.bi_buf|=e<<t.bi_valid&65535,w(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=r-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function k(t,e,r){_(t,r[2*e],r[2*e+1])}function E(t,e){var r=0;do{r|=1&t,t>>>=1,r<<=1}while(--e>0);return r>>>1}function C(t,e,r){var n,o,i=new Array(16),a=0;for(n=1;n<=15;n++)i[n]=a=a+r[n-1]<<1;for(o=0;o<=e;o++){var s=t[2*o+1];0!==s&&(t[2*o]=E(i[s]++,s))}}function T(t){var e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function S(t){t.bi_valid>8?w(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function A(t,e,r,n){var o=2*e,i=2*r;return t[o]<t[i]||t[o]===t[i]&&n[e]<=n[r]}function L(t,e,r){for(var n=t.heap[r],o=r<<1;o<=t.heap_len&&(o<t.heap_len&&A(e,t.heap[o+1],t.heap[o],t.depth)&&o++,!A(e,n,t.heap[o],t.depth));)t.heap[r]=t.heap[o],r=o,o<<=1;t.heap[r]=n}function D(t,e,r){var n,o,s,l,d=0;if(0!==t.last_lit)do{n=t.pending_buf[t.d_buf+2*d]<<8|t.pending_buf[t.d_buf+2*d+1],o=t.pending_buf[t.l_buf+d],d++,0===n?k(t,o,e):(k(t,(s=p[o])+256+1,e),0!==(l=i[s])&&_(t,o-=h[s],l),k(t,s=x(--n),r),0!==(l=a[s])&&_(t,n-=b[s],l))}while(d<t.last_lit);k(t,256,e)}function N(t,e){var r,n,o,i=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,l=e.stat_desc.elems,d=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<l;r++)0!==i[2*r]?(t.heap[++t.heap_len]=d=r,t.depth[r]=0):i[2*r+1]=0;for(;t.heap_len<2;)i[2*(o=t.heap[++t.heap_len]=d<2?++d:0)]=1,t.depth[o]=0,t.opt_len--,s&&(t.static_len-=a[2*o+1]);for(e.max_code=d,r=t.heap_len>>1;r>=1;r--)L(t,i,r);o=l;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],L(t,i,1),n=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=n,i[2*o]=i[2*r]+i[2*n],t.depth[o]=(t.depth[r]>=t.depth[n]?t.depth[r]:t.depth[n])+1,i[2*r+1]=i[2*n+1]=o,t.heap[1]=o++,L(t,i,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,n,o,i,a,s,l=e.dyn_tree,d=e.max_code,c=e.stat_desc.static_tree,u=e.stat_desc.has_stree,p=e.stat_desc.extra_bits,h=e.stat_desc.extra_base,f=e.stat_desc.max_length,m=0;for(i=0;i<=15;i++)t.bl_count[i]=0;for(l[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<573;r++)(i=l[2*l[2*(n=t.heap[r])+1]+1]+1)>f&&(i=f,m++),l[2*n+1]=i,n>d||(t.bl_count[i]++,a=0,n>=h&&(a=p[n-h]),s=l[2*n],t.opt_len+=s*(i+a),u&&(t.static_len+=s*(c[2*n+1]+a)));if(0!==m){do{for(i=f-1;0===t.bl_count[i];)i--;t.bl_count[i]--,t.bl_count[i+1]+=2,t.bl_count[f]--,m-=2}while(m>0);for(i=f;0!==i;i--)for(n=t.bl_count[i];0!==n;)(o=t.heap[--r])>d||(l[2*o+1]!==i&&(t.opt_len+=(i-l[2*o+1])*l[2*o],l[2*o+1]=i),n--)}}(t,e),C(i,d,t.bl_count)}function O(t,e,r){var n,o,i=-1,a=e[1],s=0,l=7,d=4;for(0===a&&(l=138,d=3),e[2*(r+1)+1]=65535,n=0;n<=r;n++)o=a,a=e[2*(n+1)+1],++s<l&&o===a||(s<d?t.bl_tree[2*o]+=s:0!==o?(o!==i&&t.bl_tree[2*o]++,t.bl_tree[32]++):s<=10?t.bl_tree[34]++:t.bl_tree[36]++,s=0,i=o,0===a?(l=138,d=3):o===a?(l=6,d=3):(l=7,d=4))}function M(t,e,r){var n,o,i=-1,a=e[1],s=0,l=7,d=4;for(0===a&&(l=138,d=3),n=0;n<=r;n++)if(o=a,a=e[2*(n+1)+1],!(++s<l&&o===a)){if(s<d)do{k(t,o,t.bl_tree)}while(0!=--s);else 0!==o?(o!==i&&(k(t,o,t.bl_tree),s--),k(t,16,t.bl_tree),_(t,s-3,2)):s<=10?(k(t,17,t.bl_tree),_(t,s-3,3)):(k(t,18,t.bl_tree),_(t,s-11,7));s=0,i=o,0===a?(l=138,d=3):o===a?(l=6,d=3):(l=7,d=4)}}o(b);var j=!1;function z(t,e,r,o){_(t,0+(o?1:0),3),function(t,e,r,o){S(t),o&&(w(t,r),w(t,~r)),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r,!0)}e._tr_init=function(t){j||(!function(){var t,e,r,n,o,l=new Array(16);for(r=0,n=0;n<28;n++)for(h[n]=r,t=0;t<1<<i[n];t++)p[r++]=n;for(p[r-1]=n,o=0,n=0;n<16;n++)for(b[n]=o,t=0;t<1<<a[n];t++)u[o++]=n;for(o>>=7;n<30;n++)for(b[n]=o<<7,t=0;t<1<<a[n]-7;t++)u[256+o++]=n;for(e=0;e<=15;e++)l[e]=0;for(t=0;t<=143;)d[2*t+1]=8,t++,l[8]++;for(;t<=255;)d[2*t+1]=9,t++,l[9]++;for(;t<=279;)d[2*t+1]=7,t++,l[7]++;for(;t<=287;)d[2*t+1]=8,t++,l[8]++;for(C(d,287,l),t=0;t<30;t++)c[2*t+1]=5,c[2*t]=E(t,5);f=new v(d,i,257,286,15),m=new v(c,a,0,30,15),g=new v(new Array(0),s,0,19,7)}(),j=!0),t.l_desc=new y(t.dyn_ltree,f),t.d_desc=new y(t.dyn_dtree,m),t.bl_desc=new y(t.bl_tree,g),t.bi_buf=0,t.bi_valid=0,T(t)},e._tr_stored_block=z,e._tr_flush_block=function(t,e,r,n){var o,i,a=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),N(t,t.l_desc),N(t,t.d_desc),a=function(t){var e;for(O(t,t.dyn_ltree,t.l_desc.max_code),O(t,t.dyn_dtree,t.d_desc.max_code),N(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*l[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),o=t.opt_len+3+7>>>3,(i=t.static_len+3+7>>>3)<=o&&(o=i)):o=i=r+5,r+4<=o&&-1!==e?z(t,e,r,n):4===t.strategy||i===o?(_(t,2+(n?1:0),3),D(t,d,c)):(_(t,4+(n?1:0),3),function(t,e,r,n){var o;for(_(t,e-257,5),_(t,r-1,5),_(t,n-4,4),o=0;o<n;o++)_(t,t.bl_tree[2*l[o]+1],3);M(t,t.dyn_ltree,e-1),M(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),D(t,t.dyn_ltree,t.dyn_dtree)),T(t),n&&S(t)},e._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(p[r]+256+1)]++,t.dyn_dtree[2*x(e)]++),t.last_lit===t.lit_bufsize-1},e._tr_align=function(t){_(t,2,3),k(t,256,d),function(t){16===t.bi_valid?(w(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},function(t,e,r){"use strict";var n=r(57),o=r(2),i=r(20),a=r(22),s=r(9),l=r(21),d=r(60),c=Object.prototype.toString;function u(t){if(!(this instanceof u))return new u(t);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,e.windowBits);if(r!==a.Z_OK)throw new Error(s[r]);if(this.header=new d,n.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=i.string2buf(e.dictionary):"[object ArrayBuffer]"===c.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(r=n.inflateSetDictionary(this.strm,e.dictionary))!==a.Z_OK))throw new Error(s[r])}function p(t,e){var r=new u(e);if(r.push(t,!0),r.err)throw r.msg||s[r.err];return r.result}u.prototype.push=function(t,e){var r,s,l,d,u,p=this.strm,h=this.options.chunkSize,f=this.options.dictionary,m=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?p.input=i.binstring2buf(t):"[object ArrayBuffer]"===c.call(t)?p.input=new Uint8Array(t):p.input=t,p.next_in=0,p.avail_in=p.input.length;do{if(0===p.avail_out&&(p.output=new o.Buf8(h),p.next_out=0,p.avail_out=h),(r=n.inflate(p,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&f&&(r=n.inflateSetDictionary(this.strm,f)),r===a.Z_BUF_ERROR&&!0===m&&(r=a.Z_OK,m=!1),r!==a.Z_STREAM_END&&r!==a.Z_OK)return this.onEnd(r),this.ended=!0,!1;p.next_out&&(0!==p.avail_out&&r!==a.Z_STREAM_END&&(0!==p.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(l=i.utf8border(p.output,p.next_out),d=p.next_out-l,u=i.buf2string(p.output,l),p.next_out=d,p.avail_out=h-d,d&&o.arraySet(p.output,p.output,l,d,0),this.onData(u)):this.onData(o.shrinkBuf(p.output,p.next_out)))),0===p.avail_in&&0===p.avail_out&&(m=!0)}while((p.avail_in>0||0===p.avail_out)&&r!==a.Z_STREAM_END);return r===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),p.avail_out=0,!0)},u.prototype.onData=function(t){this.chunks.push(t)},u.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=u,e.inflate=p,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,p(t,e)},e.ungzip=p},function(t,e,r){"use strict";var n=r(2),o=r(18),i=r(19),a=r(58),s=r(59);function l(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function d(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function c(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(852),e.distcode=e.distdyn=new n.Buf32(592),e.sane=1,e.back=-1,0):-2}function u(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,c(t)):-2}function p(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?-2:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,u(t))):-2}function h(t,e){var r,n;return t?(n=new d,t.state=n,n.window=null,0!==(r=p(t,e))&&(t.state=null),r):-2}var f,m,g=!0;function b(t){if(g){var e;for(f=new n.Buf32(512),m=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(1,t.lens,0,288,f,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(2,t.lens,0,32,m,0,t.work,{bits:5}),g=!1}t.lencode=f,t.lenbits=9,t.distcode=m,t.distbits=5}function v(t,e,r,o){var i,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),o>=a.wsize?(n.arraySet(a.window,e,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((i=a.wsize-a.wnext)>o&&(i=o),n.arraySet(a.window,e,r-o,i,a.wnext),(o-=i)?(n.arraySet(a.window,e,r-o,o,0),a.wnext=o,a.whave=a.wsize):(a.wnext+=i,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=i))),0}e.inflateReset=u,e.inflateReset2=p,e.inflateResetKeep=c,e.inflateInit=function(t){return h(t,15)},e.inflateInit2=h,e.inflate=function(t,e){var r,d,c,u,p,h,f,m,g,y,x,w,_,k,E,C,T,S,A,L,D,N,O,M,j=0,z=new n.Buf8(4),P=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return-2;12===(r=t.state).mode&&(r.mode=13),p=t.next_out,c=t.output,f=t.avail_out,u=t.next_in,d=t.input,h=t.avail_in,m=r.hold,g=r.bits,y=h,x=f,N=0;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;g<16;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}if(2&r.wrap&&35615===m){r.check=0,z[0]=255&m,z[1]=m>>>8&255,r.check=i(r.check,z,2,0),m=0,g=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&m)<<8)+(m>>8))%31){t.msg="incorrect header check",r.mode=30;break}if(8!=(15&m)){t.msg="unknown compression method",r.mode=30;break}if(g-=4,D=8+(15&(m>>>=4)),0===r.wbits)r.wbits=D;else if(D>r.wbits){t.msg="invalid window size",r.mode=30;break}r.dmax=1<<D,t.adler=r.check=1,r.mode=512&m?10:12,m=0,g=0;break;case 2:for(;g<16;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}if(r.flags=m,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=m>>8&1),512&r.flags&&(z[0]=255&m,z[1]=m>>>8&255,r.check=i(r.check,z,2,0)),m=0,g=0,r.mode=3;case 3:for(;g<32;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}r.head&&(r.head.time=m),512&r.flags&&(z[0]=255&m,z[1]=m>>>8&255,z[2]=m>>>16&255,z[3]=m>>>24&255,r.check=i(r.check,z,4,0)),m=0,g=0,r.mode=4;case 4:for(;g<16;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}r.head&&(r.head.xflags=255&m,r.head.os=m>>8),512&r.flags&&(z[0]=255&m,z[1]=m>>>8&255,r.check=i(r.check,z,2,0)),m=0,g=0,r.mode=5;case 5:if(1024&r.flags){for(;g<16;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}r.length=m,r.head&&(r.head.extra_len=m),512&r.flags&&(z[0]=255&m,z[1]=m>>>8&255,r.check=i(r.check,z,2,0)),m=0,g=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((w=r.length)>h&&(w=h),w&&(r.head&&(D=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,d,u,w,D)),512&r.flags&&(r.check=i(r.check,d,w,u)),h-=w,u+=w,r.length-=w),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===h)break t;w=0;do{D=d[u+w++],r.head&&D&&r.length<65536&&(r.head.name+=String.fromCharCode(D))}while(D&&w<h);if(512&r.flags&&(r.check=i(r.check,d,w,u)),h-=w,u+=w,D)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===h)break t;w=0;do{D=d[u+w++],r.head&&D&&r.length<65536&&(r.head.comment+=String.fromCharCode(D))}while(D&&w<h);if(512&r.flags&&(r.check=i(r.check,d,w,u)),h-=w,u+=w,D)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;g<16;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}if(m!==(65535&r.check)){t.msg="header crc mismatch",r.mode=30;break}m=0,g=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;g<32;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}t.adler=r.check=l(m),m=0,g=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=p,t.avail_out=f,t.next_in=u,t.avail_in=h,r.hold=m,r.bits=g,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){m>>>=7&g,g-=7&g,r.mode=27;break}for(;g<3;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}switch(r.last=1&m,g-=1,3&(m>>>=1)){case 0:r.mode=14;break;case 1:if(b(r),r.mode=20,6===e){m>>>=2,g-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=30}m>>>=2,g-=2;break;case 14:for(m>>>=7&g,g-=7&g;g<32;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}if((65535&m)!=(m>>>16^65535)){t.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&m,m=0,g=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(w=r.length){if(w>h&&(w=h),w>f&&(w=f),0===w)break t;n.arraySet(c,d,u,w,p),h-=w,u+=w,f-=w,p+=w,r.length-=w;break}r.mode=12;break;case 17:for(;g<14;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}if(r.nlen=257+(31&m),m>>>=5,g-=5,r.ndist=1+(31&m),m>>>=5,g-=5,r.ncode=4+(15&m),m>>>=4,g-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;g<3;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}r.lens[P[r.have++]]=7&m,m>>>=3,g-=3}for(;r.have<19;)r.lens[P[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,O={bits:r.lenbits},N=s(0,r.lens,0,19,r.lencode,0,r.work,O),r.lenbits=O.bits,N){t.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;C=(j=r.lencode[m&(1<<r.lenbits)-1])>>>16&255,T=65535&j,!((E=j>>>24)<=g);){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}if(T<16)m>>>=E,g-=E,r.lens[r.have++]=T;else{if(16===T){for(M=E+2;g<M;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}if(m>>>=E,g-=E,0===r.have){t.msg="invalid bit length repeat",r.mode=30;break}D=r.lens[r.have-1],w=3+(3&m),m>>>=2,g-=2}else if(17===T){for(M=E+3;g<M;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}g-=E,D=0,w=3+(7&(m>>>=E)),m>>>=3,g-=3}else{for(M=E+7;g<M;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}g-=E,D=0,w=11+(127&(m>>>=E)),m>>>=7,g-=7}if(r.have+w>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=30;break}for(;w--;)r.lens[r.have++]=D}}if(30===r.mode)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,O={bits:r.lenbits},N=s(1,r.lens,0,r.nlen,r.lencode,0,r.work,O),r.lenbits=O.bits,N){t.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,O={bits:r.distbits},N=s(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,O),r.distbits=O.bits,N){t.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(h>=6&&f>=258){t.next_out=p,t.avail_out=f,t.next_in=u,t.avail_in=h,r.hold=m,r.bits=g,a(t,x),p=t.next_out,c=t.output,f=t.avail_out,u=t.next_in,d=t.input,h=t.avail_in,m=r.hold,g=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;C=(j=r.lencode[m&(1<<r.lenbits)-1])>>>16&255,T=65535&j,!((E=j>>>24)<=g);){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}if(C&&0==(240&C)){for(S=E,A=C,L=T;C=(j=r.lencode[L+((m&(1<<S+A)-1)>>S)])>>>16&255,T=65535&j,!(S+(E=j>>>24)<=g);){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}m>>>=S,g-=S,r.back+=S}if(m>>>=E,g-=E,r.back+=E,r.length=T,0===C){r.mode=26;break}if(32&C){r.back=-1,r.mode=12;break}if(64&C){t.msg="invalid literal/length code",r.mode=30;break}r.extra=15&C,r.mode=22;case 22:if(r.extra){for(M=r.extra;g<M;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}r.length+=m&(1<<r.extra)-1,m>>>=r.extra,g-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;C=(j=r.distcode[m&(1<<r.distbits)-1])>>>16&255,T=65535&j,!((E=j>>>24)<=g);){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}if(0==(240&C)){for(S=E,A=C,L=T;C=(j=r.distcode[L+((m&(1<<S+A)-1)>>S)])>>>16&255,T=65535&j,!(S+(E=j>>>24)<=g);){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}m>>>=S,g-=S,r.back+=S}if(m>>>=E,g-=E,r.back+=E,64&C){t.msg="invalid distance code",r.mode=30;break}r.offset=T,r.extra=15&C,r.mode=24;case 24:if(r.extra){for(M=r.extra;g<M;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}r.offset+=m&(1<<r.extra)-1,m>>>=r.extra,g-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===f)break t;if(w=x-f,r.offset>w){if((w=r.offset-w)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=30;break}w>r.wnext?(w-=r.wnext,_=r.wsize-w):_=r.wnext-w,w>r.length&&(w=r.length),k=r.window}else k=c,_=p-r.offset,w=r.length;w>f&&(w=f),f-=w,r.length-=w;do{c[p++]=k[_++]}while(--w);0===r.length&&(r.mode=21);break;case 26:if(0===f)break t;c[p++]=r.length,f--,r.mode=21;break;case 27:if(r.wrap){for(;g<32;){if(0===h)break t;h--,m|=d[u++]<<g,g+=8}if(x-=f,t.total_out+=x,r.total+=x,x&&(t.adler=r.check=r.flags?i(r.check,c,x,p-x):o(r.check,c,x,p-x)),x=f,(r.flags?m:l(m))!==r.check){t.msg="incorrect data check",r.mode=30;break}m=0,g=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;g<32;){if(0===h)break t;h--,m+=d[u++]<<g,g+=8}if(m!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=30;break}m=0,g=0}r.mode=29;case 29:N=1;break t;case 30:N=-3;break t;case 31:return-4;case 32:default:return-2}return t.next_out=p,t.avail_out=f,t.next_in=u,t.avail_in=h,r.hold=m,r.bits=g,(r.wsize||x!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&v(t,t.output,t.next_out,x-t.avail_out)?(r.mode=31,-4):(y-=t.avail_in,x-=t.avail_out,t.total_in+=y,t.total_out+=x,r.total+=x,r.wrap&&x&&(t.adler=r.check=r.flags?i(r.check,c,x,t.next_out-x):o(r.check,c,x,t.next_out-x)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0===y&&0===x||4===e)&&0===N&&(N=-5),N)},e.inflateEnd=function(t){if(!t||!t.state)return-2;var e=t.state;return e.window&&(e.window=null),t.state=null,0},e.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?-2:(r.head=e,e.done=!1,0):-2},e.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?-2:11===r.mode&&o(1,e,n,0)!==r.check?-3:v(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,0):-2},e.inflateInfo="pako inflate (from Nodeca project)"},function(t,e,r){"use strict";t.exports=function(t,e){var r,n,o,i,a,s,l,d,c,u,p,h,f,m,g,b,v,y,x,w,_,k,E,C,T;r=t.state,n=t.next_in,C=t.input,o=n+(t.avail_in-5),i=t.next_out,T=t.output,a=i-(e-t.avail_out),s=i+(t.avail_out-257),l=r.dmax,d=r.wsize,c=r.whave,u=r.wnext,p=r.window,h=r.hold,f=r.bits,m=r.lencode,g=r.distcode,b=(1<<r.lenbits)-1,v=(1<<r.distbits)-1;t:do{f<15&&(h+=C[n++]<<f,f+=8,h+=C[n++]<<f,f+=8),y=m[h&b];e:for(;;){if(h>>>=x=y>>>24,f-=x,0===(x=y>>>16&255))T[i++]=65535&y;else{if(!(16&x)){if(0==(64&x)){y=m[(65535&y)+(h&(1<<x)-1)];continue e}if(32&x){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}w=65535&y,(x&=15)&&(f<x&&(h+=C[n++]<<f,f+=8),w+=h&(1<<x)-1,h>>>=x,f-=x),f<15&&(h+=C[n++]<<f,f+=8,h+=C[n++]<<f,f+=8),y=g[h&v];r:for(;;){if(h>>>=x=y>>>24,f-=x,!(16&(x=y>>>16&255))){if(0==(64&x)){y=g[(65535&y)+(h&(1<<x)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(_=65535&y,f<(x&=15)&&(h+=C[n++]<<f,(f+=8)<x&&(h+=C[n++]<<f,f+=8)),(_+=h&(1<<x)-1)>l){t.msg="invalid distance too far back",r.mode=30;break t}if(h>>>=x,f-=x,_>(x=i-a)){if((x=_-x)>c&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(k=0,E=p,0===u){if(k+=d-x,x<w){w-=x;do{T[i++]=p[k++]}while(--x);k=i-_,E=T}}else if(u<x){if(k+=d+u-x,(x-=u)<w){w-=x;do{T[i++]=p[k++]}while(--x);if(k=0,u<w){w-=x=u;do{T[i++]=p[k++]}while(--x);k=i-_,E=T}}}else if(k+=u-x,x<w){w-=x;do{T[i++]=p[k++]}while(--x);k=i-_,E=T}for(;w>2;)T[i++]=E[k++],T[i++]=E[k++],T[i++]=E[k++],w-=3;w&&(T[i++]=E[k++],w>1&&(T[i++]=E[k++]))}else{k=i-_;do{T[i++]=T[k++],T[i++]=T[k++],T[i++]=T[k++],w-=3}while(w>2);w&&(T[i++]=T[k++],w>1&&(T[i++]=T[k++]))}break}}break}}while(n<o&&i<s);n-=w=f>>3,h&=(1<<(f-=w<<3))-1,t.next_in=n,t.next_out=i,t.avail_in=n<o?o-n+5:5-(n-o),t.avail_out=i<s?s-i+257:257-(i-s),r.hold=h,r.bits=f}},function(t,e,r){"use strict";var n=r(2),o=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],i=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,r,l,d,c,u,p){var h,f,m,g,b,v,y,x,w,_=p.bits,k=0,E=0,C=0,T=0,S=0,A=0,L=0,D=0,N=0,O=0,M=null,j=0,z=new n.Buf16(16),P=new n.Buf16(16),R=null,I=0;for(k=0;k<=15;k++)z[k]=0;for(E=0;E<l;E++)z[e[r+E]]++;for(S=_,T=15;T>=1&&0===z[T];T--);if(S>T&&(S=T),0===T)return d[c++]=20971520,d[c++]=20971520,p.bits=1,0;for(C=1;C<T&&0===z[C];C++);for(S<C&&(S=C),D=1,k=1;k<=15;k++)if(D<<=1,(D-=z[k])<0)return-1;if(D>0&&(0===t||1!==T))return-1;for(P[1]=0,k=1;k<15;k++)P[k+1]=P[k]+z[k];for(E=0;E<l;E++)0!==e[r+E]&&(u[P[e[r+E]]++]=E);if(0===t?(M=R=u,v=19):1===t?(M=o,j-=257,R=i,I-=257,v=256):(M=a,R=s,v=-1),O=0,E=0,k=C,b=c,A=S,L=0,m=-1,g=(N=1<<S)-1,1===t&&N>852||2===t&&N>592)return 1;for(;;){y=k-L,u[E]<v?(x=0,w=u[E]):u[E]>v?(x=R[I+u[E]],w=M[j+u[E]]):(x=96,w=0),h=1<<k-L,C=f=1<<A;do{d[b+(O>>L)+(f-=h)]=y<<24|x<<16|w|0}while(0!==f);for(h=1<<k-1;O&h;)h>>=1;if(0!==h?(O&=h-1,O+=h):O=0,E++,0==--z[k]){if(k===T)break;k=e[r+u[E]]}if(k>S&&(O&g)!==m){for(0===L&&(L=S),b+=C,D=1<<(A=k-L);A+L<T&&!((D-=z[A+L])<=0);)A++,D<<=1;if(N+=1<<A,1===t&&N>852||2===t&&N>592)return 1;d[m=O&g]=S<<24|A<<16|b-c|0}}return 0!==O&&(d[b+O]=k-L<<24|64<<16|0),p.bits=S,0}},function(t,e,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},function(t,e,r){var n=r(5),o=r(62);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};n(o,i);t.exports=o.locals||{}},function(t,e,r){(e=r(6)(!1)).push([t.i,"/*!\n * Bootstrap v4.6.1 (https://getbootstrap.com/)\n * Copyright 2011-2021 The Bootstrap Authors\n * Copyright 2011-2021 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n */:root{--blue:#007bff;--indigo:#6610f2;--purple:#6f42c1;--pink:#e83e8c;--red:#dc3545;--orange:#fd7e14;--yellow:#ffc107;--green:#28a745;--teal:#20c997;--cyan:#17a2b8;--white:#fff;--gray:#6c757d;--gray-dark:#343a40;--primary:#007bff;--secondary:#6c757d;--success:#28a745;--info:#17a2b8;--warning:#ffc107;--danger:#dc3545;--light:#f8f9fa;--dark:#343a40;--breakpoint-xs:0;--breakpoint-sm:576px;--breakpoint-md:768px;--breakpoint-lg:992px;--breakpoint-xl:1200px;--font-family-sans-serif:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",\"Liberation Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--font-family-monospace:SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace}*,::after,::before{box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:transparent}article,aside,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",\"Liberation Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";font-size:1rem;font-weight:400;line-height:1.5;color:#212529;text-align:left;background-color:#fff}[tabindex=\"-1\"]:focus:not(:focus-visible){outline:0!important}hr{box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem}p{margin-top:0;margin-bottom:1rem}abbr[data-original-title],abbr[title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0;-webkit-text-decoration-skip-ink:none;text-decoration-skip-ink:none}address{margin-bottom:1rem;font-style:normal;line-height:inherit}dl,ol,ul{margin-top:0;margin-bottom:1rem}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#007bff;text-decoration:none;background-color:transparent}a:hover{color:#0056b3;text-decoration:underline}a:not([href]):not([class]){color:inherit;text-decoration:none}a:not([href]):not([class]):hover{color:inherit;text-decoration:none}code,kbd,pre,samp{font-family:SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto;-ms-overflow-style:scrollbar}figure{margin:0 0 1rem}img{vertical-align:middle;border-style:none}svg{overflow:hidden;vertical-align:middle}table{border-collapse:collapse}caption{padding-top:.75rem;padding-bottom:.75rem;color:#6c757d;text-align:left;caption-side:bottom}th{text-align:inherit;text-align:-webkit-match-parent}label{display:inline-block;margin-bottom:.5rem}button{border-radius:0}button:focus:not(:focus-visible){outline:0}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}[role=button]{cursor:pointer}select{word-wrap:normal}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]:not(:disabled),[type=reset]:not(:disabled),[type=submit]:not(:disabled),button:not(:disabled){cursor:pointer}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{padding:0;border-style:none}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:none}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none!important}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{margin-bottom:.5rem;font-weight:500;line-height:1.2}.h1,h1{font-size:2.5rem}.h2,h2{font-size:2rem}.h3,h3{font-size:1.75rem}.h4,h4{font-size:1.5rem}.h5,h5{font-size:1.25rem}.h6,h6{font-size:1rem}.lead{font-size:1.25rem;font-weight:300}.display-1{font-size:6rem;font-weight:300;line-height:1.2}.display-2{font-size:5.5rem;font-weight:300;line-height:1.2}.display-3{font-size:4.5rem;font-weight:300;line-height:1.2}.display-4{font-size:3.5rem;font-weight:300;line-height:1.2}hr{margin-top:1rem;margin-bottom:1rem;border:0;border-top:1px solid rgba(0,0,0,.1)}.small,small{font-size:80%;font-weight:400}.mark,mark{padding:.2em;background-color:#fcf8e3}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:.5rem}.initialism{font-size:90%;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.25rem}.blockquote-footer{display:block;font-size:80%;color:#6c757d}.blockquote-footer::before{content:\"\\2014\\00A0\"}.img-fluid{max-width:100%;height:auto}.img-thumbnail{padding:.25rem;background-color:#fff;border:1px solid #dee2e6;border-radius:.25rem;max-width:100%;height:auto}.figure{display:inline-block}.figure-img{margin-bottom:.5rem;line-height:1}.figure-caption{font-size:90%;color:#6c757d}code{font-size:87.5%;color:#e83e8c;word-wrap:break-word}a>code{color:inherit}kbd{padding:.2rem .4rem;font-size:87.5%;color:#fff;background-color:#212529;border-radius:.2rem}kbd kbd{padding:0;font-size:100%;font-weight:700}pre{display:block;font-size:87.5%;color:#212529}pre code{font-size:inherit;color:inherit;word-break:normal}.pre-scrollable{max-height:340px;overflow-y:scroll}.container,.container-fluid,.container-lg,.container-md,.container-sm,.container-xl{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:576px){.container,.container-sm{max-width:540px}}@media (min-width:768px){.container,.container-md,.container-sm{max-width:720px}}@media (min-width:992px){.container,.container-lg,.container-md,.container-sm{max-width:960px}}@media (min-width:1200px){.container,.container-lg,.container-md,.container-sm,.container-xl{max-width:1140px}}.row{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.no-gutters{margin-right:0;margin-left:0}.no-gutters>.col,.no-gutters>[class*=col-]{padding-right:0;padding-left:0}.col,.col-1,.col-10,.col-11,.col-12,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9,.col-auto,.col-lg,.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-auto,.col-md,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-auto,.col-sm,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-auto,.col-xl,.col-xl-1,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9,.col-xl-auto{position:relative;width:100%;padding-right:15px;padding-left:15px}.col{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.row-cols-1>*{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.row-cols-2>*{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.row-cols-3>*{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.row-cols-4>*{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.row-cols-5>*{-ms-flex:0 0 20%;flex:0 0 20%;max-width:20%}.row-cols-6>*{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-first{-ms-flex-order:-1;order:-1}.order-last{-ms-flex-order:13;order:13}.order-0{-ms-flex-order:0;order:0}.order-1{-ms-flex-order:1;order:1}.order-2{-ms-flex-order:2;order:2}.order-3{-ms-flex-order:3;order:3}.order-4{-ms-flex-order:4;order:4}.order-5{-ms-flex-order:5;order:5}.order-6{-ms-flex-order:6;order:6}.order-7{-ms-flex-order:7;order:7}.order-8{-ms-flex-order:8;order:8}.order-9{-ms-flex-order:9;order:9}.order-10{-ms-flex-order:10;order:10}.order-11{-ms-flex-order:11;order:11}.order-12{-ms-flex-order:12;order:12}.offset-1{margin-left:8.333333%}.offset-2{margin-left:16.666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.333333%}.offset-5{margin-left:41.666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.333333%}.offset-8{margin-left:66.666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.333333%}.offset-11{margin-left:91.666667%}@media (min-width:576px){.col-sm{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.row-cols-sm-1>*{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.row-cols-sm-2>*{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.row-cols-sm-3>*{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.row-cols-sm-4>*{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.row-cols-sm-5>*{-ms-flex:0 0 20%;flex:0 0 20%;max-width:20%}.row-cols-sm-6>*{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-sm-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-sm-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-sm-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-sm-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-sm-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-sm-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-sm-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-sm-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-sm-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-sm-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-sm-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-sm-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-sm-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-sm-first{-ms-flex-order:-1;order:-1}.order-sm-last{-ms-flex-order:13;order:13}.order-sm-0{-ms-flex-order:0;order:0}.order-sm-1{-ms-flex-order:1;order:1}.order-sm-2{-ms-flex-order:2;order:2}.order-sm-3{-ms-flex-order:3;order:3}.order-sm-4{-ms-flex-order:4;order:4}.order-sm-5{-ms-flex-order:5;order:5}.order-sm-6{-ms-flex-order:6;order:6}.order-sm-7{-ms-flex-order:7;order:7}.order-sm-8{-ms-flex-order:8;order:8}.order-sm-9{-ms-flex-order:9;order:9}.order-sm-10{-ms-flex-order:10;order:10}.order-sm-11{-ms-flex-order:11;order:11}.order-sm-12{-ms-flex-order:12;order:12}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.333333%}.offset-sm-2{margin-left:16.666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.333333%}.offset-sm-5{margin-left:41.666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.333333%}.offset-sm-8{margin-left:66.666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.333333%}.offset-sm-11{margin-left:91.666667%}}@media (min-width:768px){.col-md{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.row-cols-md-1>*{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.row-cols-md-2>*{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.row-cols-md-3>*{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.row-cols-md-4>*{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.row-cols-md-5>*{-ms-flex:0 0 20%;flex:0 0 20%;max-width:20%}.row-cols-md-6>*{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-md-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-md-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-md-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-md-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-md-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-md-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-md-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-md-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-md-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-md-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-md-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-md-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-md-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-md-first{-ms-flex-order:-1;order:-1}.order-md-last{-ms-flex-order:13;order:13}.order-md-0{-ms-flex-order:0;order:0}.order-md-1{-ms-flex-order:1;order:1}.order-md-2{-ms-flex-order:2;order:2}.order-md-3{-ms-flex-order:3;order:3}.order-md-4{-ms-flex-order:4;order:4}.order-md-5{-ms-flex-order:5;order:5}.order-md-6{-ms-flex-order:6;order:6}.order-md-7{-ms-flex-order:7;order:7}.order-md-8{-ms-flex-order:8;order:8}.order-md-9{-ms-flex-order:9;order:9}.order-md-10{-ms-flex-order:10;order:10}.order-md-11{-ms-flex-order:11;order:11}.order-md-12{-ms-flex-order:12;order:12}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.333333%}.offset-md-2{margin-left:16.666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.333333%}.offset-md-5{margin-left:41.666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.333333%}.offset-md-8{margin-left:66.666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.333333%}.offset-md-11{margin-left:91.666667%}}@media (min-width:992px){.col-lg{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.row-cols-lg-1>*{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.row-cols-lg-2>*{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.row-cols-lg-3>*{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.row-cols-lg-4>*{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.row-cols-lg-5>*{-ms-flex:0 0 20%;flex:0 0 20%;max-width:20%}.row-cols-lg-6>*{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-lg-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-lg-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-lg-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-lg-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-lg-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-lg-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-lg-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-lg-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-lg-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-lg-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-lg-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-lg-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-lg-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-lg-first{-ms-flex-order:-1;order:-1}.order-lg-last{-ms-flex-order:13;order:13}.order-lg-0{-ms-flex-order:0;order:0}.order-lg-1{-ms-flex-order:1;order:1}.order-lg-2{-ms-flex-order:2;order:2}.order-lg-3{-ms-flex-order:3;order:3}.order-lg-4{-ms-flex-order:4;order:4}.order-lg-5{-ms-flex-order:5;order:5}.order-lg-6{-ms-flex-order:6;order:6}.order-lg-7{-ms-flex-order:7;order:7}.order-lg-8{-ms-flex-order:8;order:8}.order-lg-9{-ms-flex-order:9;order:9}.order-lg-10{-ms-flex-order:10;order:10}.order-lg-11{-ms-flex-order:11;order:11}.order-lg-12{-ms-flex-order:12;order:12}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.333333%}.offset-lg-2{margin-left:16.666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.333333%}.offset-lg-5{margin-left:41.666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.333333%}.offset-lg-8{margin-left:66.666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.333333%}.offset-lg-11{margin-left:91.666667%}}@media (min-width:1200px){.col-xl{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.row-cols-xl-1>*{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.row-cols-xl-2>*{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.row-cols-xl-3>*{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.row-cols-xl-4>*{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.row-cols-xl-5>*{-ms-flex:0 0 20%;flex:0 0 20%;max-width:20%}.row-cols-xl-6>*{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-xl-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-xl-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-xl-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-xl-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-xl-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-xl-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-xl-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-xl-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-xl-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-xl-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-xl-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-xl-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-xl-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-xl-first{-ms-flex-order:-1;order:-1}.order-xl-last{-ms-flex-order:13;order:13}.order-xl-0{-ms-flex-order:0;order:0}.order-xl-1{-ms-flex-order:1;order:1}.order-xl-2{-ms-flex-order:2;order:2}.order-xl-3{-ms-flex-order:3;order:3}.order-xl-4{-ms-flex-order:4;order:4}.order-xl-5{-ms-flex-order:5;order:5}.order-xl-6{-ms-flex-order:6;order:6}.order-xl-7{-ms-flex-order:7;order:7}.order-xl-8{-ms-flex-order:8;order:8}.order-xl-9{-ms-flex-order:9;order:9}.order-xl-10{-ms-flex-order:10;order:10}.order-xl-11{-ms-flex-order:11;order:11}.order-xl-12{-ms-flex-order:12;order:12}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.333333%}.offset-xl-2{margin-left:16.666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.333333%}.offset-xl-5{margin-left:41.666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.333333%}.offset-xl-8{margin-left:66.666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.333333%}.offset-xl-11{margin-left:91.666667%}}.table{width:100%;margin-bottom:1rem;color:#212529}.table td,.table th{padding:.75rem;vertical-align:top;border-top:1px solid #dee2e6}.table thead th{vertical-align:bottom;border-bottom:2px solid #dee2e6}.table tbody+tbody{border-top:2px solid #dee2e6}.table-sm td,.table-sm th{padding:.3rem}.table-bordered{border:1px solid #dee2e6}.table-bordered td,.table-bordered th{border:1px solid #dee2e6}.table-bordered thead td,.table-bordered thead th{border-bottom-width:2px}.table-borderless tbody+tbody,.table-borderless td,.table-borderless th,.table-borderless thead th{border:0}.table-striped tbody tr:nth-of-type(odd){background-color:rgba(0,0,0,.05)}.table-hover tbody tr:hover{color:#212529;background-color:rgba(0,0,0,.075)}.table-primary,.table-primary>td,.table-primary>th{background-color:#b8daff}.table-primary tbody+tbody,.table-primary td,.table-primary th,.table-primary thead th{border-color:#7abaff}.table-hover .table-primary:hover{background-color:#9fcdff}.table-hover .table-primary:hover>td,.table-hover .table-primary:hover>th{background-color:#9fcdff}.table-secondary,.table-secondary>td,.table-secondary>th{background-color:#d6d8db}.table-secondary tbody+tbody,.table-secondary td,.table-secondary th,.table-secondary thead th{border-color:#b3b7bb}.table-hover .table-secondary:hover{background-color:#c8cbcf}.table-hover .table-secondary:hover>td,.table-hover .table-secondary:hover>th{background-color:#c8cbcf}.table-success,.table-success>td,.table-success>th{background-color:#c3e6cb}.table-success tbody+tbody,.table-success td,.table-success th,.table-success thead th{border-color:#8fd19e}.table-hover .table-success:hover{background-color:#b1dfbb}.table-hover .table-success:hover>td,.table-hover .table-success:hover>th{background-color:#b1dfbb}.table-info,.table-info>td,.table-info>th{background-color:#bee5eb}.table-info tbody+tbody,.table-info td,.table-info th,.table-info thead th{border-color:#86cfda}.table-hover .table-info:hover{background-color:#abdde5}.table-hover .table-info:hover>td,.table-hover .table-info:hover>th{background-color:#abdde5}.table-warning,.table-warning>td,.table-warning>th{background-color:#ffeeba}.table-warning tbody+tbody,.table-warning td,.table-warning th,.table-warning thead th{border-color:#ffdf7e}.table-hover .table-warning:hover{background-color:#ffe8a1}.table-hover .table-warning:hover>td,.table-hover .table-warning:hover>th{background-color:#ffe8a1}.table-danger,.table-danger>td,.table-danger>th{background-color:#f5c6cb}.table-danger tbody+tbody,.table-danger td,.table-danger th,.table-danger thead th{border-color:#ed969e}.table-hover .table-danger:hover{background-color:#f1b0b7}.table-hover .table-danger:hover>td,.table-hover .table-danger:hover>th{background-color:#f1b0b7}.table-light,.table-light>td,.table-light>th{background-color:#fdfdfe}.table-light tbody+tbody,.table-light td,.table-light th,.table-light thead th{border-color:#fbfcfc}.table-hover .table-light:hover{background-color:#ececf6}.table-hover .table-light:hover>td,.table-hover .table-light:hover>th{background-color:#ececf6}.table-dark,.table-dark>td,.table-dark>th{background-color:#c6c8ca}.table-dark tbody+tbody,.table-dark td,.table-dark th,.table-dark thead th{border-color:#95999c}.table-hover .table-dark:hover{background-color:#b9bbbe}.table-hover .table-dark:hover>td,.table-hover .table-dark:hover>th{background-color:#b9bbbe}.table-active,.table-active>td,.table-active>th{background-color:rgba(0,0,0,.075)}.table-hover .table-active:hover{background-color:rgba(0,0,0,.075)}.table-hover .table-active:hover>td,.table-hover .table-active:hover>th{background-color:rgba(0,0,0,.075)}.table .thead-dark th{color:#fff;background-color:#343a40;border-color:#454d55}.table .thead-light th{color:#495057;background-color:#e9ecef;border-color:#dee2e6}.table-dark{color:#fff;background-color:#343a40}.table-dark td,.table-dark th,.table-dark thead th{border-color:#454d55}.table-dark.table-bordered{border:0}.table-dark.table-striped tbody tr:nth-of-type(odd){background-color:rgba(255,255,255,.05)}.table-dark.table-hover tbody tr:hover{color:#fff;background-color:rgba(255,255,255,.075)}@media (max-width:575.98px){.table-responsive-sm{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-sm>.table-bordered{border:0}}@media (max-width:767.98px){.table-responsive-md{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-md>.table-bordered{border:0}}@media (max-width:991.98px){.table-responsive-lg{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-lg>.table-bordered{border:0}}@media (max-width:1199.98px){.table-responsive-xl{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-xl>.table-bordered{border:0}}.table-responsive{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive>.table-bordered{border:0}.form-control{display:block;width:100%;height:calc(1.5em + .75rem + 2px);padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:.25rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-control{transition:none}}.form-control::-ms-expand{background-color:transparent;border:0}.form-control:focus{color:#495057;background-color:#fff;border-color:#80bdff;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.form-control::-webkit-input-placeholder{color:#6c757d;opacity:1}.form-control::-moz-placeholder{color:#6c757d;opacity:1}.form-control:-ms-input-placeholder{color:#6c757d;opacity:1}.form-control::-ms-input-placeholder{color:#6c757d;opacity:1}.form-control::placeholder{color:#6c757d;opacity:1}.form-control:disabled,.form-control[readonly]{background-color:#e9ecef;opacity:1}input[type=date].form-control,input[type=datetime-local].form-control,input[type=month].form-control,input[type=time].form-control{-webkit-appearance:none;-moz-appearance:none;appearance:none}select.form-control:-moz-focusring{color:transparent;text-shadow:0 0 0 #495057}select.form-control:focus::-ms-value{color:#495057;background-color:#fff}.form-control-file,.form-control-range{display:block;width:100%}.col-form-label{padding-top:calc(.375rem + 1px);padding-bottom:calc(.375rem + 1px);margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(.5rem + 1px);padding-bottom:calc(.5rem + 1px);font-size:1.25rem;line-height:1.5}.col-form-label-sm{padding-top:calc(.25rem + 1px);padding-bottom:calc(.25rem + 1px);font-size:.875rem;line-height:1.5}.form-control-plaintext{display:block;width:100%;padding:.375rem 0;margin-bottom:0;font-size:1rem;line-height:1.5;color:#212529;background-color:transparent;border:solid transparent;border-width:1px 0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm{padding-right:0;padding-left:0}.form-control-sm{height:calc(1.5em + .5rem + 2px);padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.form-control-lg{height:calc(1.5em + 1rem + 2px);padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}select.form-control[multiple],select.form-control[size]{height:auto}textarea.form-control{height:auto}.form-group{margin-bottom:1rem}.form-text{display:block;margin-top:.25rem}.form-row{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-5px;margin-left:-5px}.form-row>.col,.form-row>[class*=col-]{padding-right:5px;padding-left:5px}.form-check{position:relative;display:block;padding-left:1.25rem}.form-check-input{position:absolute;margin-top:.3rem;margin-left:-1.25rem}.form-check-input:disabled~.form-check-label,.form-check-input[disabled]~.form-check-label{color:#6c757d}.form-check-label{margin-bottom:0}.form-check-inline{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;padding-left:0;margin-right:.75rem}.form-check-inline .form-check-input{position:static;margin-top:0;margin-right:.3125rem;margin-left:0}.valid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#28a745}.valid-tooltip{position:absolute;top:100%;left:0;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;line-height:1.5;color:#fff;background-color:rgba(40,167,69,.9);border-radius:.25rem}.form-row>.col>.valid-tooltip,.form-row>[class*=col-]>.valid-tooltip{left:5px}.is-valid~.valid-feedback,.is-valid~.valid-tooltip,.was-validated :valid~.valid-feedback,.was-validated :valid~.valid-tooltip{display:block}.form-control.is-valid,.was-validated .form-control:valid{border-color:#28a745;padding-right:calc(1.5em + .75rem)!important;background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\");background-repeat:no-repeat;background-position:right calc(.375em + .1875rem) center;background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-valid:focus,.was-validated .form-control:valid:focus{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.was-validated select.form-control:valid,select.form-control.is-valid{padding-right:3rem!important;background-position:right 1.5rem center}.was-validated textarea.form-control:valid,textarea.form-control.is-valid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.custom-select.is-valid,.was-validated .custom-select:valid{border-color:#28a745;padding-right:calc(.75em + 2.3125rem)!important;background:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='4' height='5' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e\") right .75rem center/8px 10px no-repeat,#fff url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\") center right 1.75rem/calc(.75em + .375rem) calc(.75em + .375rem) no-repeat}.custom-select.is-valid:focus,.was-validated .custom-select:valid:focus{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.form-check-input.is-valid~.form-check-label,.was-validated .form-check-input:valid~.form-check-label{color:#28a745}.form-check-input.is-valid~.valid-feedback,.form-check-input.is-valid~.valid-tooltip,.was-validated .form-check-input:valid~.valid-feedback,.was-validated .form-check-input:valid~.valid-tooltip{display:block}.custom-control-input.is-valid~.custom-control-label,.was-validated .custom-control-input:valid~.custom-control-label{color:#28a745}.custom-control-input.is-valid~.custom-control-label::before,.was-validated .custom-control-input:valid~.custom-control-label::before{border-color:#28a745}.custom-control-input.is-valid:checked~.custom-control-label::before,.was-validated .custom-control-input:valid:checked~.custom-control-label::before{border-color:#34ce57;background-color:#34ce57}.custom-control-input.is-valid:focus~.custom-control-label::before,.was-validated .custom-control-input:valid:focus~.custom-control-label::before{box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.custom-control-input.is-valid:focus:not(:checked)~.custom-control-label::before,.was-validated .custom-control-input:valid:focus:not(:checked)~.custom-control-label::before{border-color:#28a745}.custom-file-input.is-valid~.custom-file-label,.was-validated .custom-file-input:valid~.custom-file-label{border-color:#28a745}.custom-file-input.is-valid:focus~.custom-file-label,.was-validated .custom-file-input:valid:focus~.custom-file-label{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.invalid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#dc3545}.invalid-tooltip{position:absolute;top:100%;left:0;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;line-height:1.5;color:#fff;background-color:rgba(220,53,69,.9);border-radius:.25rem}.form-row>.col>.invalid-tooltip,.form-row>[class*=col-]>.invalid-tooltip{left:5px}.is-invalid~.invalid-feedback,.is-invalid~.invalid-tooltip,.was-validated :invalid~.invalid-feedback,.was-validated :invalid~.invalid-tooltip{display:block}.form-control.is-invalid,.was-validated .form-control:invalid{border-color:#dc3545;padding-right:calc(1.5em + .75rem)!important;background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\");background-repeat:no-repeat;background-position:right calc(.375em + .1875rem) center;background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-invalid:focus,.was-validated .form-control:invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.was-validated select.form-control:invalid,select.form-control.is-invalid{padding-right:3rem!important;background-position:right 1.5rem center}.was-validated textarea.form-control:invalid,textarea.form-control.is-invalid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.custom-select.is-invalid,.was-validated .custom-select:invalid{border-color:#dc3545;padding-right:calc(.75em + 2.3125rem)!important;background:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='4' height='5' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e\") right .75rem center/8px 10px no-repeat,#fff url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\") center right 1.75rem/calc(.75em + .375rem) calc(.75em + .375rem) no-repeat}.custom-select.is-invalid:focus,.was-validated .custom-select:invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.form-check-input.is-invalid~.form-check-label,.was-validated .form-check-input:invalid~.form-check-label{color:#dc3545}.form-check-input.is-invalid~.invalid-feedback,.form-check-input.is-invalid~.invalid-tooltip,.was-validated .form-check-input:invalid~.invalid-feedback,.was-validated .form-check-input:invalid~.invalid-tooltip{display:block}.custom-control-input.is-invalid~.custom-control-label,.was-validated .custom-control-input:invalid~.custom-control-label{color:#dc3545}.custom-control-input.is-invalid~.custom-control-label::before,.was-validated .custom-control-input:invalid~.custom-control-label::before{border-color:#dc3545}.custom-control-input.is-invalid:checked~.custom-control-label::before,.was-validated .custom-control-input:invalid:checked~.custom-control-label::before{border-color:#e4606d;background-color:#e4606d}.custom-control-input.is-invalid:focus~.custom-control-label::before,.was-validated .custom-control-input:invalid:focus~.custom-control-label::before{box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.custom-control-input.is-invalid:focus:not(:checked)~.custom-control-label::before,.was-validated .custom-control-input:invalid:focus:not(:checked)~.custom-control-label::before{border-color:#dc3545}.custom-file-input.is-invalid~.custom-file-label,.was-validated .custom-file-input:invalid~.custom-file-label{border-color:#dc3545}.custom-file-input.is-invalid:focus~.custom-file-label,.was-validated .custom-file-input:invalid:focus~.custom-file-label{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.form-inline{display:-ms-flexbox;display:flex;-ms-flex-flow:row wrap;flex-flow:row wrap;-ms-flex-align:center;align-items:center}.form-inline .form-check{width:100%}@media (min-width:576px){.form-inline label{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;margin-bottom:0}.form-inline .form-group{display:-ms-flexbox;display:flex;-ms-flex:0 0 auto;flex:0 0 auto;-ms-flex-flow:row wrap;flex-flow:row wrap;-ms-flex-align:center;align-items:center;margin-bottom:0}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-plaintext{display:inline-block}.form-inline .custom-select,.form-inline .input-group{width:auto}.form-inline .form-check{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:auto;padding-left:0}.form-inline .form-check-input{position:relative;-ms-flex-negative:0;flex-shrink:0;margin-top:0;margin-right:.25rem;margin-left:0}.form-inline .custom-control{-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.form-inline .custom-control-label{margin-bottom:0}}.btn{display:inline-block;font-weight:400;color:#212529;text-align:center;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:transparent;border:1px solid transparent;padding:.375rem .75rem;font-size:1rem;line-height:1.5;border-radius:.25rem;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.btn{transition:none}}.btn:hover{color:#212529;text-decoration:none}.btn.focus,.btn:focus{outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.btn.disabled,.btn:disabled{opacity:.65}.btn:not(:disabled):not(.disabled){cursor:pointer}a.btn.disabled,fieldset:disabled a.btn{pointer-events:none}.btn-primary{color:#fff;background-color:#007bff;border-color:#007bff}.btn-primary:hover{color:#fff;background-color:#0069d9;border-color:#0062cc}.btn-primary.focus,.btn-primary:focus{color:#fff;background-color:#0069d9;border-color:#0062cc;box-shadow:0 0 0 .2rem rgba(38,143,255,.5)}.btn-primary.disabled,.btn-primary:disabled{color:#fff;background-color:#007bff;border-color:#007bff}.btn-primary:not(:disabled):not(.disabled).active,.btn-primary:not(:disabled):not(.disabled):active,.show>.btn-primary.dropdown-toggle{color:#fff;background-color:#0062cc;border-color:#005cbf}.btn-primary:not(:disabled):not(.disabled).active:focus,.btn-primary:not(:disabled):not(.disabled):active:focus,.show>.btn-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(38,143,255,.5)}.btn-secondary{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:hover{color:#fff;background-color:#5a6268;border-color:#545b62}.btn-secondary.focus,.btn-secondary:focus{color:#fff;background-color:#5a6268;border-color:#545b62;box-shadow:0 0 0 .2rem rgba(130,138,145,.5)}.btn-secondary.disabled,.btn-secondary:disabled{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:not(:disabled):not(.disabled).active,.btn-secondary:not(:disabled):not(.disabled):active,.show>.btn-secondary.dropdown-toggle{color:#fff;background-color:#545b62;border-color:#4e555b}.btn-secondary:not(:disabled):not(.disabled).active:focus,.btn-secondary:not(:disabled):not(.disabled):active:focus,.show>.btn-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(130,138,145,.5)}.btn-success{color:#fff;background-color:#28a745;border-color:#28a745}.btn-success:hover{color:#fff;background-color:#218838;border-color:#1e7e34}.btn-success.focus,.btn-success:focus{color:#fff;background-color:#218838;border-color:#1e7e34;box-shadow:0 0 0 .2rem rgba(72,180,97,.5)}.btn-success.disabled,.btn-success:disabled{color:#fff;background-color:#28a745;border-color:#28a745}.btn-success:not(:disabled):not(.disabled).active,.btn-success:not(:disabled):not(.disabled):active,.show>.btn-success.dropdown-toggle{color:#fff;background-color:#1e7e34;border-color:#1c7430}.btn-success:not(:disabled):not(.disabled).active:focus,.btn-success:not(:disabled):not(.disabled):active:focus,.show>.btn-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(72,180,97,.5)}.btn-info{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:hover{color:#fff;background-color:#138496;border-color:#117a8b}.btn-info.focus,.btn-info:focus{color:#fff;background-color:#138496;border-color:#117a8b;box-shadow:0 0 0 .2rem rgba(58,176,195,.5)}.btn-info.disabled,.btn-info:disabled{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:not(:disabled):not(.disabled).active,.btn-info:not(:disabled):not(.disabled):active,.show>.btn-info.dropdown-toggle{color:#fff;background-color:#117a8b;border-color:#10707f}.btn-info:not(:disabled):not(.disabled).active:focus,.btn-info:not(:disabled):not(.disabled):active:focus,.show>.btn-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(58,176,195,.5)}.btn-warning{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-warning:hover{color:#212529;background-color:#e0a800;border-color:#d39e00}.btn-warning.focus,.btn-warning:focus{color:#212529;background-color:#e0a800;border-color:#d39e00;box-shadow:0 0 0 .2rem rgba(222,170,12,.5)}.btn-warning.disabled,.btn-warning:disabled{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-warning:not(:disabled):not(.disabled).active,.btn-warning:not(:disabled):not(.disabled):active,.show>.btn-warning.dropdown-toggle{color:#212529;background-color:#d39e00;border-color:#c69500}.btn-warning:not(:disabled):not(.disabled).active:focus,.btn-warning:not(:disabled):not(.disabled):active:focus,.show>.btn-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(222,170,12,.5)}.btn-danger{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-danger:hover{color:#fff;background-color:#c82333;border-color:#bd2130}.btn-danger.focus,.btn-danger:focus{color:#fff;background-color:#c82333;border-color:#bd2130;box-shadow:0 0 0 .2rem rgba(225,83,97,.5)}.btn-danger.disabled,.btn-danger:disabled{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-danger:not(:disabled):not(.disabled).active,.btn-danger:not(:disabled):not(.disabled):active,.show>.btn-danger.dropdown-toggle{color:#fff;background-color:#bd2130;border-color:#b21f2d}.btn-danger:not(:disabled):not(.disabled).active:focus,.btn-danger:not(:disabled):not(.disabled):active:focus,.show>.btn-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(225,83,97,.5)}.btn-light{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:hover{color:#212529;background-color:#e2e6ea;border-color:#dae0e5}.btn-light.focus,.btn-light:focus{color:#212529;background-color:#e2e6ea;border-color:#dae0e5;box-shadow:0 0 0 .2rem rgba(216,217,219,.5)}.btn-light.disabled,.btn-light:disabled{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:not(:disabled):not(.disabled).active,.btn-light:not(:disabled):not(.disabled):active,.show>.btn-light.dropdown-toggle{color:#212529;background-color:#dae0e5;border-color:#d3d9df}.btn-light:not(:disabled):not(.disabled).active:focus,.btn-light:not(:disabled):not(.disabled):active:focus,.show>.btn-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(216,217,219,.5)}.btn-dark{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:hover{color:#fff;background-color:#23272b;border-color:#1d2124}.btn-dark.focus,.btn-dark:focus{color:#fff;background-color:#23272b;border-color:#1d2124;box-shadow:0 0 0 .2rem rgba(82,88,93,.5)}.btn-dark.disabled,.btn-dark:disabled{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:not(:disabled):not(.disabled).active,.btn-dark:not(:disabled):not(.disabled):active,.show>.btn-dark.dropdown-toggle{color:#fff;background-color:#1d2124;border-color:#171a1d}.btn-dark:not(:disabled):not(.disabled).active:focus,.btn-dark:not(:disabled):not(.disabled):active:focus,.show>.btn-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(82,88,93,.5)}.btn-outline-primary{color:#007bff;border-color:#007bff}.btn-outline-primary:hover{color:#fff;background-color:#007bff;border-color:#007bff}.btn-outline-primary.focus,.btn-outline-primary:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-outline-primary.disabled,.btn-outline-primary:disabled{color:#007bff;background-color:transparent}.btn-outline-primary:not(:disabled):not(.disabled).active,.btn-outline-primary:not(:disabled):not(.disabled):active,.show>.btn-outline-primary.dropdown-toggle{color:#fff;background-color:#007bff;border-color:#007bff}.btn-outline-primary:not(:disabled):not(.disabled).active:focus,.btn-outline-primary:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-outline-secondary{color:#6c757d;border-color:#6c757d}.btn-outline-secondary:hover{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-secondary.focus,.btn-outline-secondary:focus{box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.btn-outline-secondary.disabled,.btn-outline-secondary:disabled{color:#6c757d;background-color:transparent}.btn-outline-secondary:not(:disabled):not(.disabled).active,.btn-outline-secondary:not(:disabled):not(.disabled):active,.show>.btn-outline-secondary.dropdown-toggle{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-secondary:not(:disabled):not(.disabled).active:focus,.btn-outline-secondary:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.btn-outline-success{color:#28a745;border-color:#28a745}.btn-outline-success:hover{color:#fff;background-color:#28a745;border-color:#28a745}.btn-outline-success.focus,.btn-outline-success:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-outline-success.disabled,.btn-outline-success:disabled{color:#28a745;background-color:transparent}.btn-outline-success:not(:disabled):not(.disabled).active,.btn-outline-success:not(:disabled):not(.disabled):active,.show>.btn-outline-success.dropdown-toggle{color:#fff;background-color:#28a745;border-color:#28a745}.btn-outline-success:not(:disabled):not(.disabled).active:focus,.btn-outline-success:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-outline-info{color:#17a2b8;border-color:#17a2b8}.btn-outline-info:hover{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info.focus,.btn-outline-info:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-outline-info.disabled,.btn-outline-info:disabled{color:#17a2b8;background-color:transparent}.btn-outline-info:not(:disabled):not(.disabled).active,.btn-outline-info:not(:disabled):not(.disabled):active,.show>.btn-outline-info.dropdown-toggle{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info:not(:disabled):not(.disabled).active:focus,.btn-outline-info:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-outline-warning{color:#ffc107;border-color:#ffc107}.btn-outline-warning:hover{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-outline-warning.focus,.btn-outline-warning:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-outline-warning.disabled,.btn-outline-warning:disabled{color:#ffc107;background-color:transparent}.btn-outline-warning:not(:disabled):not(.disabled).active,.btn-outline-warning:not(:disabled):not(.disabled):active,.show>.btn-outline-warning.dropdown-toggle{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-outline-warning:not(:disabled):not(.disabled).active:focus,.btn-outline-warning:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-outline-danger{color:#dc3545;border-color:#dc3545}.btn-outline-danger:hover{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-outline-danger.focus,.btn-outline-danger:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-outline-danger.disabled,.btn-outline-danger:disabled{color:#dc3545;background-color:transparent}.btn-outline-danger:not(:disabled):not(.disabled).active,.btn-outline-danger:not(:disabled):not(.disabled):active,.show>.btn-outline-danger.dropdown-toggle{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-outline-danger:not(:disabled):not(.disabled).active:focus,.btn-outline-danger:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-outline-light{color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:hover{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light.focus,.btn-outline-light:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-light.disabled,.btn-outline-light:disabled{color:#f8f9fa;background-color:transparent}.btn-outline-light:not(:disabled):not(.disabled).active,.btn-outline-light:not(:disabled):not(.disabled):active,.show>.btn-outline-light.dropdown-toggle{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:not(:disabled):not(.disabled).active:focus,.btn-outline-light:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-dark{color:#343a40;border-color:#343a40}.btn-outline-dark:hover{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark.focus,.btn-outline-dark:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-outline-dark.disabled,.btn-outline-dark:disabled{color:#343a40;background-color:transparent}.btn-outline-dark:not(:disabled):not(.disabled).active,.btn-outline-dark:not(:disabled):not(.disabled):active,.show>.btn-outline-dark.dropdown-toggle{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark:not(:disabled):not(.disabled).active:focus,.btn-outline-dark:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-link{font-weight:400;color:#007bff;text-decoration:none}.btn-link:hover{color:#0056b3;text-decoration:underline}.btn-link.focus,.btn-link:focus{text-decoration:underline}.btn-link.disabled,.btn-link:disabled{color:#6c757d;pointer-events:none}.btn-group-lg>.btn,.btn-lg{padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.btn-group-sm>.btn,.btn-sm{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:.5rem}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{transition:opacity .15s linear}@media (prefers-reduced-motion:reduce){.fade{transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{position:relative;height:0;overflow:hidden;transition:height .35s ease}@media (prefers-reduced-motion:reduce){.collapsing{transition:none}}.dropdown,.dropleft,.dropright,.dropup{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty::after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-menu-left{right:auto;left:0}.dropdown-menu-right{right:0;left:auto}@media (min-width:576px){.dropdown-menu-sm-left{right:auto;left:0}.dropdown-menu-sm-right{right:0;left:auto}}@media (min-width:768px){.dropdown-menu-md-left{right:auto;left:0}.dropdown-menu-md-right{right:0;left:auto}}@media (min-width:992px){.dropdown-menu-lg-left{right:auto;left:0}.dropdown-menu-lg-right{right:0;left:auto}}@media (min-width:1200px){.dropdown-menu-xl-left{right:auto;left:0}.dropdown-menu-xl-right{right:0;left:auto}}.dropup .dropdown-menu{top:auto;bottom:100%;margin-top:0;margin-bottom:.125rem}.dropup .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty::after{margin-left:0}.dropright .dropdown-menu{top:0;right:auto;left:100%;margin-top:0;margin-left:.125rem}.dropright .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright .dropdown-toggle:empty::after{margin-left:0}.dropright .dropdown-toggle::after{vertical-align:0}.dropleft .dropdown-menu{top:0;right:100%;left:auto;margin-top:0;margin-right:.125rem}.dropleft .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\"}.dropleft .dropdown-toggle::after{display:none}.dropleft .dropdown-toggle::before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft .dropdown-toggle:empty::after{margin-left:0}.dropleft .dropdown-toggle::before{vertical-align:0}.dropdown-menu[x-placement^=bottom],.dropdown-menu[x-placement^=left],.dropdown-menu[x-placement^=right],.dropdown-menu[x-placement^=top]{right:auto;bottom:auto}.dropdown-divider{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:focus,.dropdown-item:hover{color:#16181b;text-decoration:none;background-color:#e9ecef}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#007bff}.dropdown-item.disabled,.dropdown-item:disabled{color:#adb5bd;pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.875rem;color:#6c757d;white-space:nowrap}.dropdown-item-text{display:block;padding:.25rem 1.5rem;color:#212529}.btn-group,.btn-group-vertical{position:relative;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;-ms-flex:1 1 auto;flex:1 1 auto}.btn-group-vertical>.btn:hover,.btn-group>.btn:hover{z-index:1}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus{z-index:1}.btn-toolbar{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:start;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group>.btn-group:not(:first-child),.btn-group>.btn:not(:first-child){margin-left:-1px}.btn-group>.btn-group:not(:last-child)>.btn,.btn-group>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:not(:first-child)>.btn,.btn-group>.btn:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:.5625rem;padding-left:.5625rem}.dropdown-toggle-split::after,.dropright .dropdown-toggle-split::after,.dropup .dropdown-toggle-split::after{margin-left:0}.dropleft .dropdown-toggle-split::before{margin-right:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-right:.375rem;padding-left:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-right:.75rem;padding-left:.75rem}.btn-group-vertical{-ms-flex-direction:column;flex-direction:column;-ms-flex-align:start;align-items:flex-start;-ms-flex-pack:center;justify-content:center}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group{width:100%}.btn-group-vertical>.btn-group:not(:first-child),.btn-group-vertical>.btn:not(:first-child){margin-top:-1px}.btn-group-vertical>.btn-group:not(:last-child)>.btn,.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child)>.btn,.btn-group-vertical>.btn:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.btn-group-toggle>.btn,.btn-group-toggle>.btn-group>.btn{margin-bottom:0}.btn-group-toggle>.btn input[type=checkbox],.btn-group-toggle>.btn input[type=radio],.btn-group-toggle>.btn-group>.btn input[type=checkbox],.btn-group-toggle>.btn-group>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:stretch;align-items:stretch;width:100%}.input-group>.custom-file,.input-group>.custom-select,.input-group>.form-control,.input-group>.form-control-plaintext{position:relative;-ms-flex:1 1 auto;flex:1 1 auto;width:1%;min-width:0;margin-bottom:0}.input-group>.custom-file+.custom-file,.input-group>.custom-file+.custom-select,.input-group>.custom-file+.form-control,.input-group>.custom-select+.custom-file,.input-group>.custom-select+.custom-select,.input-group>.custom-select+.form-control,.input-group>.form-control+.custom-file,.input-group>.form-control+.custom-select,.input-group>.form-control+.form-control,.input-group>.form-control-plaintext+.custom-file,.input-group>.form-control-plaintext+.custom-select,.input-group>.form-control-plaintext+.form-control{margin-left:-1px}.input-group>.custom-file .custom-file-input:focus~.custom-file-label,.input-group>.custom-select:focus,.input-group>.form-control:focus{z-index:3}.input-group>.custom-file .custom-file-input:focus{z-index:4}.input-group>.custom-select:not(:first-child),.input-group>.form-control:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.input-group>.custom-file{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.input-group>.custom-file:not(:last-child) .custom-file-label,.input-group>.custom-file:not(:last-child) .custom-file-label::after{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.custom-file:not(:first-child) .custom-file-label{border-top-left-radius:0;border-bottom-left-radius:0}.input-group:not(.has-validation)>.custom-file:not(:last-child) .custom-file-label,.input-group:not(.has-validation)>.custom-file:not(:last-child) .custom-file-label::after,.input-group:not(.has-validation)>.custom-select:not(:last-child),.input-group:not(.has-validation)>.form-control:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group.has-validation>.custom-file:nth-last-child(n+3) .custom-file-label,.input-group.has-validation>.custom-file:nth-last-child(n+3) .custom-file-label::after,.input-group.has-validation>.custom-select:nth-last-child(n+3),.input-group.has-validation>.form-control:nth-last-child(n+3){border-top-right-radius:0;border-bottom-right-radius:0}.input-group-append,.input-group-prepend{display:-ms-flexbox;display:flex}.input-group-append .btn,.input-group-prepend .btn{position:relative;z-index:2}.input-group-append .btn:focus,.input-group-prepend .btn:focus{z-index:3}.input-group-append .btn+.btn,.input-group-append .btn+.input-group-text,.input-group-append .input-group-text+.btn,.input-group-append .input-group-text+.input-group-text,.input-group-prepend .btn+.btn,.input-group-prepend .btn+.input-group-text,.input-group-prepend .input-group-text+.btn,.input-group-prepend .input-group-text+.input-group-text{margin-left:-1px}.input-group-prepend{margin-right:-1px}.input-group-append{margin-left:-1px}.input-group-text{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;padding:.375rem .75rem;margin-bottom:0;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;text-align:center;white-space:nowrap;background-color:#e9ecef;border:1px solid #ced4da;border-radius:.25rem}.input-group-text input[type=checkbox],.input-group-text input[type=radio]{margin-top:0}.input-group-lg>.custom-select,.input-group-lg>.form-control:not(textarea){height:calc(1.5em + 1rem + 2px)}.input-group-lg>.custom-select,.input-group-lg>.form-control,.input-group-lg>.input-group-append>.btn,.input-group-lg>.input-group-append>.input-group-text,.input-group-lg>.input-group-prepend>.btn,.input-group-lg>.input-group-prepend>.input-group-text{padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.input-group-sm>.custom-select,.input-group-sm>.form-control:not(textarea){height:calc(1.5em + .5rem + 2px)}.input-group-sm>.custom-select,.input-group-sm>.form-control,.input-group-sm>.input-group-append>.btn,.input-group-sm>.input-group-append>.input-group-text,.input-group-sm>.input-group-prepend>.btn,.input-group-sm>.input-group-prepend>.input-group-text{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.input-group-lg>.custom-select,.input-group-sm>.custom-select{padding-right:1.75rem}.input-group.has-validation>.input-group-append:nth-last-child(n+3)>.btn,.input-group.has-validation>.input-group-append:nth-last-child(n+3)>.input-group-text,.input-group:not(.has-validation)>.input-group-append:not(:last-child)>.btn,.input-group:not(.has-validation)>.input-group-append:not(:last-child)>.input-group-text,.input-group>.input-group-append:last-child>.btn:not(:last-child):not(.dropdown-toggle),.input-group>.input-group-append:last-child>.input-group-text:not(:last-child),.input-group>.input-group-prepend>.btn,.input-group>.input-group-prepend>.input-group-text{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.input-group-append>.btn,.input-group>.input-group-append>.input-group-text,.input-group>.input-group-prepend:first-child>.btn:not(:first-child),.input-group>.input-group-prepend:first-child>.input-group-text:not(:first-child),.input-group>.input-group-prepend:not(:first-child)>.btn,.input-group>.input-group-prepend:not(:first-child)>.input-group-text{border-top-left-radius:0;border-bottom-left-radius:0}.custom-control{position:relative;z-index:1;display:block;min-height:1.5rem;padding-left:1.5rem;-webkit-print-color-adjust:exact;color-adjust:exact}.custom-control-inline{display:-ms-inline-flexbox;display:inline-flex;margin-right:1rem}.custom-control-input{position:absolute;left:0;z-index:-1;width:1rem;height:1.25rem;opacity:0}.custom-control-input:checked~.custom-control-label::before{color:#fff;border-color:#007bff;background-color:#007bff}.custom-control-input:focus~.custom-control-label::before{box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-control-input:focus:not(:checked)~.custom-control-label::before{border-color:#80bdff}.custom-control-input:not(:disabled):active~.custom-control-label::before{color:#fff;background-color:#b3d7ff;border-color:#b3d7ff}.custom-control-input:disabled~.custom-control-label,.custom-control-input[disabled]~.custom-control-label{color:#6c757d}.custom-control-input:disabled~.custom-control-label::before,.custom-control-input[disabled]~.custom-control-label::before{background-color:#e9ecef}.custom-control-label{position:relative;margin-bottom:0;vertical-align:top}.custom-control-label::before{position:absolute;top:.25rem;left:-1.5rem;display:block;width:1rem;height:1rem;pointer-events:none;content:\"\";background-color:#fff;border:#adb5bd solid 1px}.custom-control-label::after{position:absolute;top:.25rem;left:-1.5rem;display:block;width:1rem;height:1rem;content:\"\";background:50%/50% 50% no-repeat}.custom-checkbox .custom-control-label::before{border-radius:.25rem}.custom-checkbox .custom-control-input:checked~.custom-control-label::after{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/%3e%3c/svg%3e\")}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label::before{border-color:#007bff;background-color:#007bff}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label::after{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='4' height='4' viewBox='0 0 4 4'%3e%3cpath stroke='%23fff' d='M0 2h4'/%3e%3c/svg%3e\")}.custom-checkbox .custom-control-input:disabled:checked~.custom-control-label::before{background-color:rgba(0,123,255,.5)}.custom-checkbox .custom-control-input:disabled:indeterminate~.custom-control-label::before{background-color:rgba(0,123,255,.5)}.custom-radio .custom-control-label::before{border-radius:50%}.custom-radio .custom-control-input:checked~.custom-control-label::after{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e\")}.custom-radio .custom-control-input:disabled:checked~.custom-control-label::before{background-color:rgba(0,123,255,.5)}.custom-switch{padding-left:2.25rem}.custom-switch .custom-control-label::before{left:-2.25rem;width:1.75rem;pointer-events:all;border-radius:.5rem}.custom-switch .custom-control-label::after{top:calc(.25rem + 2px);left:calc(-2.25rem + 2px);width:calc(1rem - 4px);height:calc(1rem - 4px);background-color:#adb5bd;border-radius:.5rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-transform .15s ease-in-out;transition:transform .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:transform .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-transform .15s ease-in-out}@media (prefers-reduced-motion:reduce){.custom-switch .custom-control-label::after{transition:none}}.custom-switch .custom-control-input:checked~.custom-control-label::after{background-color:#fff;-webkit-transform:translateX(.75rem);transform:translateX(.75rem)}.custom-switch .custom-control-input:disabled:checked~.custom-control-label::before{background-color:rgba(0,123,255,.5)}.custom-select{display:inline-block;width:100%;height:calc(1.5em + .75rem + 2px);padding:.375rem 1.75rem .375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;vertical-align:middle;background:#fff url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='4' height='5' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e\") right .75rem center/8px 10px no-repeat;border:1px solid #ced4da;border-radius:.25rem;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-select:focus{border-color:#80bdff;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-select:focus::-ms-value{color:#495057;background-color:#fff}.custom-select[multiple],.custom-select[size]:not([size=\"1\"]){height:auto;padding-right:.75rem;background-image:none}.custom-select:disabled{color:#6c757d;background-color:#e9ecef}.custom-select::-ms-expand{display:none}.custom-select:-moz-focusring{color:transparent;text-shadow:0 0 0 #495057}.custom-select-sm{height:calc(1.5em + .5rem + 2px);padding-top:.25rem;padding-bottom:.25rem;padding-left:.5rem;font-size:.875rem}.custom-select-lg{height:calc(1.5em + 1rem + 2px);padding-top:.5rem;padding-bottom:.5rem;padding-left:1rem;font-size:1.25rem}.custom-file{position:relative;display:inline-block;width:100%;height:calc(1.5em + .75rem + 2px);margin-bottom:0}.custom-file-input{position:relative;z-index:2;width:100%;height:calc(1.5em + .75rem + 2px);margin:0;overflow:hidden;opacity:0}.custom-file-input:focus~.custom-file-label{border-color:#80bdff;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-file-input:disabled~.custom-file-label,.custom-file-input[disabled]~.custom-file-label{background-color:#e9ecef}.custom-file-input:lang(en)~.custom-file-label::after{content:\"Browse\"}.custom-file-input~.custom-file-label[data-browse]::after{content:attr(data-browse)}.custom-file-label{position:absolute;top:0;right:0;left:0;z-index:1;height:calc(1.5em + .75rem + 2px);padding:.375rem .75rem;overflow:hidden;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;border:1px solid #ced4da;border-radius:.25rem}.custom-file-label::after{position:absolute;top:0;right:0;bottom:0;z-index:3;display:block;height:calc(1.5em + .75rem);padding:.375rem .75rem;line-height:1.5;color:#495057;content:\"Browse\";background-color:#e9ecef;border-left:inherit;border-radius:0 .25rem .25rem 0}.custom-range{width:100%;height:1.4rem;padding:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-range:focus{outline:0}.custom-range:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-range:focus::-ms-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-range::-moz-focus-outer{border:0}.custom-range::-webkit-slider-thumb{width:1rem;height:1rem;margin-top:-.25rem;background-color:#007bff;border:0;border-radius:1rem;-webkit-transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;-webkit-appearance:none;appearance:none}@media (prefers-reduced-motion:reduce){.custom-range::-webkit-slider-thumb{-webkit-transition:none;transition:none}}.custom-range::-webkit-slider-thumb:active{background-color:#b3d7ff}.custom-range::-webkit-slider-runnable-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.custom-range::-moz-range-thumb{width:1rem;height:1rem;background-color:#007bff;border:0;border-radius:1rem;-moz-transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;-moz-appearance:none;appearance:none}@media (prefers-reduced-motion:reduce){.custom-range::-moz-range-thumb{-moz-transition:none;transition:none}}.custom-range::-moz-range-thumb:active{background-color:#b3d7ff}.custom-range::-moz-range-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.custom-range::-ms-thumb{width:1rem;height:1rem;margin-top:0;margin-right:.2rem;margin-left:.2rem;background-color:#007bff;border:0;border-radius:1rem;-ms-transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;appearance:none}@media (prefers-reduced-motion:reduce){.custom-range::-ms-thumb{-ms-transition:none;transition:none}}.custom-range::-ms-thumb:active{background-color:#b3d7ff}.custom-range::-ms-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:transparent;border-color:transparent;border-width:.5rem}.custom-range::-ms-fill-lower{background-color:#dee2e6;border-radius:1rem}.custom-range::-ms-fill-upper{margin-right:15px;background-color:#dee2e6;border-radius:1rem}.custom-range:disabled::-webkit-slider-thumb{background-color:#adb5bd}.custom-range:disabled::-webkit-slider-runnable-track{cursor:default}.custom-range:disabled::-moz-range-thumb{background-color:#adb5bd}.custom-range:disabled::-moz-range-track{cursor:default}.custom-range:disabled::-ms-thumb{background-color:#adb5bd}.custom-control-label::before,.custom-file-label,.custom-select{transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.custom-control-label::before,.custom-file-label,.custom-select{transition:none}}.nav{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:.5rem 1rem}.nav-link:focus,.nav-link:hover{text-decoration:none}.nav-link.disabled{color:#6c757d;pointer-events:none;cursor:default}.nav-tabs{border-bottom:1px solid #dee2e6}.nav-tabs .nav-link{margin-bottom:-1px;border:1px solid transparent;border-top-left-radius:.25rem;border-top-right-radius:.25rem}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{border-color:#e9ecef #e9ecef #dee2e6}.nav-tabs .nav-link.disabled{color:#6c757d;background-color:transparent;border-color:transparent}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{color:#495057;background-color:#fff;border-color:#dee2e6 #dee2e6 #fff}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.nav-pills .nav-link{border-radius:.25rem}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{color:#fff;background-color:#007bff}.nav-fill .nav-item,.nav-fill>.nav-link{-ms-flex:1 1 auto;flex:1 1 auto;text-align:center}.nav-justified .nav-item,.nav-justified>.nav-link{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;text-align:center}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{position:relative;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between;padding:.5rem 1rem}.navbar .container,.navbar .container-fluid,.navbar .container-lg,.navbar .container-md,.navbar .container-sm,.navbar .container-xl{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}.navbar-brand{display:inline-block;padding-top:.3125rem;padding-bottom:.3125rem;margin-right:1rem;font-size:1.25rem;line-height:inherit;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-nav{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link{padding-right:0;padding-left:0}.navbar-nav .dropdown-menu{position:static;float:none}.navbar-text{display:inline-block;padding-top:.5rem;padding-bottom:.5rem}.navbar-collapse{-ms-flex-preferred-size:100%;flex-basis:100%;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center}.navbar-toggler{padding:.25rem .75rem;font-size:1.25rem;line-height:1;background-color:transparent;border:1px solid transparent;border-radius:.25rem}.navbar-toggler:focus,.navbar-toggler:hover{text-decoration:none}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;content:\"\";background:50%/100% 100% no-repeat}.navbar-nav-scroll{max-height:75vh;overflow-y:auto}@media (max-width:575.98px){.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid,.navbar-expand-sm>.container-lg,.navbar-expand-sm>.container-md,.navbar-expand-sm>.container-sm,.navbar-expand-sm>.container-xl{padding-right:0;padding-left:0}}@media (min-width:576px){.navbar-expand-sm{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-sm .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid,.navbar-expand-sm>.container-lg,.navbar-expand-sm>.container-md,.navbar-expand-sm>.container-sm,.navbar-expand-sm>.container-xl{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-sm .navbar-nav-scroll{overflow:visible}.navbar-expand-sm .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}}@media (max-width:767.98px){.navbar-expand-md>.container,.navbar-expand-md>.container-fluid,.navbar-expand-md>.container-lg,.navbar-expand-md>.container-md,.navbar-expand-md>.container-sm,.navbar-expand-md>.container-xl{padding-right:0;padding-left:0}}@media (min-width:768px){.navbar-expand-md{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-md .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-md>.container,.navbar-expand-md>.container-fluid,.navbar-expand-md>.container-lg,.navbar-expand-md>.container-md,.navbar-expand-md>.container-sm,.navbar-expand-md>.container-xl{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-md .navbar-nav-scroll{overflow:visible}.navbar-expand-md .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}}@media (max-width:991.98px){.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid,.navbar-expand-lg>.container-lg,.navbar-expand-lg>.container-md,.navbar-expand-lg>.container-sm,.navbar-expand-lg>.container-xl{padding-right:0;padding-left:0}}@media (min-width:992px){.navbar-expand-lg{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-lg .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid,.navbar-expand-lg>.container-lg,.navbar-expand-lg>.container-md,.navbar-expand-lg>.container-sm,.navbar-expand-lg>.container-xl{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-lg .navbar-nav-scroll{overflow:visible}.navbar-expand-lg .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}}@media (max-width:1199.98px){.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid,.navbar-expand-xl>.container-lg,.navbar-expand-xl>.container-md,.navbar-expand-xl>.container-sm,.navbar-expand-xl>.container-xl{padding-right:0;padding-left:0}}@media (min-width:1200px){.navbar-expand-xl{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-xl .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid,.navbar-expand-xl>.container-lg,.navbar-expand-xl>.container-md,.navbar-expand-xl>.container-sm,.navbar-expand-xl>.container-xl{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-xl .navbar-nav-scroll{overflow:visible}.navbar-expand-xl .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}}.navbar-expand{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand>.container,.navbar-expand>.container-fluid,.navbar-expand>.container-lg,.navbar-expand>.container-md,.navbar-expand>.container-sm,.navbar-expand>.container-xl{padding-right:0;padding-left:0}.navbar-expand .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand>.container,.navbar-expand>.container-fluid,.navbar-expand>.container-lg,.navbar-expand>.container-md,.navbar-expand>.container-sm,.navbar-expand>.container-xl{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand .navbar-nav-scroll{overflow:visible}.navbar-expand .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-light .navbar-brand{color:rgba(0,0,0,.9)}.navbar-light .navbar-brand:focus,.navbar-light .navbar-brand:hover{color:rgba(0,0,0,.9)}.navbar-light .navbar-nav .nav-link{color:rgba(0,0,0,.5)}.navbar-light .navbar-nav .nav-link:focus,.navbar-light .navbar-nav .nav-link:hover{color:rgba(0,0,0,.7)}.navbar-light .navbar-nav .nav-link.disabled{color:rgba(0,0,0,.3)}.navbar-light .navbar-nav .active>.nav-link,.navbar-light .navbar-nav .nav-link.active,.navbar-light .navbar-nav .nav-link.show,.navbar-light .navbar-nav .show>.nav-link{color:rgba(0,0,0,.9)}.navbar-light .navbar-toggler{color:rgba(0,0,0,.5);border-color:rgba(0,0,0,.1)}.navbar-light .navbar-toggler-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%280, 0, 0, 0.5%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\")}.navbar-light .navbar-text{color:rgba(0,0,0,.5)}.navbar-light .navbar-text a{color:rgba(0,0,0,.9)}.navbar-light .navbar-text a:focus,.navbar-light .navbar-text a:hover{color:rgba(0,0,0,.9)}.navbar-dark .navbar-brand{color:#fff}.navbar-dark .navbar-brand:focus,.navbar-dark .navbar-brand:hover{color:#fff}.navbar-dark .navbar-nav .nav-link{color:rgba(255,255,255,.5)}.navbar-dark .navbar-nav .nav-link:focus,.navbar-dark .navbar-nav .nav-link:hover{color:rgba(255,255,255,.75)}.navbar-dark .navbar-nav .nav-link.disabled{color:rgba(255,255,255,.25)}.navbar-dark .navbar-nav .active>.nav-link,.navbar-dark .navbar-nav .nav-link.active,.navbar-dark .navbar-nav .nav-link.show,.navbar-dark .navbar-nav .show>.nav-link{color:#fff}.navbar-dark .navbar-toggler{color:rgba(255,255,255,.5);border-color:rgba(255,255,255,.1)}.navbar-dark .navbar-toggler-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.5%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\")}.navbar-dark .navbar-text{color:rgba(255,255,255,.5)}.navbar-dark .navbar-text a{color:#fff}.navbar-dark .navbar-text a:focus,.navbar-dark .navbar-text a:hover{color:#fff}.card{position:relative;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#fff;background-clip:border-box;border:1px solid rgba(0,0,0,.125);border-radius:.25rem}.card>hr{margin-right:0;margin-left:0}.card>.list-group{border-top:inherit;border-bottom:inherit}.card>.list-group:first-child{border-top-width:0;border-top-left-radius:calc(.25rem - 1px);border-top-right-radius:calc(.25rem - 1px)}.card>.list-group:last-child{border-bottom-width:0;border-bottom-right-radius:calc(.25rem - 1px);border-bottom-left-radius:calc(.25rem - 1px)}.card>.card-header+.list-group,.card>.list-group+.card-footer{border-top:0}.card-body{-ms-flex:1 1 auto;flex:1 1 auto;min-height:1px;padding:1.25rem}.card-title{margin-bottom:.75rem}.card-subtitle{margin-top:-.375rem;margin-bottom:0}.card-text:last-child{margin-bottom:0}.card-link:hover{text-decoration:none}.card-link+.card-link{margin-left:1.25rem}.card-header{padding:.75rem 1.25rem;margin-bottom:0;background-color:rgba(0,0,0,.03);border-bottom:1px solid rgba(0,0,0,.125)}.card-header:first-child{border-radius:calc(.25rem - 1px) calc(.25rem - 1px) 0 0}.card-footer{padding:.75rem 1.25rem;background-color:rgba(0,0,0,.03);border-top:1px solid rgba(0,0,0,.125)}.card-footer:last-child{border-radius:0 0 calc(.25rem - 1px) calc(.25rem - 1px)}.card-header-tabs{margin-right:-.625rem;margin-bottom:-.75rem;margin-left:-.625rem;border-bottom:0}.card-header-pills{margin-right:-.625rem;margin-left:-.625rem}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:1.25rem;border-radius:calc(.25rem - 1px)}.card-img,.card-img-bottom,.card-img-top{-ms-flex-negative:0;flex-shrink:0;width:100%}.card-img,.card-img-top{border-top-left-radius:calc(.25rem - 1px);border-top-right-radius:calc(.25rem - 1px)}.card-img,.card-img-bottom{border-bottom-right-radius:calc(.25rem - 1px);border-bottom-left-radius:calc(.25rem - 1px)}.card-deck .card{margin-bottom:15px}@media (min-width:576px){.card-deck{display:-ms-flexbox;display:flex;-ms-flex-flow:row wrap;flex-flow:row wrap;margin-right:-15px;margin-left:-15px}.card-deck .card{-ms-flex:1 0 0%;flex:1 0 0%;margin-right:15px;margin-bottom:0;margin-left:15px}}.card-group>.card{margin-bottom:15px}@media (min-width:576px){.card-group{display:-ms-flexbox;display:flex;-ms-flex-flow:row wrap;flex-flow:row wrap}.card-group>.card{-ms-flex:1 0 0%;flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{margin-left:0;border-left:0}.card-group>.card:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.card-group>.card:not(:last-child) .card-header,.card-group>.card:not(:last-child) .card-img-top{border-top-right-radius:0}.card-group>.card:not(:last-child) .card-footer,.card-group>.card:not(:last-child) .card-img-bottom{border-bottom-right-radius:0}.card-group>.card:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.card-group>.card:not(:first-child) .card-header,.card-group>.card:not(:first-child) .card-img-top{border-top-left-radius:0}.card-group>.card:not(:first-child) .card-footer,.card-group>.card:not(:first-child) .card-img-bottom{border-bottom-left-radius:0}}.card-columns .card{margin-bottom:.75rem}@media (min-width:576px){.card-columns{-webkit-column-count:3;-moz-column-count:3;column-count:3;-webkit-column-gap:1.25rem;-moz-column-gap:1.25rem;column-gap:1.25rem;orphans:1;widows:1}.card-columns .card{display:inline-block;width:100%}}.accordion{overflow-anchor:none}.accordion>.card{overflow:hidden}.accordion>.card:not(:last-of-type){border-bottom:0;border-bottom-right-radius:0;border-bottom-left-radius:0}.accordion>.card:not(:first-of-type){border-top-left-radius:0;border-top-right-radius:0}.accordion>.card>.card-header{border-radius:0;margin-bottom:-1px}.breadcrumb{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:.75rem 1rem;margin-bottom:1rem;list-style:none;background-color:#e9ecef;border-radius:.25rem}.breadcrumb-item+.breadcrumb-item{padding-left:.5rem}.breadcrumb-item+.breadcrumb-item::before{float:left;padding-right:.5rem;color:#6c757d;content:\"/\"}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:underline}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:none}.breadcrumb-item.active{color:#6c757d}.pagination{display:-ms-flexbox;display:flex;padding-left:0;list-style:none;border-radius:.25rem}.page-link{position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#007bff;background-color:#fff;border:1px solid #dee2e6}.page-link:hover{z-index:2;color:#0056b3;text-decoration:none;background-color:#e9ecef;border-color:#dee2e6}.page-link:focus{z-index:3;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.page-item:first-child .page-link{margin-left:0;border-top-left-radius:.25rem;border-bottom-left-radius:.25rem}.page-item:last-child .page-link{border-top-right-radius:.25rem;border-bottom-right-radius:.25rem}.page-item.active .page-link{z-index:3;color:#fff;background-color:#007bff;border-color:#007bff}.page-item.disabled .page-link{color:#6c757d;pointer-events:none;cursor:auto;background-color:#fff;border-color:#dee2e6}.pagination-lg .page-link{padding:.75rem 1.5rem;font-size:1.25rem;line-height:1.5}.pagination-lg .page-item:first-child .page-link{border-top-left-radius:.3rem;border-bottom-left-radius:.3rem}.pagination-lg .page-item:last-child .page-link{border-top-right-radius:.3rem;border-bottom-right-radius:.3rem}.pagination-sm .page-link{padding:.25rem .5rem;font-size:.875rem;line-height:1.5}.pagination-sm .page-item:first-child .page-link{border-top-left-radius:.2rem;border-bottom-left-radius:.2rem}.pagination-sm .page-item:last-child .page-link{border-top-right-radius:.2rem;border-bottom-right-radius:.2rem}.badge{display:inline-block;padding:.25em .4em;font-size:75%;font-weight:700;line-height:1;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25rem;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.badge{transition:none}}a.badge:focus,a.badge:hover{text-decoration:none}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.badge-pill{padding-right:.6em;padding-left:.6em;border-radius:10rem}.badge-primary{color:#fff;background-color:#007bff}a.badge-primary:focus,a.badge-primary:hover{color:#fff;background-color:#0062cc}a.badge-primary.focus,a.badge-primary:focus{outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.badge-secondary{color:#fff;background-color:#6c757d}a.badge-secondary:focus,a.badge-secondary:hover{color:#fff;background-color:#545b62}a.badge-secondary.focus,a.badge-secondary:focus{outline:0;box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.badge-success{color:#fff;background-color:#28a745}a.badge-success:focus,a.badge-success:hover{color:#fff;background-color:#1e7e34}a.badge-success.focus,a.badge-success:focus{outline:0;box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.badge-info{color:#fff;background-color:#17a2b8}a.badge-info:focus,a.badge-info:hover{color:#fff;background-color:#117a8b}a.badge-info.focus,a.badge-info:focus{outline:0;box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.badge-warning{color:#212529;background-color:#ffc107}a.badge-warning:focus,a.badge-warning:hover{color:#212529;background-color:#d39e00}a.badge-warning.focus,a.badge-warning:focus{outline:0;box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.badge-danger{color:#fff;background-color:#dc3545}a.badge-danger:focus,a.badge-danger:hover{color:#fff;background-color:#bd2130}a.badge-danger.focus,a.badge-danger:focus{outline:0;box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.badge-light{color:#212529;background-color:#f8f9fa}a.badge-light:focus,a.badge-light:hover{color:#212529;background-color:#dae0e5}a.badge-light.focus,a.badge-light:focus{outline:0;box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.badge-dark{color:#fff;background-color:#343a40}a.badge-dark:focus,a.badge-dark:hover{color:#fff;background-color:#1d2124}a.badge-dark.focus,a.badge-dark:focus{outline:0;box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.jumbotron{padding:2rem 1rem;margin-bottom:2rem;background-color:#e9ecef;border-radius:.3rem}@media (min-width:576px){.jumbotron{padding:4rem 2rem}}.jumbotron-fluid{padding-right:0;padding-left:0;border-radius:0}.alert{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.alert-heading{color:inherit}.alert-link{font-weight:700}.alert-dismissible{padding-right:4rem}.alert-dismissible .close{position:absolute;top:0;right:0;z-index:2;padding:.75rem 1.25rem;color:inherit}.alert-primary{color:#004085;background-color:#cce5ff;border-color:#b8daff}.alert-primary hr{border-top-color:#9fcdff}.alert-primary .alert-link{color:#002752}.alert-secondary{color:#383d41;background-color:#e2e3e5;border-color:#d6d8db}.alert-secondary hr{border-top-color:#c8cbcf}.alert-secondary .alert-link{color:#202326}.alert-success{color:#155724;background-color:#d4edda;border-color:#c3e6cb}.alert-success hr{border-top-color:#b1dfbb}.alert-success .alert-link{color:#0b2e13}.alert-info{color:#0c5460;background-color:#d1ecf1;border-color:#bee5eb}.alert-info hr{border-top-color:#abdde5}.alert-info .alert-link{color:#062c33}.alert-warning{color:#856404;background-color:#fff3cd;border-color:#ffeeba}.alert-warning hr{border-top-color:#ffe8a1}.alert-warning .alert-link{color:#533f03}.alert-danger{color:#721c24;background-color:#f8d7da;border-color:#f5c6cb}.alert-danger hr{border-top-color:#f1b0b7}.alert-danger .alert-link{color:#491217}.alert-light{color:#818182;background-color:#fefefe;border-color:#fdfdfe}.alert-light hr{border-top-color:#ececf6}.alert-light .alert-link{color:#686868}.alert-dark{color:#1b1e21;background-color:#d6d8d9;border-color:#c6c8ca}.alert-dark hr{border-top-color:#b9bbbe}.alert-dark .alert-link{color:#040505}@-webkit-keyframes progress-bar-stripes{from{background-position:1rem 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:1rem 0}to{background-position:0 0}}.progress{display:-ms-flexbox;display:flex;height:1rem;overflow:hidden;line-height:0;font-size:.75rem;background-color:#e9ecef;border-radius:.25rem}.progress-bar{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;overflow:hidden;color:#fff;text-align:center;white-space:nowrap;background-color:#007bff;transition:width .6s ease}@media (prefers-reduced-motion:reduce){.progress-bar{transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-size:1rem 1rem}.progress-bar-animated{-webkit-animation:1s linear infinite progress-bar-stripes;animation:1s linear infinite progress-bar-stripes}@media (prefers-reduced-motion:reduce){.progress-bar-animated{-webkit-animation:none;animation:none}}.media{display:-ms-flexbox;display:flex;-ms-flex-align:start;align-items:flex-start}.media-body{-ms-flex:1;flex:1}.list-group{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0;border-radius:.25rem}.list-group-item-action{width:100%;color:#495057;text-align:inherit}.list-group-item-action:focus,.list-group-item-action:hover{z-index:1;color:#495057;text-decoration:none;background-color:#f8f9fa}.list-group-item-action:active{color:#212529;background-color:#e9ecef}.list-group-item{position:relative;display:block;padding:.75rem 1.25rem;background-color:#fff;border:1px solid rgba(0,0,0,.125)}.list-group-item:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.list-group-item:last-child{border-bottom-right-radius:inherit;border-bottom-left-radius:inherit}.list-group-item.disabled,.list-group-item:disabled{color:#6c757d;pointer-events:none;background-color:#fff}.list-group-item.active{z-index:2;color:#fff;background-color:#007bff;border-color:#007bff}.list-group-item+.list-group-item{border-top-width:0}.list-group-item+.list-group-item.active{margin-top:-1px;border-top-width:1px}.list-group-horizontal{-ms-flex-direction:row;flex-direction:row}.list-group-horizontal>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal>.list-group-item.active{margin-top:0}.list-group-horizontal>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}@media (min-width:576px){.list-group-horizontal-sm{-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-sm>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-sm>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal-sm>.list-group-item.active{margin-top:0}.list-group-horizontal-sm>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal-sm>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}}@media (min-width:768px){.list-group-horizontal-md{-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-md>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-md>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal-md>.list-group-item.active{margin-top:0}.list-group-horizontal-md>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal-md>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}}@media (min-width:992px){.list-group-horizontal-lg{-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-lg>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-lg>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal-lg>.list-group-item.active{margin-top:0}.list-group-horizontal-lg>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal-lg>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}}@media (min-width:1200px){.list-group-horizontal-xl{-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-xl>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-xl>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal-xl>.list-group-item.active{margin-top:0}.list-group-horizontal-xl>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal-xl>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}}.list-group-flush{border-radius:0}.list-group-flush>.list-group-item{border-width:0 0 1px}.list-group-flush>.list-group-item:last-child{border-bottom-width:0}.list-group-item-primary{color:#004085;background-color:#b8daff}.list-group-item-primary.list-group-item-action:focus,.list-group-item-primary.list-group-item-action:hover{color:#004085;background-color:#9fcdff}.list-group-item-primary.list-group-item-action.active{color:#fff;background-color:#004085;border-color:#004085}.list-group-item-secondary{color:#383d41;background-color:#d6d8db}.list-group-item-secondary.list-group-item-action:focus,.list-group-item-secondary.list-group-item-action:hover{color:#383d41;background-color:#c8cbcf}.list-group-item-secondary.list-group-item-action.active{color:#fff;background-color:#383d41;border-color:#383d41}.list-group-item-success{color:#155724;background-color:#c3e6cb}.list-group-item-success.list-group-item-action:focus,.list-group-item-success.list-group-item-action:hover{color:#155724;background-color:#b1dfbb}.list-group-item-success.list-group-item-action.active{color:#fff;background-color:#155724;border-color:#155724}.list-group-item-info{color:#0c5460;background-color:#bee5eb}.list-group-item-info.list-group-item-action:focus,.list-group-item-info.list-group-item-action:hover{color:#0c5460;background-color:#abdde5}.list-group-item-info.list-group-item-action.active{color:#fff;background-color:#0c5460;border-color:#0c5460}.list-group-item-warning{color:#856404;background-color:#ffeeba}.list-group-item-warning.list-group-item-action:focus,.list-group-item-warning.list-group-item-action:hover{color:#856404;background-color:#ffe8a1}.list-group-item-warning.list-group-item-action.active{color:#fff;background-color:#856404;border-color:#856404}.list-group-item-danger{color:#721c24;background-color:#f5c6cb}.list-group-item-danger.list-group-item-action:focus,.list-group-item-danger.list-group-item-action:hover{color:#721c24;background-color:#f1b0b7}.list-group-item-danger.list-group-item-action.active{color:#fff;background-color:#721c24;border-color:#721c24}.list-group-item-light{color:#818182;background-color:#fdfdfe}.list-group-item-light.list-group-item-action:focus,.list-group-item-light.list-group-item-action:hover{color:#818182;background-color:#ececf6}.list-group-item-light.list-group-item-action.active{color:#fff;background-color:#818182;border-color:#818182}.list-group-item-dark{color:#1b1e21;background-color:#c6c8ca}.list-group-item-dark.list-group-item-action:focus,.list-group-item-dark.list-group-item-action:hover{color:#1b1e21;background-color:#b9bbbe}.list-group-item-dark.list-group-item-action.active{color:#fff;background-color:#1b1e21;border-color:#1b1e21}.close{float:right;font-size:1.5rem;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.5}.close:hover{color:#000;text-decoration:none}.close:not(:disabled):not(.disabled):focus,.close:not(:disabled):not(.disabled):hover{opacity:.75}button.close{padding:0;background-color:transparent;border:0}a.close.disabled{pointer-events:none}.toast{-ms-flex-preferred-size:350px;flex-basis:350px;max-width:350px;font-size:.875rem;background-color:rgba(255,255,255,.85);background-clip:padding-box;border:1px solid rgba(0,0,0,.1);box-shadow:0 .25rem .75rem rgba(0,0,0,.1);opacity:0;border-radius:.25rem}.toast:not(:last-child){margin-bottom:.75rem}.toast.showing{opacity:1}.toast.show{display:block;opacity:1}.toast.hide{display:none}.toast-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;padding:.25rem .75rem;color:#6c757d;background-color:rgba(255,255,255,.85);background-clip:padding-box;border-bottom:1px solid rgba(0,0,0,.05);border-top-left-radius:calc(.25rem - 1px);border-top-right-radius:calc(.25rem - 1px)}.toast-body{padding:.75rem}.modal-open{overflow:hidden}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal{position:fixed;top:0;left:0;z-index:1050;display:none;width:100%;height:100%;overflow:hidden;outline:0}.modal-dialog{position:relative;width:auto;margin:.5rem;pointer-events:none}.modal.fade .modal-dialog{transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out;transition:transform .3s ease-out,-webkit-transform .3s ease-out;-webkit-transform:translate(0,-50px);transform:translate(0,-50px)}@media (prefers-reduced-motion:reduce){.modal.fade .modal-dialog{transition:none}}.modal.show .modal-dialog{-webkit-transform:none;transform:none}.modal.modal-static .modal-dialog{-webkit-transform:scale(1.02);transform:scale(1.02)}.modal-dialog-scrollable{display:-ms-flexbox;display:flex;max-height:calc(100% - 1rem)}.modal-dialog-scrollable .modal-content{max-height:calc(100vh - 1rem);overflow:hidden}.modal-dialog-scrollable .modal-footer,.modal-dialog-scrollable .modal-header{-ms-flex-negative:0;flex-shrink:0}.modal-dialog-scrollable .modal-body{overflow-y:auto}.modal-dialog-centered{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;min-height:calc(100% - 1rem)}.modal-dialog-centered::before{display:block;height:calc(100vh - 1rem);height:-webkit-min-content;height:-moz-min-content;height:min-content;content:\"\"}.modal-dialog-centered.modal-dialog-scrollable{-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.modal-dialog-centered.modal-dialog-scrollable .modal-content{max-height:none}.modal-dialog-centered.modal-dialog-scrollable::before{content:none}.modal-content{position:relative;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;width:100%;pointer-events:auto;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem;outline:0}.modal-backdrop{position:fixed;top:0;left:0;z-index:1040;width:100vw;height:100vh;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:.5}.modal-header{display:-ms-flexbox;display:flex;-ms-flex-align:start;align-items:flex-start;-ms-flex-pack:justify;justify-content:space-between;padding:1rem 1rem;border-bottom:1px solid #dee2e6;border-top-left-radius:calc(.3rem - 1px);border-top-right-radius:calc(.3rem - 1px)}.modal-header .close{padding:1rem 1rem;margin:-1rem -1rem -1rem auto}.modal-title{margin-bottom:0;line-height:1.5}.modal-body{position:relative;-ms-flex:1 1 auto;flex:1 1 auto;padding:1rem}.modal-footer{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:end;justify-content:flex-end;padding:.75rem;border-top:1px solid #dee2e6;border-bottom-right-radius:calc(.3rem - 1px);border-bottom-left-radius:calc(.3rem - 1px)}.modal-footer>*{margin:.25rem}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:576px){.modal-dialog{max-width:500px;margin:1.75rem auto}.modal-dialog-scrollable{max-height:calc(100% - 3.5rem)}.modal-dialog-scrollable .modal-content{max-height:calc(100vh - 3.5rem)}.modal-dialog-centered{min-height:calc(100% - 3.5rem)}.modal-dialog-centered::before{height:calc(100vh - 3.5rem);height:-webkit-min-content;height:-moz-min-content;height:min-content}.modal-sm{max-width:300px}}@media (min-width:992px){.modal-lg,.modal-xl{max-width:800px}}@media (min-width:1200px){.modal-xl{max-width:1140px}}.tooltip{position:absolute;z-index:1070;display:block;margin:0;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",\"Liberation Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;opacity:0}.tooltip.show{opacity:.9}.tooltip .arrow{position:absolute;display:block;width:.8rem;height:.4rem}.tooltip .arrow::before{position:absolute;content:\"\";border-color:transparent;border-style:solid}.bs-tooltip-auto[x-placement^=top],.bs-tooltip-top{padding:.4rem 0}.bs-tooltip-auto[x-placement^=top] .arrow,.bs-tooltip-top .arrow{bottom:0}.bs-tooltip-auto[x-placement^=top] .arrow::before,.bs-tooltip-top .arrow::before{top:0;border-width:.4rem .4rem 0;border-top-color:#000}.bs-tooltip-auto[x-placement^=right],.bs-tooltip-right{padding:0 .4rem}.bs-tooltip-auto[x-placement^=right] .arrow,.bs-tooltip-right .arrow{left:0;width:.4rem;height:.8rem}.bs-tooltip-auto[x-placement^=right] .arrow::before,.bs-tooltip-right .arrow::before{right:0;border-width:.4rem .4rem .4rem 0;border-right-color:#000}.bs-tooltip-auto[x-placement^=bottom],.bs-tooltip-bottom{padding:.4rem 0}.bs-tooltip-auto[x-placement^=bottom] .arrow,.bs-tooltip-bottom .arrow{top:0}.bs-tooltip-auto[x-placement^=bottom] .arrow::before,.bs-tooltip-bottom .arrow::before{bottom:0;border-width:0 .4rem .4rem;border-bottom-color:#000}.bs-tooltip-auto[x-placement^=left],.bs-tooltip-left{padding:0 .4rem}.bs-tooltip-auto[x-placement^=left] .arrow,.bs-tooltip-left .arrow{right:0;width:.4rem;height:.8rem}.bs-tooltip-auto[x-placement^=left] .arrow::before,.bs-tooltip-left .arrow::before{left:0;border-width:.4rem 0 .4rem .4rem;border-left-color:#000}.tooltip-inner{max-width:200px;padding:.25rem .5rem;color:#fff;text-align:center;background-color:#000;border-radius:.25rem}.popover{position:absolute;top:0;left:0;z-index:1060;display:block;max-width:276px;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",\"Liberation Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem}.popover .arrow{position:absolute;display:block;width:1rem;height:.5rem;margin:0 .3rem}.popover .arrow::after,.popover .arrow::before{position:absolute;display:block;content:\"\";border-color:transparent;border-style:solid}.bs-popover-auto[x-placement^=top],.bs-popover-top{margin-bottom:.5rem}.bs-popover-auto[x-placement^=top]>.arrow,.bs-popover-top>.arrow{bottom:calc(-.5rem - 1px)}.bs-popover-auto[x-placement^=top]>.arrow::before,.bs-popover-top>.arrow::before{bottom:0;border-width:.5rem .5rem 0;border-top-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=top]>.arrow::after,.bs-popover-top>.arrow::after{bottom:1px;border-width:.5rem .5rem 0;border-top-color:#fff}.bs-popover-auto[x-placement^=right],.bs-popover-right{margin-left:.5rem}.bs-popover-auto[x-placement^=right]>.arrow,.bs-popover-right>.arrow{left:calc(-.5rem - 1px);width:.5rem;height:1rem;margin:.3rem 0}.bs-popover-auto[x-placement^=right]>.arrow::before,.bs-popover-right>.arrow::before{left:0;border-width:.5rem .5rem .5rem 0;border-right-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=right]>.arrow::after,.bs-popover-right>.arrow::after{left:1px;border-width:.5rem .5rem .5rem 0;border-right-color:#fff}.bs-popover-auto[x-placement^=bottom],.bs-popover-bottom{margin-top:.5rem}.bs-popover-auto[x-placement^=bottom]>.arrow,.bs-popover-bottom>.arrow{top:calc(-.5rem - 1px)}.bs-popover-auto[x-placement^=bottom]>.arrow::before,.bs-popover-bottom>.arrow::before{top:0;border-width:0 .5rem .5rem .5rem;border-bottom-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=bottom]>.arrow::after,.bs-popover-bottom>.arrow::after{top:1px;border-width:0 .5rem .5rem .5rem;border-bottom-color:#fff}.bs-popover-auto[x-placement^=bottom] .popover-header::before,.bs-popover-bottom .popover-header::before{position:absolute;top:0;left:50%;display:block;width:1rem;margin-left:-.5rem;content:\"\";border-bottom:1px solid #f7f7f7}.bs-popover-auto[x-placement^=left],.bs-popover-left{margin-right:.5rem}.bs-popover-auto[x-placement^=left]>.arrow,.bs-popover-left>.arrow{right:calc(-.5rem - 1px);width:.5rem;height:1rem;margin:.3rem 0}.bs-popover-auto[x-placement^=left]>.arrow::before,.bs-popover-left>.arrow::before{right:0;border-width:.5rem 0 .5rem .5rem;border-left-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=left]>.arrow::after,.bs-popover-left>.arrow::after{right:1px;border-width:.5rem 0 .5rem .5rem;border-left-color:#fff}.popover-header{padding:.5rem .75rem;margin-bottom:0;font-size:1rem;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-top-left-radius:calc(.3rem - 1px);border-top-right-radius:calc(.3rem - 1px)}.popover-header:empty{display:none}.popover-body{padding:.5rem .75rem;color:#212529}.carousel{position:relative}.carousel.pointer-event{-ms-touch-action:pan-y;touch-action:pan-y}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner::after{display:block;clear:both;content:\"\"}.carousel-item{position:relative;display:none;float:left;width:100%;margin-right:-100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;transition:-webkit-transform .6s ease-in-out;transition:transform .6s ease-in-out;transition:transform .6s ease-in-out,-webkit-transform .6s ease-in-out}@media (prefers-reduced-motion:reduce){.carousel-item{transition:none}}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block}.active.carousel-item-right,.carousel-item-next:not(.carousel-item-left){-webkit-transform:translateX(100%);transform:translateX(100%)}.active.carousel-item-left,.carousel-item-prev:not(.carousel-item-right){-webkit-transform:translateX(-100%);transform:translateX(-100%)}.carousel-fade .carousel-item{opacity:0;transition-property:opacity;-webkit-transform:none;transform:none}.carousel-fade .carousel-item-next.carousel-item-left,.carousel-fade .carousel-item-prev.carousel-item-right,.carousel-fade .carousel-item.active{z-index:1;opacity:1}.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-right{z-index:0;opacity:0;transition:opacity 0s .6s}@media (prefers-reduced-motion:reduce){.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-right{transition:none}}.carousel-control-next,.carousel-control-prev{position:absolute;top:0;bottom:0;z-index:1;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:15%;padding:0;color:#fff;text-align:center;background:0 0;border:0;opacity:.5;transition:opacity .15s ease}@media (prefers-reduced-motion:reduce){.carousel-control-next,.carousel-control-prev{transition:none}}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{display:inline-block;width:20px;height:20px;background:50%/100% 100% no-repeat}.carousel-control-prev-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath d='M5.25 0l-4 4 4 4 1.5-1.5L4.25 4l2.5-2.5L5.25 0z'/%3e%3c/svg%3e\")}.carousel-control-next-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath d='M2.75 0l-1.5 1.5L3.75 4l-2.5 2.5L2.75 8l4-4-4-4z'/%3e%3c/svg%3e\")}.carousel-indicators{position:absolute;right:0;bottom:0;left:0;z-index:15;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;padding-left:0;margin-right:15%;margin-left:15%;list-style:none}.carousel-indicators li{box-sizing:content-box;-ms-flex:0 1 auto;flex:0 1 auto;width:30px;height:3px;margin-right:3px;margin-left:3px;text-indent:-999px;cursor:pointer;background-color:#fff;background-clip:padding-box;border-top:10px solid transparent;border-bottom:10px solid transparent;opacity:.5;transition:opacity .6s ease}@media (prefers-reduced-motion:reduce){.carousel-indicators li{transition:none}}.carousel-indicators .active{opacity:1}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center}@-webkit-keyframes spinner-border{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spinner-border{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.spinner-border{display:inline-block;width:2rem;height:2rem;vertical-align:-.125em;border:.25em solid currentColor;border-right-color:transparent;border-radius:50%;-webkit-animation:.75s linear infinite spinner-border;animation:.75s linear infinite spinner-border}.spinner-border-sm{width:1rem;height:1rem;border-width:.2em}@-webkit-keyframes spinner-grow{0%{-webkit-transform:scale(0);transform:scale(0)}50%{opacity:1;-webkit-transform:none;transform:none}}@keyframes spinner-grow{0%{-webkit-transform:scale(0);transform:scale(0)}50%{opacity:1;-webkit-transform:none;transform:none}}.spinner-grow{display:inline-block;width:2rem;height:2rem;vertical-align:-.125em;background-color:currentColor;border-radius:50%;opacity:0;-webkit-animation:.75s linear infinite spinner-grow;animation:.75s linear infinite spinner-grow}.spinner-grow-sm{width:1rem;height:1rem}@media (prefers-reduced-motion:reduce){.spinner-border,.spinner-grow{-webkit-animation-duration:1.5s;animation-duration:1.5s}}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.bg-primary{background-color:#007bff!important}a.bg-primary:focus,a.bg-primary:hover,button.bg-primary:focus,button.bg-primary:hover{background-color:#0062cc!important}.bg-secondary{background-color:#6c757d!important}a.bg-secondary:focus,a.bg-secondary:hover,button.bg-secondary:focus,button.bg-secondary:hover{background-color:#545b62!important}.bg-success{background-color:#28a745!important}a.bg-success:focus,a.bg-success:hover,button.bg-success:focus,button.bg-success:hover{background-color:#1e7e34!important}.bg-info{background-color:#17a2b8!important}a.bg-info:focus,a.bg-info:hover,button.bg-info:focus,button.bg-info:hover{background-color:#117a8b!important}.bg-warning{background-color:#ffc107!important}a.bg-warning:focus,a.bg-warning:hover,button.bg-warning:focus,button.bg-warning:hover{background-color:#d39e00!important}.bg-danger{background-color:#dc3545!important}a.bg-danger:focus,a.bg-danger:hover,button.bg-danger:focus,button.bg-danger:hover{background-color:#bd2130!important}.bg-light{background-color:#f8f9fa!important}a.bg-light:focus,a.bg-light:hover,button.bg-light:focus,button.bg-light:hover{background-color:#dae0e5!important}.bg-dark{background-color:#343a40!important}a.bg-dark:focus,a.bg-dark:hover,button.bg-dark:focus,button.bg-dark:hover{background-color:#1d2124!important}.bg-white{background-color:#fff!important}.bg-transparent{background-color:transparent!important}.border{border:1px solid #dee2e6!important}.border-top{border-top:1px solid #dee2e6!important}.border-right{border-right:1px solid #dee2e6!important}.border-bottom{border-bottom:1px solid #dee2e6!important}.border-left{border-left:1px solid #dee2e6!important}.border-0{border:0!important}.border-top-0{border-top:0!important}.border-right-0{border-right:0!important}.border-bottom-0{border-bottom:0!important}.border-left-0{border-left:0!important}.border-primary{border-color:#007bff!important}.border-secondary{border-color:#6c757d!important}.border-success{border-color:#28a745!important}.border-info{border-color:#17a2b8!important}.border-warning{border-color:#ffc107!important}.border-danger{border-color:#dc3545!important}.border-light{border-color:#f8f9fa!important}.border-dark{border-color:#343a40!important}.border-white{border-color:#fff!important}.rounded-sm{border-radius:.2rem!important}.rounded{border-radius:.25rem!important}.rounded-top{border-top-left-radius:.25rem!important;border-top-right-radius:.25rem!important}.rounded-right{border-top-right-radius:.25rem!important;border-bottom-right-radius:.25rem!important}.rounded-bottom{border-bottom-right-radius:.25rem!important;border-bottom-left-radius:.25rem!important}.rounded-left{border-top-left-radius:.25rem!important;border-bottom-left-radius:.25rem!important}.rounded-lg{border-radius:.3rem!important}.rounded-circle{border-radius:50%!important}.rounded-pill{border-radius:50rem!important}.rounded-0{border-radius:0!important}.clearfix::after{display:block;clear:both;content:\"\"}.d-none{display:none!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-table{display:table!important}.d-table-row{display:table-row!important}.d-table-cell{display:table-cell!important}.d-flex{display:-ms-flexbox!important;display:flex!important}.d-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}@media (min-width:576px){.d-sm-none{display:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-table{display:table!important}.d-sm-table-row{display:table-row!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:-ms-flexbox!important;display:flex!important}.d-sm-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:768px){.d-md-none{display:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-table{display:table!important}.d-md-table-row{display:table-row!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:-ms-flexbox!important;display:flex!important}.d-md-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:992px){.d-lg-none{display:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-table{display:table!important}.d-lg-table-row{display:table-row!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:-ms-flexbox!important;display:flex!important}.d-lg-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:1200px){.d-xl-none{display:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-table{display:table!important}.d-xl-table-row{display:table-row!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:-ms-flexbox!important;display:flex!important}.d-xl-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media print{.d-print-none{display:none!important}.d-print-inline{display:inline!important}.d-print-inline-block{display:inline-block!important}.d-print-block{display:block!important}.d-print-table{display:table!important}.d-print-table-row{display:table-row!important}.d-print-table-cell{display:table-cell!important}.d-print-flex{display:-ms-flexbox!important;display:flex!important}.d-print-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}.embed-responsive{position:relative;display:block;width:100%;padding:0;overflow:hidden}.embed-responsive::before{display:block;content:\"\"}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-21by9::before{padding-top:42.857143%}.embed-responsive-16by9::before{padding-top:56.25%}.embed-responsive-4by3::before{padding-top:75%}.embed-responsive-1by1::before{padding-top:100%}.flex-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.flex-fill{-ms-flex:1 1 auto!important;flex:1 1 auto!important}.flex-grow-0{-ms-flex-positive:0!important;flex-grow:0!important}.flex-grow-1{-ms-flex-positive:1!important;flex-grow:1!important}.flex-shrink-0{-ms-flex-negative:0!important;flex-shrink:0!important}.flex-shrink-1{-ms-flex-negative:1!important;flex-shrink:1!important}.justify-content-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-center{-ms-flex-align:center!important;align-items:center!important}.align-items-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}@media (min-width:576px){.flex-sm-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-sm-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-sm-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-sm-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-sm-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-sm-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-sm-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.flex-sm-fill{-ms-flex:1 1 auto!important;flex:1 1 auto!important}.flex-sm-grow-0{-ms-flex-positive:0!important;flex-grow:0!important}.flex-sm-grow-1{-ms-flex-positive:1!important;flex-grow:1!important}.flex-sm-shrink-0{-ms-flex-negative:0!important;flex-shrink:0!important}.flex-sm-shrink-1{-ms-flex-negative:1!important;flex-shrink:1!important}.justify-content-sm-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-sm-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-sm-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-sm-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-sm-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-sm-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-sm-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-sm-center{-ms-flex-align:center!important;align-items:center!important}.align-items-sm-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-sm-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-sm-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-sm-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-sm-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-sm-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-sm-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-sm-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-sm-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-sm-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-sm-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-sm-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-sm-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-sm-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:768px){.flex-md-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-md-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-md-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-md-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-md-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-md-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-md-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.flex-md-fill{-ms-flex:1 1 auto!important;flex:1 1 auto!important}.flex-md-grow-0{-ms-flex-positive:0!important;flex-grow:0!important}.flex-md-grow-1{-ms-flex-positive:1!important;flex-grow:1!important}.flex-md-shrink-0{-ms-flex-negative:0!important;flex-shrink:0!important}.flex-md-shrink-1{-ms-flex-negative:1!important;flex-shrink:1!important}.justify-content-md-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-md-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-md-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-md-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-md-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-md-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-md-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-md-center{-ms-flex-align:center!important;align-items:center!important}.align-items-md-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-md-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-md-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-md-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-md-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-md-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-md-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-md-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-md-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-md-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-md-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-md-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-md-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-md-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:992px){.flex-lg-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-lg-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-lg-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-lg-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-lg-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-lg-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-lg-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.flex-lg-fill{-ms-flex:1 1 auto!important;flex:1 1 auto!important}.flex-lg-grow-0{-ms-flex-positive:0!important;flex-grow:0!important}.flex-lg-grow-1{-ms-flex-positive:1!important;flex-grow:1!important}.flex-lg-shrink-0{-ms-flex-negative:0!important;flex-shrink:0!important}.flex-lg-shrink-1{-ms-flex-negative:1!important;flex-shrink:1!important}.justify-content-lg-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-lg-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-lg-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-lg-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-lg-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-lg-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-lg-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-lg-center{-ms-flex-align:center!important;align-items:center!important}.align-items-lg-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-lg-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-lg-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-lg-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-lg-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-lg-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-lg-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-lg-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-lg-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-lg-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-lg-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-lg-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-lg-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-lg-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:1200px){.flex-xl-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-xl-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-xl-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-xl-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-xl-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-xl-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-xl-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.flex-xl-fill{-ms-flex:1 1 auto!important;flex:1 1 auto!important}.flex-xl-grow-0{-ms-flex-positive:0!important;flex-grow:0!important}.flex-xl-grow-1{-ms-flex-positive:1!important;flex-grow:1!important}.flex-xl-shrink-0{-ms-flex-negative:0!important;flex-shrink:0!important}.flex-xl-shrink-1{-ms-flex-negative:1!important;flex-shrink:1!important}.justify-content-xl-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-xl-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-xl-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-xl-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-xl-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-xl-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-xl-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-xl-center{-ms-flex-align:center!important;align-items:center!important}.align-items-xl-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-xl-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-xl-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-xl-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-xl-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-xl-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-xl-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-xl-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-xl-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-xl-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-xl-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-xl-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-xl-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-xl-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}.float-left{float:left!important}.float-right{float:right!important}.float-none{float:none!important}@media (min-width:576px){.float-sm-left{float:left!important}.float-sm-right{float:right!important}.float-sm-none{float:none!important}}@media (min-width:768px){.float-md-left{float:left!important}.float-md-right{float:right!important}.float-md-none{float:none!important}}@media (min-width:992px){.float-lg-left{float:left!important}.float-lg-right{float:right!important}.float-lg-none{float:none!important}}@media (min-width:1200px){.float-xl-left{float:left!important}.float-xl-right{float:right!important}.float-xl-none{float:none!important}}.user-select-all{-webkit-user-select:all!important;-moz-user-select:all!important;user-select:all!important}.user-select-auto{-webkit-user-select:auto!important;-moz-user-select:auto!important;-ms-user-select:auto!important;user-select:auto!important}.user-select-none{-webkit-user-select:none!important;-moz-user-select:none!important;-ms-user-select:none!important;user-select:none!important}.overflow-auto{overflow:auto!important}.overflow-hidden{overflow:hidden!important}.position-static{position:static!important}.position-relative{position:relative!important}.position-absolute{position:absolute!important}.position-fixed{position:fixed!important}.position-sticky{position:-webkit-sticky!important;position:sticky!important}.fixed-top{position:fixed;top:0;right:0;left:0;z-index:1030}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}@supports ((position:-webkit-sticky) or (position:sticky)){.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;overflow:visible;clip:auto;white-space:normal}.shadow-sm{box-shadow:0 .125rem .25rem rgba(0,0,0,.075)!important}.shadow{box-shadow:0 .5rem 1rem rgba(0,0,0,.15)!important}.shadow-lg{box-shadow:0 1rem 3rem rgba(0,0,0,.175)!important}.shadow-none{box-shadow:none!important}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.w-auto{width:auto!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.h-auto{height:auto!important}.mw-100{max-width:100%!important}.mh-100{max-height:100%!important}.min-vw-100{min-width:100vw!important}.min-vh-100{min-height:100vh!important}.vw-100{width:100vw!important}.vh-100{height:100vh!important}.m-0{margin:0!important}.mt-0,.my-0{margin-top:0!important}.mr-0,.mx-0{margin-right:0!important}.mb-0,.my-0{margin-bottom:0!important}.ml-0,.mx-0{margin-left:0!important}.m-1{margin:.25rem!important}.mt-1,.my-1{margin-top:.25rem!important}.mr-1,.mx-1{margin-right:.25rem!important}.mb-1,.my-1{margin-bottom:.25rem!important}.ml-1,.mx-1{margin-left:.25rem!important}.m-2{margin:.5rem!important}.mt-2,.my-2{margin-top:.5rem!important}.mr-2,.mx-2{margin-right:.5rem!important}.mb-2,.my-2{margin-bottom:.5rem!important}.ml-2,.mx-2{margin-left:.5rem!important}.m-3{margin:1rem!important}.mt-3,.my-3{margin-top:1rem!important}.mr-3,.mx-3{margin-right:1rem!important}.mb-3,.my-3{margin-bottom:1rem!important}.ml-3,.mx-3{margin-left:1rem!important}.m-4{margin:1.5rem!important}.mt-4,.my-4{margin-top:1.5rem!important}.mr-4,.mx-4{margin-right:1.5rem!important}.mb-4,.my-4{margin-bottom:1.5rem!important}.ml-4,.mx-4{margin-left:1.5rem!important}.m-5{margin:3rem!important}.mt-5,.my-5{margin-top:3rem!important}.mr-5,.mx-5{margin-right:3rem!important}.mb-5,.my-5{margin-bottom:3rem!important}.ml-5,.mx-5{margin-left:3rem!important}.p-0{padding:0!important}.pt-0,.py-0{padding-top:0!important}.pr-0,.px-0{padding-right:0!important}.pb-0,.py-0{padding-bottom:0!important}.pl-0,.px-0{padding-left:0!important}.p-1{padding:.25rem!important}.pt-1,.py-1{padding-top:.25rem!important}.pr-1,.px-1{padding-right:.25rem!important}.pb-1,.py-1{padding-bottom:.25rem!important}.pl-1,.px-1{padding-left:.25rem!important}.p-2{padding:.5rem!important}.pt-2,.py-2{padding-top:.5rem!important}.pr-2,.px-2{padding-right:.5rem!important}.pb-2,.py-2{padding-bottom:.5rem!important}.pl-2,.px-2{padding-left:.5rem!important}.p-3{padding:1rem!important}.pt-3,.py-3{padding-top:1rem!important}.pr-3,.px-3{padding-right:1rem!important}.pb-3,.py-3{padding-bottom:1rem!important}.pl-3,.px-3{padding-left:1rem!important}.p-4{padding:1.5rem!important}.pt-4,.py-4{padding-top:1.5rem!important}.pr-4,.px-4{padding-right:1.5rem!important}.pb-4,.py-4{padding-bottom:1.5rem!important}.pl-4,.px-4{padding-left:1.5rem!important}.p-5{padding:3rem!important}.pt-5,.py-5{padding-top:3rem!important}.pr-5,.px-5{padding-right:3rem!important}.pb-5,.py-5{padding-bottom:3rem!important}.pl-5,.px-5{padding-left:3rem!important}.m-n1{margin:-.25rem!important}.mt-n1,.my-n1{margin-top:-.25rem!important}.mr-n1,.mx-n1{margin-right:-.25rem!important}.mb-n1,.my-n1{margin-bottom:-.25rem!important}.ml-n1,.mx-n1{margin-left:-.25rem!important}.m-n2{margin:-.5rem!important}.mt-n2,.my-n2{margin-top:-.5rem!important}.mr-n2,.mx-n2{margin-right:-.5rem!important}.mb-n2,.my-n2{margin-bottom:-.5rem!important}.ml-n2,.mx-n2{margin-left:-.5rem!important}.m-n3{margin:-1rem!important}.mt-n3,.my-n3{margin-top:-1rem!important}.mr-n3,.mx-n3{margin-right:-1rem!important}.mb-n3,.my-n3{margin-bottom:-1rem!important}.ml-n3,.mx-n3{margin-left:-1rem!important}.m-n4{margin:-1.5rem!important}.mt-n4,.my-n4{margin-top:-1.5rem!important}.mr-n4,.mx-n4{margin-right:-1.5rem!important}.mb-n4,.my-n4{margin-bottom:-1.5rem!important}.ml-n4,.mx-n4{margin-left:-1.5rem!important}.m-n5{margin:-3rem!important}.mt-n5,.my-n5{margin-top:-3rem!important}.mr-n5,.mx-n5{margin-right:-3rem!important}.mb-n5,.my-n5{margin-bottom:-3rem!important}.ml-n5,.mx-n5{margin-left:-3rem!important}.m-auto{margin:auto!important}.mt-auto,.my-auto{margin-top:auto!important}.mr-auto,.mx-auto{margin-right:auto!important}.mb-auto,.my-auto{margin-bottom:auto!important}.ml-auto,.mx-auto{margin-left:auto!important}@media (min-width:576px){.m-sm-0{margin:0!important}.mt-sm-0,.my-sm-0{margin-top:0!important}.mr-sm-0,.mx-sm-0{margin-right:0!important}.mb-sm-0,.my-sm-0{margin-bottom:0!important}.ml-sm-0,.mx-sm-0{margin-left:0!important}.m-sm-1{margin:.25rem!important}.mt-sm-1,.my-sm-1{margin-top:.25rem!important}.mr-sm-1,.mx-sm-1{margin-right:.25rem!important}.mb-sm-1,.my-sm-1{margin-bottom:.25rem!important}.ml-sm-1,.mx-sm-1{margin-left:.25rem!important}.m-sm-2{margin:.5rem!important}.mt-sm-2,.my-sm-2{margin-top:.5rem!important}.mr-sm-2,.mx-sm-2{margin-right:.5rem!important}.mb-sm-2,.my-sm-2{margin-bottom:.5rem!important}.ml-sm-2,.mx-sm-2{margin-left:.5rem!important}.m-sm-3{margin:1rem!important}.mt-sm-3,.my-sm-3{margin-top:1rem!important}.mr-sm-3,.mx-sm-3{margin-right:1rem!important}.mb-sm-3,.my-sm-3{margin-bottom:1rem!important}.ml-sm-3,.mx-sm-3{margin-left:1rem!important}.m-sm-4{margin:1.5rem!important}.mt-sm-4,.my-sm-4{margin-top:1.5rem!important}.mr-sm-4,.mx-sm-4{margin-right:1.5rem!important}.mb-sm-4,.my-sm-4{margin-bottom:1.5rem!important}.ml-sm-4,.mx-sm-4{margin-left:1.5rem!important}.m-sm-5{margin:3rem!important}.mt-sm-5,.my-sm-5{margin-top:3rem!important}.mr-sm-5,.mx-sm-5{margin-right:3rem!important}.mb-sm-5,.my-sm-5{margin-bottom:3rem!important}.ml-sm-5,.mx-sm-5{margin-left:3rem!important}.p-sm-0{padding:0!important}.pt-sm-0,.py-sm-0{padding-top:0!important}.pr-sm-0,.px-sm-0{padding-right:0!important}.pb-sm-0,.py-sm-0{padding-bottom:0!important}.pl-sm-0,.px-sm-0{padding-left:0!important}.p-sm-1{padding:.25rem!important}.pt-sm-1,.py-sm-1{padding-top:.25rem!important}.pr-sm-1,.px-sm-1{padding-right:.25rem!important}.pb-sm-1,.py-sm-1{padding-bottom:.25rem!important}.pl-sm-1,.px-sm-1{padding-left:.25rem!important}.p-sm-2{padding:.5rem!important}.pt-sm-2,.py-sm-2{padding-top:.5rem!important}.pr-sm-2,.px-sm-2{padding-right:.5rem!important}.pb-sm-2,.py-sm-2{padding-bottom:.5rem!important}.pl-sm-2,.px-sm-2{padding-left:.5rem!important}.p-sm-3{padding:1rem!important}.pt-sm-3,.py-sm-3{padding-top:1rem!important}.pr-sm-3,.px-sm-3{padding-right:1rem!important}.pb-sm-3,.py-sm-3{padding-bottom:1rem!important}.pl-sm-3,.px-sm-3{padding-left:1rem!important}.p-sm-4{padding:1.5rem!important}.pt-sm-4,.py-sm-4{padding-top:1.5rem!important}.pr-sm-4,.px-sm-4{padding-right:1.5rem!important}.pb-sm-4,.py-sm-4{padding-bottom:1.5rem!important}.pl-sm-4,.px-sm-4{padding-left:1.5rem!important}.p-sm-5{padding:3rem!important}.pt-sm-5,.py-sm-5{padding-top:3rem!important}.pr-sm-5,.px-sm-5{padding-right:3rem!important}.pb-sm-5,.py-sm-5{padding-bottom:3rem!important}.pl-sm-5,.px-sm-5{padding-left:3rem!important}.m-sm-n1{margin:-.25rem!important}.mt-sm-n1,.my-sm-n1{margin-top:-.25rem!important}.mr-sm-n1,.mx-sm-n1{margin-right:-.25rem!important}.mb-sm-n1,.my-sm-n1{margin-bottom:-.25rem!important}.ml-sm-n1,.mx-sm-n1{margin-left:-.25rem!important}.m-sm-n2{margin:-.5rem!important}.mt-sm-n2,.my-sm-n2{margin-top:-.5rem!important}.mr-sm-n2,.mx-sm-n2{margin-right:-.5rem!important}.mb-sm-n2,.my-sm-n2{margin-bottom:-.5rem!important}.ml-sm-n2,.mx-sm-n2{margin-left:-.5rem!important}.m-sm-n3{margin:-1rem!important}.mt-sm-n3,.my-sm-n3{margin-top:-1rem!important}.mr-sm-n3,.mx-sm-n3{margin-right:-1rem!important}.mb-sm-n3,.my-sm-n3{margin-bottom:-1rem!important}.ml-sm-n3,.mx-sm-n3{margin-left:-1rem!important}.m-sm-n4{margin:-1.5rem!important}.mt-sm-n4,.my-sm-n4{margin-top:-1.5rem!important}.mr-sm-n4,.mx-sm-n4{margin-right:-1.5rem!important}.mb-sm-n4,.my-sm-n4{margin-bottom:-1.5rem!important}.ml-sm-n4,.mx-sm-n4{margin-left:-1.5rem!important}.m-sm-n5{margin:-3rem!important}.mt-sm-n5,.my-sm-n5{margin-top:-3rem!important}.mr-sm-n5,.mx-sm-n5{margin-right:-3rem!important}.mb-sm-n5,.my-sm-n5{margin-bottom:-3rem!important}.ml-sm-n5,.mx-sm-n5{margin-left:-3rem!important}.m-sm-auto{margin:auto!important}.mt-sm-auto,.my-sm-auto{margin-top:auto!important}.mr-sm-auto,.mx-sm-auto{margin-right:auto!important}.mb-sm-auto,.my-sm-auto{margin-bottom:auto!important}.ml-sm-auto,.mx-sm-auto{margin-left:auto!important}}@media (min-width:768px){.m-md-0{margin:0!important}.mt-md-0,.my-md-0{margin-top:0!important}.mr-md-0,.mx-md-0{margin-right:0!important}.mb-md-0,.my-md-0{margin-bottom:0!important}.ml-md-0,.mx-md-0{margin-left:0!important}.m-md-1{margin:.25rem!important}.mt-md-1,.my-md-1{margin-top:.25rem!important}.mr-md-1,.mx-md-1{margin-right:.25rem!important}.mb-md-1,.my-md-1{margin-bottom:.25rem!important}.ml-md-1,.mx-md-1{margin-left:.25rem!important}.m-md-2{margin:.5rem!important}.mt-md-2,.my-md-2{margin-top:.5rem!important}.mr-md-2,.mx-md-2{margin-right:.5rem!important}.mb-md-2,.my-md-2{margin-bottom:.5rem!important}.ml-md-2,.mx-md-2{margin-left:.5rem!important}.m-md-3{margin:1rem!important}.mt-md-3,.my-md-3{margin-top:1rem!important}.mr-md-3,.mx-md-3{margin-right:1rem!important}.mb-md-3,.my-md-3{margin-bottom:1rem!important}.ml-md-3,.mx-md-3{margin-left:1rem!important}.m-md-4{margin:1.5rem!important}.mt-md-4,.my-md-4{margin-top:1.5rem!important}.mr-md-4,.mx-md-4{margin-right:1.5rem!important}.mb-md-4,.my-md-4{margin-bottom:1.5rem!important}.ml-md-4,.mx-md-4{margin-left:1.5rem!important}.m-md-5{margin:3rem!important}.mt-md-5,.my-md-5{margin-top:3rem!important}.mr-md-5,.mx-md-5{margin-right:3rem!important}.mb-md-5,.my-md-5{margin-bottom:3rem!important}.ml-md-5,.mx-md-5{margin-left:3rem!important}.p-md-0{padding:0!important}.pt-md-0,.py-md-0{padding-top:0!important}.pr-md-0,.px-md-0{padding-right:0!important}.pb-md-0,.py-md-0{padding-bottom:0!important}.pl-md-0,.px-md-0{padding-left:0!important}.p-md-1{padding:.25rem!important}.pt-md-1,.py-md-1{padding-top:.25rem!important}.pr-md-1,.px-md-1{padding-right:.25rem!important}.pb-md-1,.py-md-1{padding-bottom:.25rem!important}.pl-md-1,.px-md-1{padding-left:.25rem!important}.p-md-2{padding:.5rem!important}.pt-md-2,.py-md-2{padding-top:.5rem!important}.pr-md-2,.px-md-2{padding-right:.5rem!important}.pb-md-2,.py-md-2{padding-bottom:.5rem!important}.pl-md-2,.px-md-2{padding-left:.5rem!important}.p-md-3{padding:1rem!important}.pt-md-3,.py-md-3{padding-top:1rem!important}.pr-md-3,.px-md-3{padding-right:1rem!important}.pb-md-3,.py-md-3{padding-bottom:1rem!important}.pl-md-3,.px-md-3{padding-left:1rem!important}.p-md-4{padding:1.5rem!important}.pt-md-4,.py-md-4{padding-top:1.5rem!important}.pr-md-4,.px-md-4{padding-right:1.5rem!important}.pb-md-4,.py-md-4{padding-bottom:1.5rem!important}.pl-md-4,.px-md-4{padding-left:1.5rem!important}.p-md-5{padding:3rem!important}.pt-md-5,.py-md-5{padding-top:3rem!important}.pr-md-5,.px-md-5{padding-right:3rem!important}.pb-md-5,.py-md-5{padding-bottom:3rem!important}.pl-md-5,.px-md-5{padding-left:3rem!important}.m-md-n1{margin:-.25rem!important}.mt-md-n1,.my-md-n1{margin-top:-.25rem!important}.mr-md-n1,.mx-md-n1{margin-right:-.25rem!important}.mb-md-n1,.my-md-n1{margin-bottom:-.25rem!important}.ml-md-n1,.mx-md-n1{margin-left:-.25rem!important}.m-md-n2{margin:-.5rem!important}.mt-md-n2,.my-md-n2{margin-top:-.5rem!important}.mr-md-n2,.mx-md-n2{margin-right:-.5rem!important}.mb-md-n2,.my-md-n2{margin-bottom:-.5rem!important}.ml-md-n2,.mx-md-n2{margin-left:-.5rem!important}.m-md-n3{margin:-1rem!important}.mt-md-n3,.my-md-n3{margin-top:-1rem!important}.mr-md-n3,.mx-md-n3{margin-right:-1rem!important}.mb-md-n3,.my-md-n3{margin-bottom:-1rem!important}.ml-md-n3,.mx-md-n3{margin-left:-1rem!important}.m-md-n4{margin:-1.5rem!important}.mt-md-n4,.my-md-n4{margin-top:-1.5rem!important}.mr-md-n4,.mx-md-n4{margin-right:-1.5rem!important}.mb-md-n4,.my-md-n4{margin-bottom:-1.5rem!important}.ml-md-n4,.mx-md-n4{margin-left:-1.5rem!important}.m-md-n5{margin:-3rem!important}.mt-md-n5,.my-md-n5{margin-top:-3rem!important}.mr-md-n5,.mx-md-n5{margin-right:-3rem!important}.mb-md-n5,.my-md-n5{margin-bottom:-3rem!important}.ml-md-n5,.mx-md-n5{margin-left:-3rem!important}.m-md-auto{margin:auto!important}.mt-md-auto,.my-md-auto{margin-top:auto!important}.mr-md-auto,.mx-md-auto{margin-right:auto!important}.mb-md-auto,.my-md-auto{margin-bottom:auto!important}.ml-md-auto,.mx-md-auto{margin-left:auto!important}}@media (min-width:992px){.m-lg-0{margin:0!important}.mt-lg-0,.my-lg-0{margin-top:0!important}.mr-lg-0,.mx-lg-0{margin-right:0!important}.mb-lg-0,.my-lg-0{margin-bottom:0!important}.ml-lg-0,.mx-lg-0{margin-left:0!important}.m-lg-1{margin:.25rem!important}.mt-lg-1,.my-lg-1{margin-top:.25rem!important}.mr-lg-1,.mx-lg-1{margin-right:.25rem!important}.mb-lg-1,.my-lg-1{margin-bottom:.25rem!important}.ml-lg-1,.mx-lg-1{margin-left:.25rem!important}.m-lg-2{margin:.5rem!important}.mt-lg-2,.my-lg-2{margin-top:.5rem!important}.mr-lg-2,.mx-lg-2{margin-right:.5rem!important}.mb-lg-2,.my-lg-2{margin-bottom:.5rem!important}.ml-lg-2,.mx-lg-2{margin-left:.5rem!important}.m-lg-3{margin:1rem!important}.mt-lg-3,.my-lg-3{margin-top:1rem!important}.mr-lg-3,.mx-lg-3{margin-right:1rem!important}.mb-lg-3,.my-lg-3{margin-bottom:1rem!important}.ml-lg-3,.mx-lg-3{margin-left:1rem!important}.m-lg-4{margin:1.5rem!important}.mt-lg-4,.my-lg-4{margin-top:1.5rem!important}.mr-lg-4,.mx-lg-4{margin-right:1.5rem!important}.mb-lg-4,.my-lg-4{margin-bottom:1.5rem!important}.ml-lg-4,.mx-lg-4{margin-left:1.5rem!important}.m-lg-5{margin:3rem!important}.mt-lg-5,.my-lg-5{margin-top:3rem!important}.mr-lg-5,.mx-lg-5{margin-right:3rem!important}.mb-lg-5,.my-lg-5{margin-bottom:3rem!important}.ml-lg-5,.mx-lg-5{margin-left:3rem!important}.p-lg-0{padding:0!important}.pt-lg-0,.py-lg-0{padding-top:0!important}.pr-lg-0,.px-lg-0{padding-right:0!important}.pb-lg-0,.py-lg-0{padding-bottom:0!important}.pl-lg-0,.px-lg-0{padding-left:0!important}.p-lg-1{padding:.25rem!important}.pt-lg-1,.py-lg-1{padding-top:.25rem!important}.pr-lg-1,.px-lg-1{padding-right:.25rem!important}.pb-lg-1,.py-lg-1{padding-bottom:.25rem!important}.pl-lg-1,.px-lg-1{padding-left:.25rem!important}.p-lg-2{padding:.5rem!important}.pt-lg-2,.py-lg-2{padding-top:.5rem!important}.pr-lg-2,.px-lg-2{padding-right:.5rem!important}.pb-lg-2,.py-lg-2{padding-bottom:.5rem!important}.pl-lg-2,.px-lg-2{padding-left:.5rem!important}.p-lg-3{padding:1rem!important}.pt-lg-3,.py-lg-3{padding-top:1rem!important}.pr-lg-3,.px-lg-3{padding-right:1rem!important}.pb-lg-3,.py-lg-3{padding-bottom:1rem!important}.pl-lg-3,.px-lg-3{padding-left:1rem!important}.p-lg-4{padding:1.5rem!important}.pt-lg-4,.py-lg-4{padding-top:1.5rem!important}.pr-lg-4,.px-lg-4{padding-right:1.5rem!important}.pb-lg-4,.py-lg-4{padding-bottom:1.5rem!important}.pl-lg-4,.px-lg-4{padding-left:1.5rem!important}.p-lg-5{padding:3rem!important}.pt-lg-5,.py-lg-5{padding-top:3rem!important}.pr-lg-5,.px-lg-5{padding-right:3rem!important}.pb-lg-5,.py-lg-5{padding-bottom:3rem!important}.pl-lg-5,.px-lg-5{padding-left:3rem!important}.m-lg-n1{margin:-.25rem!important}.mt-lg-n1,.my-lg-n1{margin-top:-.25rem!important}.mr-lg-n1,.mx-lg-n1{margin-right:-.25rem!important}.mb-lg-n1,.my-lg-n1{margin-bottom:-.25rem!important}.ml-lg-n1,.mx-lg-n1{margin-left:-.25rem!important}.m-lg-n2{margin:-.5rem!important}.mt-lg-n2,.my-lg-n2{margin-top:-.5rem!important}.mr-lg-n2,.mx-lg-n2{margin-right:-.5rem!important}.mb-lg-n2,.my-lg-n2{margin-bottom:-.5rem!important}.ml-lg-n2,.mx-lg-n2{margin-left:-.5rem!important}.m-lg-n3{margin:-1rem!important}.mt-lg-n3,.my-lg-n3{margin-top:-1rem!important}.mr-lg-n3,.mx-lg-n3{margin-right:-1rem!important}.mb-lg-n3,.my-lg-n3{margin-bottom:-1rem!important}.ml-lg-n3,.mx-lg-n3{margin-left:-1rem!important}.m-lg-n4{margin:-1.5rem!important}.mt-lg-n4,.my-lg-n4{margin-top:-1.5rem!important}.mr-lg-n4,.mx-lg-n4{margin-right:-1.5rem!important}.mb-lg-n4,.my-lg-n4{margin-bottom:-1.5rem!important}.ml-lg-n4,.mx-lg-n4{margin-left:-1.5rem!important}.m-lg-n5{margin:-3rem!important}.mt-lg-n5,.my-lg-n5{margin-top:-3rem!important}.mr-lg-n5,.mx-lg-n5{margin-right:-3rem!important}.mb-lg-n5,.my-lg-n5{margin-bottom:-3rem!important}.ml-lg-n5,.mx-lg-n5{margin-left:-3rem!important}.m-lg-auto{margin:auto!important}.mt-lg-auto,.my-lg-auto{margin-top:auto!important}.mr-lg-auto,.mx-lg-auto{margin-right:auto!important}.mb-lg-auto,.my-lg-auto{margin-bottom:auto!important}.ml-lg-auto,.mx-lg-auto{margin-left:auto!important}}@media (min-width:1200px){.m-xl-0{margin:0!important}.mt-xl-0,.my-xl-0{margin-top:0!important}.mr-xl-0,.mx-xl-0{margin-right:0!important}.mb-xl-0,.my-xl-0{margin-bottom:0!important}.ml-xl-0,.mx-xl-0{margin-left:0!important}.m-xl-1{margin:.25rem!important}.mt-xl-1,.my-xl-1{margin-top:.25rem!important}.mr-xl-1,.mx-xl-1{margin-right:.25rem!important}.mb-xl-1,.my-xl-1{margin-bottom:.25rem!important}.ml-xl-1,.mx-xl-1{margin-left:.25rem!important}.m-xl-2{margin:.5rem!important}.mt-xl-2,.my-xl-2{margin-top:.5rem!important}.mr-xl-2,.mx-xl-2{margin-right:.5rem!important}.mb-xl-2,.my-xl-2{margin-bottom:.5rem!important}.ml-xl-2,.mx-xl-2{margin-left:.5rem!important}.m-xl-3{margin:1rem!important}.mt-xl-3,.my-xl-3{margin-top:1rem!important}.mr-xl-3,.mx-xl-3{margin-right:1rem!important}.mb-xl-3,.my-xl-3{margin-bottom:1rem!important}.ml-xl-3,.mx-xl-3{margin-left:1rem!important}.m-xl-4{margin:1.5rem!important}.mt-xl-4,.my-xl-4{margin-top:1.5rem!important}.mr-xl-4,.mx-xl-4{margin-right:1.5rem!important}.mb-xl-4,.my-xl-4{margin-bottom:1.5rem!important}.ml-xl-4,.mx-xl-4{margin-left:1.5rem!important}.m-xl-5{margin:3rem!important}.mt-xl-5,.my-xl-5{margin-top:3rem!important}.mr-xl-5,.mx-xl-5{margin-right:3rem!important}.mb-xl-5,.my-xl-5{margin-bottom:3rem!important}.ml-xl-5,.mx-xl-5{margin-left:3rem!important}.p-xl-0{padding:0!important}.pt-xl-0,.py-xl-0{padding-top:0!important}.pr-xl-0,.px-xl-0{padding-right:0!important}.pb-xl-0,.py-xl-0{padding-bottom:0!important}.pl-xl-0,.px-xl-0{padding-left:0!important}.p-xl-1{padding:.25rem!important}.pt-xl-1,.py-xl-1{padding-top:.25rem!important}.pr-xl-1,.px-xl-1{padding-right:.25rem!important}.pb-xl-1,.py-xl-1{padding-bottom:.25rem!important}.pl-xl-1,.px-xl-1{padding-left:.25rem!important}.p-xl-2{padding:.5rem!important}.pt-xl-2,.py-xl-2{padding-top:.5rem!important}.pr-xl-2,.px-xl-2{padding-right:.5rem!important}.pb-xl-2,.py-xl-2{padding-bottom:.5rem!important}.pl-xl-2,.px-xl-2{padding-left:.5rem!important}.p-xl-3{padding:1rem!important}.pt-xl-3,.py-xl-3{padding-top:1rem!important}.pr-xl-3,.px-xl-3{padding-right:1rem!important}.pb-xl-3,.py-xl-3{padding-bottom:1rem!important}.pl-xl-3,.px-xl-3{padding-left:1rem!important}.p-xl-4{padding:1.5rem!important}.pt-xl-4,.py-xl-4{padding-top:1.5rem!important}.pr-xl-4,.px-xl-4{padding-right:1.5rem!important}.pb-xl-4,.py-xl-4{padding-bottom:1.5rem!important}.pl-xl-4,.px-xl-4{padding-left:1.5rem!important}.p-xl-5{padding:3rem!important}.pt-xl-5,.py-xl-5{padding-top:3rem!important}.pr-xl-5,.px-xl-5{padding-right:3rem!important}.pb-xl-5,.py-xl-5{padding-bottom:3rem!important}.pl-xl-5,.px-xl-5{padding-left:3rem!important}.m-xl-n1{margin:-.25rem!important}.mt-xl-n1,.my-xl-n1{margin-top:-.25rem!important}.mr-xl-n1,.mx-xl-n1{margin-right:-.25rem!important}.mb-xl-n1,.my-xl-n1{margin-bottom:-.25rem!important}.ml-xl-n1,.mx-xl-n1{margin-left:-.25rem!important}.m-xl-n2{margin:-.5rem!important}.mt-xl-n2,.my-xl-n2{margin-top:-.5rem!important}.mr-xl-n2,.mx-xl-n2{margin-right:-.5rem!important}.mb-xl-n2,.my-xl-n2{margin-bottom:-.5rem!important}.ml-xl-n2,.mx-xl-n2{margin-left:-.5rem!important}.m-xl-n3{margin:-1rem!important}.mt-xl-n3,.my-xl-n3{margin-top:-1rem!important}.mr-xl-n3,.mx-xl-n3{margin-right:-1rem!important}.mb-xl-n3,.my-xl-n3{margin-bottom:-1rem!important}.ml-xl-n3,.mx-xl-n3{margin-left:-1rem!important}.m-xl-n4{margin:-1.5rem!important}.mt-xl-n4,.my-xl-n4{margin-top:-1.5rem!important}.mr-xl-n4,.mx-xl-n4{margin-right:-1.5rem!important}.mb-xl-n4,.my-xl-n4{margin-bottom:-1.5rem!important}.ml-xl-n4,.mx-xl-n4{margin-left:-1.5rem!important}.m-xl-n5{margin:-3rem!important}.mt-xl-n5,.my-xl-n5{margin-top:-3rem!important}.mr-xl-n5,.mx-xl-n5{margin-right:-3rem!important}.mb-xl-n5,.my-xl-n5{margin-bottom:-3rem!important}.ml-xl-n5,.mx-xl-n5{margin-left:-3rem!important}.m-xl-auto{margin:auto!important}.mt-xl-auto,.my-xl-auto{margin-top:auto!important}.mr-xl-auto,.mx-xl-auto{margin-right:auto!important}.mb-xl-auto,.my-xl-auto{margin-bottom:auto!important}.ml-xl-auto,.mx-xl-auto{margin-left:auto!important}}.stretched-link::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;pointer-events:auto;content:\"\";background-color:rgba(0,0,0,0)}.text-monospace{font-family:SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace!important}.text-justify{text-align:justify!important}.text-wrap{white-space:normal!important}.text-nowrap{white-space:nowrap!important}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}@media (min-width:576px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}}@media (min-width:768px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}}@media (min-width:992px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}}@media (min-width:1200px){.text-xl-left{text-align:left!important}.text-xl-right{text-align:right!important}.text-xl-center{text-align:center!important}}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.font-weight-light{font-weight:300!important}.font-weight-lighter{font-weight:lighter!important}.font-weight-normal{font-weight:400!important}.font-weight-bold{font-weight:700!important}.font-weight-bolder{font-weight:bolder!important}.font-italic{font-style:italic!important}.text-white{color:#fff!important}.text-primary{color:#007bff!important}a.text-primary:focus,a.text-primary:hover{color:#0056b3!important}.text-secondary{color:#6c757d!important}a.text-secondary:focus,a.text-secondary:hover{color:#494f54!important}.text-success{color:#28a745!important}a.text-success:focus,a.text-success:hover{color:#19692c!important}.text-info{color:#17a2b8!important}a.text-info:focus,a.text-info:hover{color:#0f6674!important}.text-warning{color:#ffc107!important}a.text-warning:focus,a.text-warning:hover{color:#ba8b00!important}.text-danger{color:#dc3545!important}a.text-danger:focus,a.text-danger:hover{color:#a71d2a!important}.text-light{color:#f8f9fa!important}a.text-light:focus,a.text-light:hover{color:#cbd3da!important}.text-dark{color:#343a40!important}a.text-dark:focus,a.text-dark:hover{color:#121416!important}.text-body{color:#212529!important}.text-muted{color:#6c757d!important}.text-black-50{color:rgba(0,0,0,.5)!important}.text-white-50{color:rgba(255,255,255,.5)!important}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.text-decoration-none{text-decoration:none!important}.text-break{word-break:break-word!important;word-wrap:break-word!important}.text-reset{color:inherit!important}.visible{visibility:visible!important}.invisible{visibility:hidden!important}@media print{*,::after,::before{text-shadow:none!important;box-shadow:none!important}a:not(.btn){text-decoration:underline}abbr[title]::after{content:\" (\" attr(title) \")\"}pre{white-space:pre-wrap!important}blockquote,pre{border:1px solid #adb5bd;page-break-inside:avoid}img,tr{page-break-inside:avoid}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}@page{size:a3}body{min-width:992px!important}.container{min-width:992px!important}.navbar{display:none}.badge{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #dee2e6!important}.table-dark{color:inherit}.table-dark tbody+tbody,.table-dark td,.table-dark th,.table-dark thead th{border-color:#dee2e6}.table .thead-dark th{color:inherit;border-color:#dee2e6}}",""]),t.exports=e},function(t,e,r){
/*!
  * Bootstrap v4.6.1 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!function(t,e,r){"use strict";function n(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var o=n(e),i=n(r);function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(t,e,r){return e&&a(t.prototype,e),r&&a(t,r),t}function l(){return(l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}).apply(this,arguments)}function d(t,e){return(d=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c="transitionend",u={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var r=t.getAttribute("href");e=r&&"#"!==r?r.trim():""}try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=o.default(t).css("transition-duration"),r=o.default(t).css("transition-delay"),n=parseFloat(e),i=parseFloat(r);return n||i?(e=e.split(",")[0],r=r.split(",")[0],1e3*(parseFloat(e)+parseFloat(r))):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){o.default(t).trigger(c)},supportsTransitionEnd:function(){return Boolean(c)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,r){for(var n in r)if(Object.prototype.hasOwnProperty.call(r,n)){var o=r[n],i=e[n],a=i&&u.isElement(i)?"element":null===(s=i)||void 0===s?""+s:{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(o).test(a))throw new Error(t.toUpperCase()+': Option "'+n+'" provided type "'+a+'" but expected type "'+o+'".')}var s},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){var e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?u.findShadowRoot(t.parentNode):null},jQueryDetection:function(){if(void 0===o.default)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=o.default.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};u.jQueryDetection(),o.default.fn.emulateTransitionEnd=function(t){var e=this,r=!1;return o.default(this).one(u.TRANSITION_END,(function(){r=!0})),setTimeout((function(){r||u.triggerTransitionEnd(e)}),t),this},o.default.event.special[u.TRANSITION_END]={bindType:c,delegateType:c,handle:function(t){if(o.default(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}};var p="bs.alert",h=o.default.fn.alert,f=function(){function t(t){this._element=t}var e=t.prototype;return e.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},e.dispose=function(){o.default.removeData(this._element,p),this._element=null},e._getRootElement=function(t){var e=u.getSelectorFromElement(t),r=!1;return e&&(r=document.querySelector(e)),r||(r=o.default(t).closest(".alert")[0]),r},e._triggerCloseEvent=function(t){var e=o.default.Event("close.bs.alert");return o.default(t).trigger(e),e},e._removeElement=function(t){var e=this;if(o.default(t).removeClass("show"),o.default(t).hasClass("fade")){var r=u.getTransitionDurationFromElement(t);o.default(t).one(u.TRANSITION_END,(function(r){return e._destroyElement(t,r)})).emulateTransitionEnd(r)}else this._destroyElement(t)},e._destroyElement=function(t){o.default(t).detach().trigger("closed.bs.alert").remove()},t._jQueryInterface=function(e){return this.each((function(){var r=o.default(this),n=r.data(p);n||(n=new t(this),r.data(p,n)),"close"===e&&n[e](this)}))},t._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},s(t,null,[{key:"VERSION",get:function(){return"4.6.1"}}]),t}();o.default(document).on("click.bs.alert.data-api",'[data-dismiss="alert"]',f._handleDismiss(new f)),o.default.fn.alert=f._jQueryInterface,o.default.fn.alert.Constructor=f,o.default.fn.alert.noConflict=function(){return o.default.fn.alert=h,f._jQueryInterface};var m="bs.button",g=o.default.fn.button,b="active",v='[data-toggle^="button"]',y='input:not([type="hidden"])',x=".btn",w=function(){function t(t){this._element=t,this.shouldAvoidTriggerChange=!1}var e=t.prototype;return e.toggle=function(){var t=!0,e=!0,r=o.default(this._element).closest('[data-toggle="buttons"]')[0];if(r){var n=this._element.querySelector(y);if(n){if("radio"===n.type)if(n.checked&&this._element.classList.contains(b))t=!1;else{var i=r.querySelector(".active");i&&o.default(i).removeClass(b)}t&&("checkbox"!==n.type&&"radio"!==n.type||(n.checked=!this._element.classList.contains(b)),this.shouldAvoidTriggerChange||o.default(n).trigger("change")),n.focus(),e=!1}}this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(e&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(b)),t&&o.default(this._element).toggleClass(b))},e.dispose=function(){o.default.removeData(this._element,m),this._element=null},t._jQueryInterface=function(e,r){return this.each((function(){var n=o.default(this),i=n.data(m);i||(i=new t(this),n.data(m,i)),i.shouldAvoidTriggerChange=r,"toggle"===e&&i[e]()}))},s(t,null,[{key:"VERSION",get:function(){return"4.6.1"}}]),t}();o.default(document).on("click.bs.button.data-api",v,(function(t){var e=t.target,r=e;if(o.default(e).hasClass("btn")||(e=o.default(e).closest(x)[0]),!e||e.hasAttribute("disabled")||e.classList.contains("disabled"))t.preventDefault();else{var n=e.querySelector(y);if(n&&(n.hasAttribute("disabled")||n.classList.contains("disabled")))return void t.preventDefault();"INPUT"!==r.tagName&&"LABEL"===e.tagName||w._jQueryInterface.call(o.default(e),"toggle","INPUT"===r.tagName)}})).on("focus.bs.button.data-api blur.bs.button.data-api",v,(function(t){var e=o.default(t.target).closest(x)[0];o.default(e).toggleClass("focus",/^focus(in)?$/.test(t.type))})),o.default(window).on("load.bs.button.data-api",(function(){for(var t=[].slice.call(document.querySelectorAll('[data-toggle="buttons"] .btn')),e=0,r=t.length;e<r;e++){var n=t[e],o=n.querySelector(y);o.checked||o.hasAttribute("checked")?n.classList.add(b):n.classList.remove(b)}for(var i=0,a=(t=[].slice.call(document.querySelectorAll('[data-toggle="button"]'))).length;i<a;i++){var s=t[i];"true"===s.getAttribute("aria-pressed")?s.classList.add(b):s.classList.remove(b)}})),o.default.fn.button=w._jQueryInterface,o.default.fn.button.Constructor=w,o.default.fn.button.noConflict=function(){return o.default.fn.button=g,w._jQueryInterface};var _="carousel",k="bs.carousel",E=o.default.fn[_],C="active",T="next",S="prev",A="slid.bs.carousel",L=".active.carousel-item",D={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},N={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},O={TOUCH:"touch",PEN:"pen"},M=function(){function t(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(".carousel-indicators"),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var e=t.prototype;return e.next=function(){this._isSliding||this._slide(T)},e.nextWhenVisible=function(){var t=o.default(this._element);!document.hidden&&t.is(":visible")&&"hidden"!==t.css("visibility")&&this.next()},e.prev=function(){this._isSliding||this._slide(S)},e.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(".carousel-item-next, .carousel-item-prev")&&(u.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},e.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},e.to=function(t){var e=this;this._activeElement=this._element.querySelector(L);var r=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)o.default(this._element).one(A,(function(){return e.to(t)}));else{if(r===t)return this.pause(),void this.cycle();var n=t>r?T:S;this._slide(n,this._items[t])}},e.dispose=function(){o.default(this._element).off(".bs.carousel"),o.default.removeData(this._element,k),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},e._getConfig=function(t){return t=l({},D,t),u.typeCheckConfig(_,t,N),t},e._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);if(!(t<=40)){var e=t/this.touchDeltaX;this.touchDeltaX=0,e>0&&this.prev(),e<0&&this.next()}},e._addEventListeners=function(){var t=this;this._config.keyboard&&o.default(this._element).on("keydown.bs.carousel",(function(e){return t._keydown(e)})),"hover"===this._config.pause&&o.default(this._element).on("mouseenter.bs.carousel",(function(e){return t.pause(e)})).on("mouseleave.bs.carousel",(function(e){return t.cycle(e)})),this._config.touch&&this._addTouchEventListeners()},e._addTouchEventListeners=function(){var t=this;if(this._touchSupported){var e=function(e){t._pointerEvent&&O[e.originalEvent.pointerType.toUpperCase()]?t.touchStartX=e.originalEvent.clientX:t._pointerEvent||(t.touchStartX=e.originalEvent.touches[0].clientX)},r=function(e){t._pointerEvent&&O[e.originalEvent.pointerType.toUpperCase()]&&(t.touchDeltaX=e.originalEvent.clientX-t.touchStartX),t._handleSwipe(),"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout((function(e){return t.cycle(e)}),500+t._config.interval))};o.default(this._element.querySelectorAll(".carousel-item img")).on("dragstart.bs.carousel",(function(t){return t.preventDefault()})),this._pointerEvent?(o.default(this._element).on("pointerdown.bs.carousel",(function(t){return e(t)})),o.default(this._element).on("pointerup.bs.carousel",(function(t){return r(t)})),this._element.classList.add("pointer-event")):(o.default(this._element).on("touchstart.bs.carousel",(function(t){return e(t)})),o.default(this._element).on("touchmove.bs.carousel",(function(e){return function(e){t.touchDeltaX=e.originalEvent.touches&&e.originalEvent.touches.length>1?0:e.originalEvent.touches[0].clientX-t.touchStartX}(e)})),o.default(this._element).on("touchend.bs.carousel",(function(t){return r(t)})))}},e._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},e._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(".carousel-item")):[],this._items.indexOf(t)},e._getItemByDirection=function(t,e){var r=t===T,n=t===S,o=this._getItemIndex(e),i=this._items.length-1;if((n&&0===o||r&&o===i)&&!this._config.wrap)return e;var a=(o+(t===S?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},e._triggerSlideEvent=function(t,e){var r=this._getItemIndex(t),n=this._getItemIndex(this._element.querySelector(L)),i=o.default.Event("slide.bs.carousel",{relatedTarget:t,direction:e,from:n,to:r});return o.default(this._element).trigger(i),i},e._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var e=[].slice.call(this._indicatorsElement.querySelectorAll(".active"));o.default(e).removeClass(C);var r=this._indicatorsElement.children[this._getItemIndex(t)];r&&o.default(r).addClass(C)}},e._updateInterval=function(){var t=this._activeElement||this._element.querySelector(L);if(t){var e=parseInt(t.getAttribute("data-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}},e._slide=function(t,e){var r,n,i,a=this,s=this._element.querySelector(L),l=this._getItemIndex(s),d=e||s&&this._getItemByDirection(t,s),c=this._getItemIndex(d),p=Boolean(this._interval);if(t===T?(r="carousel-item-left",n="carousel-item-next",i="left"):(r="carousel-item-right",n="carousel-item-prev",i="right"),d&&o.default(d).hasClass(C))this._isSliding=!1;else if(!this._triggerSlideEvent(d,i).isDefaultPrevented()&&s&&d){this._isSliding=!0,p&&this.pause(),this._setActiveIndicatorElement(d),this._activeElement=d;var h=o.default.Event(A,{relatedTarget:d,direction:i,from:l,to:c});if(o.default(this._element).hasClass("slide")){o.default(d).addClass(n),u.reflow(d),o.default(s).addClass(r),o.default(d).addClass(r);var f=u.getTransitionDurationFromElement(s);o.default(s).one(u.TRANSITION_END,(function(){o.default(d).removeClass(r+" "+n).addClass(C),o.default(s).removeClass("active "+n+" "+r),a._isSliding=!1,setTimeout((function(){return o.default(a._element).trigger(h)}),0)})).emulateTransitionEnd(f)}else o.default(s).removeClass(C),o.default(d).addClass(C),this._isSliding=!1,o.default(this._element).trigger(h);p&&this.cycle()}},t._jQueryInterface=function(e){return this.each((function(){var r=o.default(this).data(k),n=l({},D,o.default(this).data());"object"==typeof e&&(n=l({},n,e));var i="string"==typeof e?e:n.slide;if(r||(r=new t(this,n),o.default(this).data(k,r)),"number"==typeof e)r.to(e);else if("string"==typeof i){if(void 0===r[i])throw new TypeError('No method named "'+i+'"');r[i]()}else n.interval&&n.ride&&(r.pause(),r.cycle())}))},t._dataApiClickHandler=function(e){var r=u.getSelectorFromElement(this);if(r){var n=o.default(r)[0];if(n&&o.default(n).hasClass("carousel")){var i=l({},o.default(n).data(),o.default(this).data()),a=this.getAttribute("data-slide-to");a&&(i.interval=!1),t._jQueryInterface.call(o.default(n),i),a&&o.default(n).data(k).to(a),e.preventDefault()}}},s(t,null,[{key:"VERSION",get:function(){return"4.6.1"}},{key:"Default",get:function(){return D}}]),t}();o.default(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",M._dataApiClickHandler),o.default(window).on("load.bs.carousel.data-api",(function(){for(var t=[].slice.call(document.querySelectorAll('[data-ride="carousel"]')),e=0,r=t.length;e<r;e++){var n=o.default(t[e]);M._jQueryInterface.call(n,n.data())}})),o.default.fn[_]=M._jQueryInterface,o.default.fn[_].Constructor=M,o.default.fn[_].noConflict=function(){return o.default.fn[_]=E,M._jQueryInterface};var j="collapse",z="bs.collapse",P=o.default.fn[j],R="show",I="collapse",F="collapsing",G="collapsed",q="width",H='[data-toggle="collapse"]',B={toggle:!0,parent:""},U={toggle:"boolean",parent:"(string|element)"},$=function(){function t(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var r=[].slice.call(document.querySelectorAll(H)),n=0,o=r.length;n<o;n++){var i=r[n],a=u.getSelectorFromElement(i),s=[].slice.call(document.querySelectorAll(a)).filter((function(e){return e===t}));null!==a&&s.length>0&&(this._selector=a,this._triggerArray.push(i))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e=t.prototype;return e.toggle=function(){o.default(this._element).hasClass(R)?this.hide():this.show()},e.show=function(){var e,r,n=this;if(!(this._isTransitioning||o.default(this._element).hasClass(R)||(this._parent&&0===(e=[].slice.call(this._parent.querySelectorAll(".show, .collapsing")).filter((function(t){return"string"==typeof n._config.parent?t.getAttribute("data-parent")===n._config.parent:t.classList.contains(I)}))).length&&(e=null),e&&(r=o.default(e).not(this._selector).data(z))&&r._isTransitioning))){var i=o.default.Event("show.bs.collapse");if(o.default(this._element).trigger(i),!i.isDefaultPrevented()){e&&(t._jQueryInterface.call(o.default(e).not(this._selector),"hide"),r||o.default(e).data(z,null));var a=this._getDimension();o.default(this._element).removeClass(I).addClass(F),this._element.style[a]=0,this._triggerArray.length&&o.default(this._triggerArray).removeClass(G).attr("aria-expanded",!0),this.setTransitioning(!0);var s="scroll"+(a[0].toUpperCase()+a.slice(1)),l=u.getTransitionDurationFromElement(this._element);o.default(this._element).one(u.TRANSITION_END,(function(){o.default(n._element).removeClass(F).addClass("collapse show"),n._element.style[a]="",n.setTransitioning(!1),o.default(n._element).trigger("shown.bs.collapse")})).emulateTransitionEnd(l),this._element.style[a]=this._element[s]+"px"}}},e.hide=function(){var t=this;if(!this._isTransitioning&&o.default(this._element).hasClass(R)){var e=o.default.Event("hide.bs.collapse");if(o.default(this._element).trigger(e),!e.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",u.reflow(this._element),o.default(this._element).addClass(F).removeClass("collapse show");var n=this._triggerArray.length;if(n>0)for(var i=0;i<n;i++){var a=this._triggerArray[i],s=u.getSelectorFromElement(a);null!==s&&(o.default([].slice.call(document.querySelectorAll(s))).hasClass(R)||o.default(a).addClass(G).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[r]="";var l=u.getTransitionDurationFromElement(this._element);o.default(this._element).one(u.TRANSITION_END,(function(){t.setTransitioning(!1),o.default(t._element).removeClass(F).addClass(I).trigger("hidden.bs.collapse")})).emulateTransitionEnd(l)}}},e.setTransitioning=function(t){this._isTransitioning=t},e.dispose=function(){o.default.removeData(this._element,z),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},e._getConfig=function(t){return(t=l({},B,t)).toggle=Boolean(t.toggle),u.typeCheckConfig(j,t,U),t},e._getDimension=function(){return o.default(this._element).hasClass(q)?q:"height"},e._getParent=function(){var e,r=this;u.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent);var n='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',i=[].slice.call(e.querySelectorAll(n));return o.default(i).each((function(e,n){r._addAriaAndCollapsedClass(t._getTargetFromElement(n),[n])})),e},e._addAriaAndCollapsedClass=function(t,e){var r=o.default(t).hasClass(R);e.length&&o.default(e).toggleClass(G,!r).attr("aria-expanded",r)},t._getTargetFromElement=function(t){var e=u.getSelectorFromElement(t);return e?document.querySelector(e):null},t._jQueryInterface=function(e){return this.each((function(){var r=o.default(this),n=r.data(z),i=l({},B,r.data(),"object"==typeof e&&e?e:{});if(!n&&i.toggle&&"string"==typeof e&&/show|hide/.test(e)&&(i.toggle=!1),n||(n=new t(this,i),r.data(z,n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}}))},s(t,null,[{key:"VERSION",get:function(){return"4.6.1"}},{key:"Default",get:function(){return B}}]),t}();o.default(document).on("click.bs.collapse.data-api",H,(function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var e=o.default(this),r=u.getSelectorFromElement(this),n=[].slice.call(document.querySelectorAll(r));o.default(n).each((function(){var t=o.default(this),r=t.data(z)?"toggle":e.data();$._jQueryInterface.call(t,r)}))})),o.default.fn[j]=$._jQueryInterface,o.default.fn[j].Constructor=$,o.default.fn[j].noConflict=function(){return o.default.fn[j]=P,$._jQueryInterface};var W="dropdown",V="bs.dropdown",K=o.default.fn[W],Y=new RegExp("38|40|27"),Z="disabled",X="show",Q="dropdown-menu-right",J="hide.bs.dropdown",tt="hidden.bs.dropdown",et="click.bs.dropdown.data-api",rt="keydown.bs.dropdown.data-api",nt='[data-toggle="dropdown"]',ot=".dropdown-menu",it={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},at={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},st=function(){function t(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e=t.prototype;return e.toggle=function(){if(!this._element.disabled&&!o.default(this._element).hasClass(Z)){var e=o.default(this._menu).hasClass(X);t._clearMenus(),e||this.show(!0)}},e.show=function(e){if(void 0===e&&(e=!1),!(this._element.disabled||o.default(this._element).hasClass(Z)||o.default(this._menu).hasClass(X))){var r={relatedTarget:this._element},n=o.default.Event("show.bs.dropdown",r),a=t._getParentFromElement(this._element);if(o.default(a).trigger(n),!n.isDefaultPrevented()){if(!this._inNavbar&&e){if(void 0===i.default)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var s=this._element;"parent"===this._config.reference?s=a:u.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&o.default(a).addClass("position-static"),this._popper=new i.default(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===o.default(a).closest(".navbar-nav").length&&o.default(document.body).children().on("mouseover",null,o.default.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),o.default(this._menu).toggleClass(X),o.default(a).toggleClass(X).trigger(o.default.Event("shown.bs.dropdown",r))}}},e.hide=function(){if(!this._element.disabled&&!o.default(this._element).hasClass(Z)&&o.default(this._menu).hasClass(X)){var e={relatedTarget:this._element},r=o.default.Event(J,e),n=t._getParentFromElement(this._element);o.default(n).trigger(r),r.isDefaultPrevented()||(this._popper&&this._popper.destroy(),o.default(this._menu).toggleClass(X),o.default(n).toggleClass(X).trigger(o.default.Event(tt,e)))}},e.dispose=function(){o.default.removeData(this._element,V),o.default(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},e.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},e._addEventListeners=function(){var t=this;o.default(this._element).on("click.bs.dropdown",(function(e){e.preventDefault(),e.stopPropagation(),t.toggle()}))},e._getConfig=function(t){return t=l({},this.constructor.Default,o.default(this._element).data(),t),u.typeCheckConfig(W,t,this.constructor.DefaultType),t},e._getMenuElement=function(){if(!this._menu){var e=t._getParentFromElement(this._element);e&&(this._menu=e.querySelector(ot))}return this._menu},e._getPlacement=function(){var t=o.default(this._element.parentNode),e="bottom-start";return t.hasClass("dropup")?e=o.default(this._menu).hasClass(Q)?"top-end":"top-start":t.hasClass("dropright")?e="right-start":t.hasClass("dropleft")?e="left-start":o.default(this._menu).hasClass(Q)&&(e="bottom-end"),e},e._detectNavbar=function(){return o.default(this._element).closest(".navbar").length>0},e._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=l({},e.offsets,t._config.offset(e.offsets,t._element)),e}:e.offset=this._config.offset,e},e._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),l({},t,this._config.popperConfig)},t._jQueryInterface=function(e){return this.each((function(){var r=o.default(this).data(V);if(r||(r=new t(this,"object"==typeof e?e:null),o.default(this).data(V,r)),"string"==typeof e){if(void 0===r[e])throw new TypeError('No method named "'+e+'"');r[e]()}}))},t._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var r=[].slice.call(document.querySelectorAll(nt)),n=0,i=r.length;n<i;n++){var a=t._getParentFromElement(r[n]),s=o.default(r[n]).data(V),l={relatedTarget:r[n]};if(e&&"click"===e.type&&(l.clickEvent=e),s){var d=s._menu;if(o.default(a).hasClass(X)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&o.default.contains(a,e.target))){var c=o.default.Event(J,l);o.default(a).trigger(c),c.isDefaultPrevented()||("ontouchstart"in document.documentElement&&o.default(document.body).children().off("mouseover",null,o.default.noop),r[n].setAttribute("aria-expanded","false"),s._popper&&s._popper.destroy(),o.default(d).removeClass(X),o.default(a).removeClass(X).trigger(o.default.Event(tt,l)))}}}},t._getParentFromElement=function(t){var e,r=u.getSelectorFromElement(t);return r&&(e=document.querySelector(r)),e||t.parentNode},t._dataApiKeydownHandler=function(e){if(!(/input|textarea/i.test(e.target.tagName)?32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||o.default(e.target).closest(ot).length):!Y.test(e.which))&&!this.disabled&&!o.default(this).hasClass(Z)){var r=t._getParentFromElement(this),n=o.default(r).hasClass(X);if(n||27!==e.which){if(e.preventDefault(),e.stopPropagation(),!n||27===e.which||32===e.which)return 27===e.which&&o.default(r.querySelector(nt)).trigger("focus"),void o.default(this).trigger("click");var i=[].slice.call(r.querySelectorAll(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)")).filter((function(t){return o.default(t).is(":visible")}));if(0!==i.length){var a=i.indexOf(e.target);38===e.which&&a>0&&a--,40===e.which&&a<i.length-1&&a++,a<0&&(a=0),i[a].focus()}}}},s(t,null,[{key:"VERSION",get:function(){return"4.6.1"}},{key:"Default",get:function(){return it}},{key:"DefaultType",get:function(){return at}}]),t}();o.default(document).on(rt,nt,st._dataApiKeydownHandler).on(rt,ot,st._dataApiKeydownHandler).on(et+" keyup.bs.dropdown.data-api",st._clearMenus).on(et,nt,(function(t){t.preventDefault(),t.stopPropagation(),st._jQueryInterface.call(o.default(this),"toggle")})).on(et,".dropdown form",(function(t){t.stopPropagation()})),o.default.fn[W]=st._jQueryInterface,o.default.fn[W].Constructor=st,o.default.fn[W].noConflict=function(){return o.default.fn[W]=K,st._jQueryInterface};var lt="bs.modal",dt=o.default.fn.modal,ct="modal-open",ut="fade",pt="show",ht="modal-static",ft="hidden.bs.modal",mt="show.bs.modal",gt="focusin.bs.modal",bt="resize.bs.modal",vt="click.dismiss.bs.modal",yt="keydown.dismiss.bs.modal",xt="mousedown.dismiss.bs.modal",wt=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",_t={backdrop:!0,keyboard:!0,focus:!0,show:!0},kt={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Et=function(){function t(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(".modal-dialog"),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var e=t.prototype;return e.toggle=function(t){return this._isShown?this.hide():this.show(t)},e.show=function(t){var e=this;if(!this._isShown&&!this._isTransitioning){var r=o.default.Event(mt,{relatedTarget:t});o.default(this._element).trigger(r),r.isDefaultPrevented()||(this._isShown=!0,o.default(this._element).hasClass(ut)&&(this._isTransitioning=!0),this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),o.default(this._element).on(vt,'[data-dismiss="modal"]',(function(t){return e.hide(t)})),o.default(this._dialog).on(xt,(function(){o.default(e._element).one("mouseup.dismiss.bs.modal",(function(t){o.default(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return e._showElement(t)})))}},e.hide=function(t){var e=this;if(t&&t.preventDefault(),this._isShown&&!this._isTransitioning){var r=o.default.Event("hide.bs.modal");if(o.default(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var n=o.default(this._element).hasClass(ut);if(n&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),o.default(document).off(gt),o.default(this._element).removeClass(pt),o.default(this._element).off(vt),o.default(this._dialog).off(xt),n){var i=u.getTransitionDurationFromElement(this._element);o.default(this._element).one(u.TRANSITION_END,(function(t){return e._hideModal(t)})).emulateTransitionEnd(i)}else this._hideModal()}}},e.dispose=function(){[window,this._element,this._dialog].forEach((function(t){return o.default(t).off(".bs.modal")})),o.default(document).off(gt),o.default.removeData(this._element,lt),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},e.handleUpdate=function(){this._adjustDialog()},e._getConfig=function(t){return t=l({},_t,t),u.typeCheckConfig("modal",t,kt),t},e._triggerBackdropTransition=function(){var t=this,e=o.default.Event("hidePrevented.bs.modal");if(o.default(this._element).trigger(e),!e.isDefaultPrevented()){var r=this._element.scrollHeight>document.documentElement.clientHeight;r||(this._element.style.overflowY="hidden"),this._element.classList.add(ht);var n=u.getTransitionDurationFromElement(this._dialog);o.default(this._element).off(u.TRANSITION_END),o.default(this._element).one(u.TRANSITION_END,(function(){t._element.classList.remove(ht),r||o.default(t._element).one(u.TRANSITION_END,(function(){t._element.style.overflowY=""})).emulateTransitionEnd(t._element,n)})).emulateTransitionEnd(n),this._element.focus()}},e._showElement=function(t){var e=this,r=o.default(this._element).hasClass(ut),n=this._dialog?this._dialog.querySelector(".modal-body"):null;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),o.default(this._dialog).hasClass("modal-dialog-scrollable")&&n?n.scrollTop=0:this._element.scrollTop=0,r&&u.reflow(this._element),o.default(this._element).addClass(pt),this._config.focus&&this._enforceFocus();var i=o.default.Event("shown.bs.modal",{relatedTarget:t}),a=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,o.default(e._element).trigger(i)};if(r){var s=u.getTransitionDurationFromElement(this._dialog);o.default(this._dialog).one(u.TRANSITION_END,a).emulateTransitionEnd(s)}else a()},e._enforceFocus=function(){var t=this;o.default(document).off(gt).on(gt,(function(e){document!==e.target&&t._element!==e.target&&0===o.default(t._element).has(e.target).length&&t._element.focus()}))},e._setEscapeEvent=function(){var t=this;this._isShown?o.default(this._element).on(yt,(function(e){t._config.keyboard&&27===e.which?(e.preventDefault(),t.hide()):t._config.keyboard||27!==e.which||t._triggerBackdropTransition()})):this._isShown||o.default(this._element).off(yt)},e._setResizeEvent=function(){var t=this;this._isShown?o.default(window).on(bt,(function(e){return t.handleUpdate(e)})):o.default(window).off(bt)},e._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._showBackdrop((function(){o.default(document.body).removeClass(ct),t._resetAdjustments(),t._resetScrollbar(),o.default(t._element).trigger(ft)}))},e._removeBackdrop=function(){this._backdrop&&(o.default(this._backdrop).remove(),this._backdrop=null)},e._showBackdrop=function(t){var e=this,r=o.default(this._element).hasClass(ut)?ut:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",r&&this._backdrop.classList.add(r),o.default(this._backdrop).appendTo(document.body),o.default(this._element).on(vt,(function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._triggerBackdropTransition():e.hide())})),r&&u.reflow(this._backdrop),o.default(this._backdrop).addClass(pt),!t)return;if(!r)return void t();var n=u.getTransitionDurationFromElement(this._backdrop);o.default(this._backdrop).one(u.TRANSITION_END,t).emulateTransitionEnd(n)}else if(!this._isShown&&this._backdrop){o.default(this._backdrop).removeClass(pt);var i=function(){e._removeBackdrop(),t&&t()};if(o.default(this._element).hasClass(ut)){var a=u.getTransitionDurationFromElement(this._backdrop);o.default(this._backdrop).one(u.TRANSITION_END,i).emulateTransitionEnd(a)}else i()}else t&&t()},e._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},e._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},e._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=Math.round(t.left+t.right)<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},e._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){var e=[].slice.call(document.querySelectorAll(wt)),r=[].slice.call(document.querySelectorAll(".sticky-top"));o.default(e).each((function(e,r){var n=r.style.paddingRight,i=o.default(r).css("padding-right");o.default(r).data("padding-right",n).css("padding-right",parseFloat(i)+t._scrollbarWidth+"px")})),o.default(r).each((function(e,r){var n=r.style.marginRight,i=o.default(r).css("margin-right");o.default(r).data("margin-right",n).css("margin-right",parseFloat(i)-t._scrollbarWidth+"px")}));var n=document.body.style.paddingRight,i=o.default(document.body).css("padding-right");o.default(document.body).data("padding-right",n).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}o.default(document.body).addClass(ct)},e._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(wt));o.default(t).each((function(t,e){var r=o.default(e).data("padding-right");o.default(e).removeData("padding-right"),e.style.paddingRight=r||""}));var e=[].slice.call(document.querySelectorAll(".sticky-top"));o.default(e).each((function(t,e){var r=o.default(e).data("margin-right");void 0!==r&&o.default(e).css("margin-right",r).removeData("margin-right")}));var r=o.default(document.body).data("padding-right");o.default(document.body).removeData("padding-right"),document.body.style.paddingRight=r||""},e._getScrollbarWidth=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},t._jQueryInterface=function(e,r){return this.each((function(){var n=o.default(this).data(lt),i=l({},_t,o.default(this).data(),"object"==typeof e&&e?e:{});if(n||(n=new t(this,i),o.default(this).data(lt,n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e](r)}else i.show&&n.show(r)}))},s(t,null,[{key:"VERSION",get:function(){return"4.6.1"}},{key:"Default",get:function(){return _t}}]),t}();o.default(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',(function(t){var e,r=this,n=u.getSelectorFromElement(this);n&&(e=document.querySelector(n));var i=o.default(e).data(lt)?"toggle":l({},o.default(e).data(),o.default(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var a=o.default(e).one(mt,(function(t){t.isDefaultPrevented()||a.one(ft,(function(){o.default(r).is(":visible")&&r.focus()}))}));Et._jQueryInterface.call(o.default(e),i,this)})),o.default.fn.modal=Et._jQueryInterface,o.default.fn.modal.Constructor=Et,o.default.fn.modal.noConflict=function(){return o.default.fn.modal=dt,Et._jQueryInterface};var Ct=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],Tt=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,St=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;function At(t,e,r){if(0===t.length)return t;if(r&&"function"==typeof r)return r(t);for(var n=(new window.DOMParser).parseFromString(t,"text/html"),o=Object.keys(e),i=[].slice.call(n.body.querySelectorAll("*")),a=function(t,r){var n=i[t],a=n.nodeName.toLowerCase();if(-1===o.indexOf(n.nodeName.toLowerCase()))return n.parentNode.removeChild(n),"continue";var s=[].slice.call(n.attributes),l=[].concat(e["*"]||[],e[a]||[]);s.forEach((function(t){(function(t,e){var r=t.nodeName.toLowerCase();if(-1!==e.indexOf(r))return-1===Ct.indexOf(r)||Boolean(Tt.test(t.nodeValue)||St.test(t.nodeValue));for(var n=e.filter((function(t){return t instanceof RegExp})),o=0,i=n.length;o<i;o++)if(n[o].test(r))return!0;return!1})(t,l)||n.removeAttribute(t.nodeName)}))},s=0,l=i.length;s<l;s++)a(s);return n.body.innerHTML}var Lt="tooltip",Dt="bs.tooltip",Nt=o.default.fn.tooltip,Ot=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Mt=["sanitize","whiteList","sanitizeFn"],jt="fade",zt="show",Pt="show",Rt="hover",It={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},Ft={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",customClass:"",sanitize:!0,sanitizeFn:null,whiteList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},Gt={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object",popperConfig:"(null|object)"},qt={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},Ht=function(){function t(t,e){if(void 0===i.default)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var e=t.prototype;return e.enable=function(){this._isEnabled=!0},e.disable=function(){this._isEnabled=!1},e.toggleEnabled=function(){this._isEnabled=!this._isEnabled},e.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,r=o.default(t.currentTarget).data(e);r||(r=new this.constructor(t.currentTarget,this._getDelegateConfig()),o.default(t.currentTarget).data(e,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(o.default(this.getTipElement()).hasClass(zt))return void this._leave(null,this);this._enter(null,this)}},e.dispose=function(){clearTimeout(this._timeout),o.default.removeData(this.element,this.constructor.DATA_KEY),o.default(this.element).off(this.constructor.EVENT_KEY),o.default(this.element).closest(".modal").off("hide.bs.modal",this._hideModalHandler),this.tip&&o.default(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},e.show=function(){var t=this;if("none"===o.default(this.element).css("display"))throw new Error("Please use show on visible elements");var e=o.default.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){o.default(this.element).trigger(e);var r=u.findShadowRoot(this.element),n=o.default.contains(null!==r?r:this.element.ownerDocument.documentElement,this.element);if(e.isDefaultPrevented()||!n)return;var a=this.getTipElement(),s=u.getUID(this.constructor.NAME);a.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&o.default(a).addClass(jt);var l="function"==typeof this.config.placement?this.config.placement.call(this,a,this.element):this.config.placement,d=this._getAttachment(l);this.addAttachmentClass(d);var c=this._getContainer();o.default(a).data(this.constructor.DATA_KEY,this),o.default.contains(this.element.ownerDocument.documentElement,this.tip)||o.default(a).appendTo(c),o.default(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new i.default(this.element,a,this._getPopperConfig(d)),o.default(a).addClass(zt),o.default(a).addClass(this.config.customClass),"ontouchstart"in document.documentElement&&o.default(document.body).children().on("mouseover",null,o.default.noop);var p=function(){t.config.animation&&t._fixTransition();var e=t._hoverState;t._hoverState=null,o.default(t.element).trigger(t.constructor.Event.SHOWN),"out"===e&&t._leave(null,t)};if(o.default(this.tip).hasClass(jt)){var h=u.getTransitionDurationFromElement(this.tip);o.default(this.tip).one(u.TRANSITION_END,p).emulateTransitionEnd(h)}else p()}},e.hide=function(t){var e=this,r=this.getTipElement(),n=o.default.Event(this.constructor.Event.HIDE),i=function(){e._hoverState!==Pt&&r.parentNode&&r.parentNode.removeChild(r),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),o.default(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};if(o.default(this.element).trigger(n),!n.isDefaultPrevented()){if(o.default(r).removeClass(zt),"ontouchstart"in document.documentElement&&o.default(document.body).children().off("mouseover",null,o.default.noop),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,o.default(this.tip).hasClass(jt)){var a=u.getTransitionDurationFromElement(r);o.default(r).one(u.TRANSITION_END,i).emulateTransitionEnd(a)}else i();this._hoverState=""}},e.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},e.isWithContent=function(){return Boolean(this.getTitle())},e.addAttachmentClass=function(t){o.default(this.getTipElement()).addClass("bs-tooltip-"+t)},e.getTipElement=function(){return this.tip=this.tip||o.default(this.config.template)[0],this.tip},e.setContent=function(){var t=this.getTipElement();this.setElementContent(o.default(t.querySelectorAll(".tooltip-inner")),this.getTitle()),o.default(t).removeClass("fade show")},e.setElementContent=function(t,e){"object"!=typeof e||!e.nodeType&&!e.jquery?this.config.html?(this.config.sanitize&&(e=At(e,this.config.whiteList,this.config.sanitizeFn)),t.html(e)):t.text(e):this.config.html?o.default(e).parent().is(t)||t.empty().append(e):t.text(o.default(e).text())},e.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},e._getPopperConfig=function(t){var e=this;return l({},{placement:t,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){return e._handlePopperPlacementChange(t)}},this.config.popperConfig)},e._getOffset=function(){var t=this,e={};return"function"==typeof this.config.offset?e.fn=function(e){return e.offsets=l({},e.offsets,t.config.offset(e.offsets,t.element)),e}:e.offset=this.config.offset,e},e._getContainer=function(){return!1===this.config.container?document.body:u.isElement(this.config.container)?o.default(this.config.container):o.default(document).find(this.config.container)},e._getAttachment=function(t){return It[t.toUpperCase()]},e._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach((function(e){if("click"===e)o.default(t.element).on(t.constructor.Event.CLICK,t.config.selector,(function(e){return t.toggle(e)}));else if("manual"!==e){var r=e===Rt?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,n=e===Rt?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;o.default(t.element).on(r,t.config.selector,(function(e){return t._enter(e)})).on(n,t.config.selector,(function(e){return t._leave(e)}))}})),this._hideModalHandler=function(){t.element&&t.hide()},o.default(this.element).closest(".modal").on("hide.bs.modal",this._hideModalHandler),this.config.selector?this.config=l({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},e._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},e._enter=function(t,e){var r=this.constructor.DATA_KEY;(e=e||o.default(t.currentTarget).data(r))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),o.default(t.currentTarget).data(r,e)),t&&(e._activeTrigger["focusin"===t.type?"focus":Rt]=!0),o.default(e.getTipElement()).hasClass(zt)||e._hoverState===Pt?e._hoverState=Pt:(clearTimeout(e._timeout),e._hoverState=Pt,e.config.delay&&e.config.delay.show?e._timeout=setTimeout((function(){e._hoverState===Pt&&e.show()}),e.config.delay.show):e.show())},e._leave=function(t,e){var r=this.constructor.DATA_KEY;(e=e||o.default(t.currentTarget).data(r))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),o.default(t.currentTarget).data(r,e)),t&&(e._activeTrigger["focusout"===t.type?"focus":Rt]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState="out",e.config.delay&&e.config.delay.hide?e._timeout=setTimeout((function(){"out"===e._hoverState&&e.hide()}),e.config.delay.hide):e.hide())},e._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},e._getConfig=function(t){var e=o.default(this.element).data();return Object.keys(e).forEach((function(t){-1!==Mt.indexOf(t)&&delete e[t]})),"number"==typeof(t=l({},this.constructor.Default,e,"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),u.typeCheckConfig(Lt,t,this.constructor.DefaultType),t.sanitize&&(t.template=At(t.template,t.whiteList,t.sanitizeFn)),t},e._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},e._cleanTipClass=function(){var t=o.default(this.getTipElement()),e=t.attr("class").match(Ot);null!==e&&e.length&&t.removeClass(e.join(""))},e._handlePopperPlacementChange=function(t){this.tip=t.instance.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},e._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(o.default(t).removeClass(jt),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},t._jQueryInterface=function(e){return this.each((function(){var r=o.default(this),n=r.data(Dt),i="object"==typeof e&&e;if((n||!/dispose|hide/.test(e))&&(n||(n=new t(this,i),r.data(Dt,n)),"string"==typeof e)){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}}))},s(t,null,[{key:"VERSION",get:function(){return"4.6.1"}},{key:"Default",get:function(){return Ft}},{key:"NAME",get:function(){return Lt}},{key:"DATA_KEY",get:function(){return Dt}},{key:"Event",get:function(){return qt}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return Gt}}]),t}();o.default.fn.tooltip=Ht._jQueryInterface,o.default.fn.tooltip.Constructor=Ht,o.default.fn.tooltip.noConflict=function(){return o.default.fn.tooltip=Nt,Ht._jQueryInterface};var Bt="bs.popover",Ut=o.default.fn.popover,$t=new RegExp("(^|\\s)bs-popover\\S+","g"),Wt=l({},Ht.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Vt=l({},Ht.DefaultType,{content:"(string|element|function)"}),Kt={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},Yt=function(t){var e,r;function n(){return t.apply(this,arguments)||this}r=t,(e=n).prototype=Object.create(r.prototype),e.prototype.constructor=e,d(e,r);var i=n.prototype;return i.isWithContent=function(){return this.getTitle()||this._getContent()},i.addAttachmentClass=function(t){o.default(this.getTipElement()).addClass("bs-popover-"+t)},i.getTipElement=function(){return this.tip=this.tip||o.default(this.config.template)[0],this.tip},i.setContent=function(){var t=o.default(this.getTipElement());this.setElementContent(t.find(".popover-header"),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(".popover-body"),e),t.removeClass("fade show")},i._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},i._cleanTipClass=function(){var t=o.default(this.getTipElement()),e=t.attr("class").match($t);null!==e&&e.length>0&&t.removeClass(e.join(""))},n._jQueryInterface=function(t){return this.each((function(){var e=o.default(this).data(Bt),r="object"==typeof t?t:null;if((e||!/dispose|hide/.test(t))&&(e||(e=new n(this,r),o.default(this).data(Bt,e)),"string"==typeof t)){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}}))},s(n,null,[{key:"VERSION",get:function(){return"4.6.1"}},{key:"Default",get:function(){return Wt}},{key:"NAME",get:function(){return"popover"}},{key:"DATA_KEY",get:function(){return Bt}},{key:"Event",get:function(){return Kt}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return Vt}}]),n}(Ht);o.default.fn.popover=Yt._jQueryInterface,o.default.fn.popover.Constructor=Yt,o.default.fn.popover.noConflict=function(){return o.default.fn.popover=Ut,Yt._jQueryInterface};var Zt="scrollspy",Xt="bs.scrollspy",Qt=o.default.fn[Zt],Jt="active",te="position",ee=".nav, .list-group",re={offset:10,method:"auto",target:""},ne={offset:"number",method:"string",target:"(string|element)"},oe=function(){function t(t,e){var r=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" .nav-link,"+this._config.target+" .list-group-item,"+this._config.target+" .dropdown-item",this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,o.default(this._scrollElement).on("scroll.bs.scrollspy",(function(t){return r._process(t)})),this.refresh(),this._process()}var e=t.prototype;return e.refresh=function(){var t=this,e=this._scrollElement===this._scrollElement.window?"offset":te,r="auto"===this._config.method?e:this._config.method,n=r===te?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(t){var e,i=u.getSelectorFromElement(t);if(i&&(e=document.querySelector(i)),e){var a=e.getBoundingClientRect();if(a.width||a.height)return[o.default(e)[r]().top+n,i]}return null})).filter((function(t){return t})).sort((function(t,e){return t[0]-e[0]})).forEach((function(e){t._offsets.push(e[0]),t._targets.push(e[1])}))},e.dispose=function(){o.default.removeData(this._element,Xt),o.default(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},e._getConfig=function(t){if("string"!=typeof(t=l({},re,"object"==typeof t&&t?t:{})).target&&u.isElement(t.target)){var e=o.default(t.target).attr("id");e||(e=u.getUID(Zt),o.default(t.target).attr("id",e)),t.target="#"+e}return u.typeCheckConfig(Zt,t,ne),t},e._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},e._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},e._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},e._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),r=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=r){var n=this._targets[this._targets.length-1];this._activeTarget!==n&&this._activate(n)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;)this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1])&&this._activate(this._targets[o])}},e._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",").map((function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'})),r=o.default([].slice.call(document.querySelectorAll(e.join(","))));r.hasClass("dropdown-item")?(r.closest(".dropdown").find(".dropdown-toggle").addClass(Jt),r.addClass(Jt)):(r.addClass(Jt),r.parents(ee).prev(".nav-link, .list-group-item").addClass(Jt),r.parents(ee).prev(".nav-item").children(".nav-link").addClass(Jt)),o.default(this._scrollElement).trigger("activate.bs.scrollspy",{relatedTarget:t})},e._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(t){return t.classList.contains(Jt)})).forEach((function(t){return t.classList.remove(Jt)}))},t._jQueryInterface=function(e){return this.each((function(){var r=o.default(this).data(Xt);if(r||(r=new t(this,"object"==typeof e&&e),o.default(this).data(Xt,r)),"string"==typeof e){if(void 0===r[e])throw new TypeError('No method named "'+e+'"');r[e]()}}))},s(t,null,[{key:"VERSION",get:function(){return"4.6.1"}},{key:"Default",get:function(){return re}}]),t}();o.default(window).on("load.bs.scrollspy.data-api",(function(){for(var t=[].slice.call(document.querySelectorAll('[data-spy="scroll"]')),e=t.length;e--;){var r=o.default(t[e]);oe._jQueryInterface.call(r,r.data())}})),o.default.fn[Zt]=oe._jQueryInterface,o.default.fn[Zt].Constructor=oe,o.default.fn[Zt].noConflict=function(){return o.default.fn[Zt]=Qt,oe._jQueryInterface};var ie="bs.tab",ae=o.default.fn.tab,se="active",le=".active",de="> li > .active",ce=function(){function t(t){this._element=t}var e=t.prototype;return e.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&o.default(this._element).hasClass(se)||o.default(this._element).hasClass("disabled"))){var e,r,n=o.default(this._element).closest(".nav, .list-group")[0],i=u.getSelectorFromElement(this._element);if(n){var a="UL"===n.nodeName||"OL"===n.nodeName?de:le;r=(r=o.default.makeArray(o.default(n).find(a)))[r.length-1]}var s=o.default.Event("hide.bs.tab",{relatedTarget:this._element}),l=o.default.Event("show.bs.tab",{relatedTarget:r});if(r&&o.default(r).trigger(s),o.default(this._element).trigger(l),!l.isDefaultPrevented()&&!s.isDefaultPrevented()){i&&(e=document.querySelector(i)),this._activate(this._element,n);var d=function(){var e=o.default.Event("hidden.bs.tab",{relatedTarget:t._element}),n=o.default.Event("shown.bs.tab",{relatedTarget:r});o.default(r).trigger(e),o.default(t._element).trigger(n)};e?this._activate(e,e.parentNode,d):d()}}},e.dispose=function(){o.default.removeData(this._element,ie),this._element=null},e._activate=function(t,e,r){var n=this,i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?o.default(e).children(le):o.default(e).find(de))[0],a=r&&i&&o.default(i).hasClass("fade"),s=function(){return n._transitionComplete(t,i,r)};if(i&&a){var l=u.getTransitionDurationFromElement(i);o.default(i).removeClass("show").one(u.TRANSITION_END,s).emulateTransitionEnd(l)}else s()},e._transitionComplete=function(t,e,r){if(e){o.default(e).removeClass(se);var n=o.default(e.parentNode).find("> .dropdown-menu .active")[0];n&&o.default(n).removeClass(se),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}o.default(t).addClass(se),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),u.reflow(t),t.classList.contains("fade")&&t.classList.add("show");var i=t.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&o.default(i).hasClass("dropdown-menu")){var a=o.default(t).closest(".dropdown")[0];if(a){var s=[].slice.call(a.querySelectorAll(".dropdown-toggle"));o.default(s).addClass(se)}t.setAttribute("aria-expanded",!0)}r&&r()},t._jQueryInterface=function(e){return this.each((function(){var r=o.default(this),n=r.data(ie);if(n||(n=new t(this),r.data(ie,n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}}))},s(t,null,[{key:"VERSION",get:function(){return"4.6.1"}}]),t}();o.default(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',(function(t){t.preventDefault(),ce._jQueryInterface.call(o.default(this),"show")})),o.default.fn.tab=ce._jQueryInterface,o.default.fn.tab.Constructor=ce,o.default.fn.tab.noConflict=function(){return o.default.fn.tab=ae,ce._jQueryInterface};var ue="bs.toast",pe=o.default.fn.toast,he="show",fe="showing",me="click.dismiss.bs.toast",ge={animation:!0,autohide:!0,delay:500},be={animation:"boolean",autohide:"boolean",delay:"number"},ve=function(){function t(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners()}var e=t.prototype;return e.show=function(){var t=this,e=o.default.Event("show.bs.toast");if(o.default(this._element).trigger(e),!e.isDefaultPrevented()){this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");var r=function(){t._element.classList.remove(fe),t._element.classList.add(he),o.default(t._element).trigger("shown.bs.toast"),t._config.autohide&&(t._timeout=setTimeout((function(){t.hide()}),t._config.delay))};if(this._element.classList.remove("hide"),u.reflow(this._element),this._element.classList.add(fe),this._config.animation){var n=u.getTransitionDurationFromElement(this._element);o.default(this._element).one(u.TRANSITION_END,r).emulateTransitionEnd(n)}else r()}},e.hide=function(){if(this._element.classList.contains(he)){var t=o.default.Event("hide.bs.toast");o.default(this._element).trigger(t),t.isDefaultPrevented()||this._close()}},e.dispose=function(){this._clearTimeout(),this._element.classList.contains(he)&&this._element.classList.remove(he),o.default(this._element).off(me),o.default.removeData(this._element,ue),this._element=null,this._config=null},e._getConfig=function(t){return t=l({},ge,o.default(this._element).data(),"object"==typeof t&&t?t:{}),u.typeCheckConfig("toast",t,this.constructor.DefaultType),t},e._setListeners=function(){var t=this;o.default(this._element).on(me,'[data-dismiss="toast"]',(function(){return t.hide()}))},e._close=function(){var t=this,e=function(){t._element.classList.add("hide"),o.default(t._element).trigger("hidden.bs.toast")};if(this._element.classList.remove(he),this._config.animation){var r=u.getTransitionDurationFromElement(this._element);o.default(this._element).one(u.TRANSITION_END,e).emulateTransitionEnd(r)}else e()},e._clearTimeout=function(){clearTimeout(this._timeout),this._timeout=null},t._jQueryInterface=function(e){return this.each((function(){var r=o.default(this),n=r.data(ue);if(n||(n=new t(this,"object"==typeof e&&e),r.data(ue,n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e](this)}}))},s(t,null,[{key:"VERSION",get:function(){return"4.6.1"}},{key:"DefaultType",get:function(){return be}},{key:"Default",get:function(){return ge}}]),t}();o.default.fn.toast=ve._jQueryInterface,o.default.fn.toast.Constructor=ve,o.default.fn.toast.noConflict=function(){return o.default.fn.toast=pe,ve._jQueryInterface},t.Alert=f,t.Button=w,t.Carousel=M,t.Collapse=$,t.Dropdown=st,t.Modal=Et,t.Popover=Yt,t.Scrollspy=oe,t.Tab=ce,t.Toast=ve,t.Tooltip=Ht,t.Util=u,Object.defineProperty(t,"__esModule",{value:!0})}(e,r(1),r(64))},function(t,e,r){"use strict";r.r(e),function(t){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var r="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,n=function(){for(var t=["Edge","Trident","Firefox"],e=0;e<t.length;e+=1)if(r&&navigator.userAgent.indexOf(t[e])>=0)return 1;return 0}();var o=r&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then((function(){e=!1,t()})))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout((function(){e=!1,t()}),n))}};function i(t){return t&&"[object Function]"==={}.toString.call(t)}function a(t,e){if(1!==t.nodeType)return[];var r=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?r[e]:r}function s(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=a(t),r=e.overflow,n=e.overflowX,o=e.overflowY;return/(auto|scroll|overlay)/.test(r+o+n)?t:l(s(t))}function d(t){return t&&t.referenceNode?t.referenceNode:t}var c=r&&!(!window.MSInputMethodContext||!document.documentMode),u=r&&/MSIE 10/.test(navigator.userAgent);function p(t){return 11===t?c:10===t?u:c||u}function h(t){if(!t)return document.documentElement;for(var e=p(10)?document.body:null,r=t.offsetParent||null;r===e&&t.nextElementSibling;)r=(t=t.nextElementSibling).offsetParent;var n=r&&r.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TH","TD","TABLE"].indexOf(r.nodeName)&&"static"===a(r,"position")?h(r):r:t?t.ownerDocument.documentElement:document.documentElement}function f(t){return null!==t.parentNode?f(t.parentNode):t}function m(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var r=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,n=r?t:e,o=r?e:t,i=document.createRange();i.setStart(n,0),i.setEnd(o,0);var a,s,l=i.commonAncestorContainer;if(t!==l&&e!==l||n.contains(o))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&h(a.firstElementChild)!==a?h(l):l;var d=f(t);return d.host?m(d.host,e):m(t,f(e).host)}function g(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",r="top"===e?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var o=t.ownerDocument.documentElement,i=t.ownerDocument.scrollingElement||o;return i[r]}return t[r]}function b(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=g(e,"top"),o=g(e,"left"),i=r?-1:1;return t.top+=n*i,t.bottom+=n*i,t.left+=o*i,t.right+=o*i,t}function v(t,e){var r="x"===e?"Left":"Top",n="Left"===r?"Right":"Bottom";return parseFloat(t["border"+r+"Width"])+parseFloat(t["border"+n+"Width"])}function y(t,e,r,n){return Math.max(e["offset"+t],e["scroll"+t],r["client"+t],r["offset"+t],r["scroll"+t],p(10)?parseInt(r["offset"+t])+parseInt(n["margin"+("Height"===t?"Top":"Left")])+parseInt(n["margin"+("Height"===t?"Bottom":"Right")]):0)}function x(t){var e=t.body,r=t.documentElement,n=p(10)&&getComputedStyle(r);return{height:y("Height",e,r,n),width:y("Width",e,r,n)}}var w=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},_=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),k=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t},E=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t};function C(t){return E({},t,{right:t.left+t.width,bottom:t.top+t.height})}function T(t){var e={};try{if(p(10)){e=t.getBoundingClientRect();var r=g(t,"top"),n=g(t,"left");e.top+=r,e.left+=n,e.bottom+=r,e.right+=n}else e=t.getBoundingClientRect()}catch(t){}var o={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},i="HTML"===t.nodeName?x(t.ownerDocument):{},s=i.width||t.clientWidth||o.width,l=i.height||t.clientHeight||o.height,d=t.offsetWidth-s,c=t.offsetHeight-l;if(d||c){var u=a(t);d-=v(u,"x"),c-=v(u,"y"),o.width-=d,o.height-=c}return C(o)}function S(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=p(10),o="HTML"===e.nodeName,i=T(t),s=T(e),d=l(t),c=a(e),u=parseFloat(c.borderTopWidth),h=parseFloat(c.borderLeftWidth);r&&o&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var f=C({top:i.top-s.top-u,left:i.left-s.left-h,width:i.width,height:i.height});if(f.marginTop=0,f.marginLeft=0,!n&&o){var m=parseFloat(c.marginTop),g=parseFloat(c.marginLeft);f.top-=u-m,f.bottom-=u-m,f.left-=h-g,f.right-=h-g,f.marginTop=m,f.marginLeft=g}return(n&&!r?e.contains(d):e===d&&"BODY"!==d.nodeName)&&(f=b(f,e)),f}function A(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=t.ownerDocument.documentElement,n=S(t,r),o=Math.max(r.clientWidth,window.innerWidth||0),i=Math.max(r.clientHeight,window.innerHeight||0),a=e?0:g(r),s=e?0:g(r,"left"),l={top:a-n.top+n.marginTop,left:s-n.left+n.marginLeft,width:o,height:i};return C(l)}function L(t){var e=t.nodeName;if("BODY"===e||"HTML"===e)return!1;if("fixed"===a(t,"position"))return!0;var r=s(t);return!!r&&L(r)}function D(t){if(!t||!t.parentElement||p())return document.documentElement;for(var e=t.parentElement;e&&"none"===a(e,"transform");)e=e.parentElement;return e||document.documentElement}function N(t,e,r,n){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i={top:0,left:0},a=o?D(t):m(t,d(e));if("viewport"===n)i=A(a,o);else{var c=void 0;"scrollParent"===n?"BODY"===(c=l(s(e))).nodeName&&(c=t.ownerDocument.documentElement):c="window"===n?t.ownerDocument.documentElement:n;var u=S(c,a,o);if("HTML"!==c.nodeName||L(a))i=u;else{var p=x(t.ownerDocument),h=p.height,f=p.width;i.top+=u.top-u.marginTop,i.bottom=h+u.top,i.left+=u.left-u.marginLeft,i.right=f+u.left}}var g="number"==typeof(r=r||0);return i.left+=g?r:r.left||0,i.top+=g?r:r.top||0,i.right-=g?r:r.right||0,i.bottom-=g?r:r.bottom||0,i}function O(t){return t.width*t.height}function M(t,e,r,n,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=N(r,n,i,o),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},l=Object.keys(s).map((function(t){return E({key:t},s[t],{area:O(s[t])})})).sort((function(t,e){return e.area-t.area})),d=l.filter((function(t){var e=t.width,n=t.height;return e>=r.clientWidth&&n>=r.clientHeight})),c=d.length>0?d[0].key:l[0].key,u=t.split("-")[1];return c+(u?"-"+u:"")}function j(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=n?D(e):m(e,d(r));return S(r,o,n)}function z(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),r=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),n=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+n,height:t.offsetHeight+r}}function P(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,(function(t){return e[t]}))}function R(t,e,r){r=r.split("-")[0];var n=z(t),o={width:n.width,height:n.height},i=-1!==["right","left"].indexOf(r),a=i?"top":"left",s=i?"left":"top",l=i?"height":"width",d=i?"width":"height";return o[a]=e[a]+e[l]/2-n[l]/2,o[s]=r===s?e[s]-n[d]:e[P(s)],o}function I(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function F(t,e,r){return(void 0===r?t:t.slice(0,function(t,e,r){if(Array.prototype.findIndex)return t.findIndex((function(t){return t[e]===r}));var n=I(t,(function(t){return t[e]===r}));return t.indexOf(n)}(t,"name",r))).forEach((function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var r=t.function||t.fn;t.enabled&&i(r)&&(e.offsets.popper=C(e.offsets.popper),e.offsets.reference=C(e.offsets.reference),e=r(e,t))})),e}function G(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=j(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=M(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=R(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=F(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function q(t,e){return t.some((function(t){var r=t.name;return t.enabled&&r===e}))}function H(t){for(var e=[!1,"ms","Webkit","Moz","O"],r=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<e.length;n++){var o=e[n],i=o?""+o+r:t;if(void 0!==document.body.style[i])return i}return null}function B(){return this.state.isDestroyed=!0,q(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function U(t){var e=t.ownerDocument;return e?e.defaultView:window}function $(t,e,r,n){r.updateBound=n,U(t).addEventListener("resize",r.updateBound,{passive:!0});var o=l(t);return function t(e,r,n,o){var i="BODY"===e.nodeName,a=i?e.ownerDocument.defaultView:e;a.addEventListener(r,n,{passive:!0}),i||t(l(a.parentNode),r,n,o),o.push(a)}(o,"scroll",r.updateBound,r.scrollParents),r.scrollElement=o,r.eventsEnabled=!0,r}function W(){this.state.eventsEnabled||(this.state=$(this.reference,this.options,this.state,this.scheduleUpdate))}function V(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,U(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach((function(t){t.removeEventListener("scroll",e.updateBound)})),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function K(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function Y(t,e){Object.keys(e).forEach((function(r){var n="";-1!==["width","height","top","right","bottom","left"].indexOf(r)&&K(e[r])&&(n="px"),t.style[r]=e[r]+n}))}var Z=r&&/Firefox/i.test(navigator.userAgent);function X(t,e,r){var n=I(t,(function(t){return t.name===e})),o=!!n&&t.some((function(t){return t.name===r&&t.enabled&&t.order<n.order}));if(!o){var i="`"+e+"`",a="`"+r+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}var Q=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],J=Q.slice(3);function tt(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=J.indexOf(t),n=J.slice(r+1).concat(J.slice(0,r));return e?n.reverse():n}var et="flip",rt="clockwise",nt="counterclockwise";function ot(t,e,r,n){var o=[0,0],i=-1!==["right","left"].indexOf(n),a=t.split(/(\+|\-)/).map((function(t){return t.trim()})),s=a.indexOf(I(a,(function(t){return-1!==t.search(/,|\s/)})));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,d=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(d=d.map((function(t,n){var o=(1===n?!i:i)?"height":"width",a=!1;return t.reduce((function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)}),[]).map((function(t){return function(t,e,r,n){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],a=o[2];if(!i)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=r;break;case"%":case"%r":default:s=n}return C(s)[e]/100*i}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i}return i}(t,o,e,r)}))}))).forEach((function(t,e){t.forEach((function(r,n){K(r)&&(o[e]+=r*("-"===t[n-1]?-1:1))}))})),o}var it={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,r=e.split("-")[0],n=e.split("-")[1];if(n){var o=t.offsets,i=o.reference,a=o.popper,s=-1!==["bottom","top"].indexOf(r),l=s?"left":"top",d=s?"width":"height",c={start:k({},l,i[l]),end:k({},l,i[l]+i[d]-a[d])};t.offsets.popper=E({},a,c[n])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var r=e.offset,n=t.placement,o=t.offsets,i=o.popper,a=o.reference,s=n.split("-")[0],l=void 0;return l=K(+r)?[+r,0]:ot(r,i,a,s),"left"===s?(i.top+=l[0],i.left-=l[1]):"right"===s?(i.top+=l[0],i.left+=l[1]):"top"===s?(i.left+=l[0],i.top-=l[1]):"bottom"===s&&(i.left+=l[0],i.top+=l[1]),t.popper=i,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var r=e.boundariesElement||h(t.instance.popper);t.instance.reference===r&&(r=h(r));var n=H("transform"),o=t.instance.popper.style,i=o.top,a=o.left,s=o[n];o.top="",o.left="",o[n]="";var l=N(t.instance.popper,t.instance.reference,e.padding,r,t.positionFixed);o.top=i,o.left=a,o[n]=s,e.boundaries=l;var d=e.priority,c=t.offsets.popper,u={primary:function(t){var r=c[t];return c[t]<l[t]&&!e.escapeWithReference&&(r=Math.max(c[t],l[t])),k({},t,r)},secondary:function(t){var r="right"===t?"left":"top",n=c[r];return c[t]>l[t]&&!e.escapeWithReference&&(n=Math.min(c[r],l[t]-("right"===t?c.width:c.height))),k({},r,n)}};return d.forEach((function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";c=E({},c,u[e](t))})),t.offsets.popper=c,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,r=e.popper,n=e.reference,o=t.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),s=a?"right":"bottom",l=a?"left":"top",d=a?"width":"height";return r[s]<i(n[l])&&(t.offsets.popper[l]=i(n[l])-r[d]),r[l]>i(n[s])&&(t.offsets.popper[l]=i(n[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var r;if(!X(t.instance.modifiers,"arrow","keepTogether"))return t;var n=e.element;if("string"==typeof n){if(!(n=t.instance.popper.querySelector(n)))return t}else if(!t.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var o=t.placement.split("-")[0],i=t.offsets,s=i.popper,l=i.reference,d=-1!==["left","right"].indexOf(o),c=d?"height":"width",u=d?"Top":"Left",p=u.toLowerCase(),h=d?"left":"top",f=d?"bottom":"right",m=z(n)[c];l[f]-m<s[p]&&(t.offsets.popper[p]-=s[p]-(l[f]-m)),l[p]+m>s[f]&&(t.offsets.popper[p]+=l[p]+m-s[f]),t.offsets.popper=C(t.offsets.popper);var g=l[p]+l[c]/2-m/2,b=a(t.instance.popper),v=parseFloat(b["margin"+u]),y=parseFloat(b["border"+u+"Width"]),x=g-t.offsets.popper[p]-v-y;return x=Math.max(Math.min(s[c]-m,x),0),t.arrowElement=n,t.offsets.arrow=(k(r={},p,Math.round(x)),k(r,h,""),r),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(q(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var r=N(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),n=t.placement.split("-")[0],o=P(n),i=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case et:a=[n,o];break;case rt:a=tt(n);break;case nt:a=tt(n,!0);break;default:a=e.behavior}return a.forEach((function(s,l){if(n!==s||a.length===l+1)return t;n=t.placement.split("-")[0],o=P(n);var d=t.offsets.popper,c=t.offsets.reference,u=Math.floor,p="left"===n&&u(d.right)>u(c.left)||"right"===n&&u(d.left)<u(c.right)||"top"===n&&u(d.bottom)>u(c.top)||"bottom"===n&&u(d.top)<u(c.bottom),h=u(d.left)<u(r.left),f=u(d.right)>u(r.right),m=u(d.top)<u(r.top),g=u(d.bottom)>u(r.bottom),b="left"===n&&h||"right"===n&&f||"top"===n&&m||"bottom"===n&&g,v=-1!==["top","bottom"].indexOf(n),y=!!e.flipVariations&&(v&&"start"===i&&h||v&&"end"===i&&f||!v&&"start"===i&&m||!v&&"end"===i&&g),x=!!e.flipVariationsByContent&&(v&&"start"===i&&f||v&&"end"===i&&h||!v&&"start"===i&&g||!v&&"end"===i&&m),w=y||x;(p||b||w)&&(t.flipped=!0,(p||b)&&(n=a[l+1]),w&&(i=function(t){return"end"===t?"start":"start"===t?"end":t}(i)),t.placement=n+(i?"-"+i:""),t.offsets.popper=E({},t.offsets.popper,R(t.instance.popper,t.offsets.reference,t.placement)),t=F(t.instance.modifiers,t,"flip"))})),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,r=e.split("-")[0],n=t.offsets,o=n.popper,i=n.reference,a=-1!==["left","right"].indexOf(r),s=-1===["top","left"].indexOf(r);return o[a?"left":"top"]=i[r]-(s?o[a?"width":"height"]:0),t.placement=P(e),t.offsets.popper=C(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!X(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,r=I(t.instance.modifiers,(function(t){return"preventOverflow"===t.name})).boundaries;if(e.bottom<r.top||e.left>r.right||e.top>r.bottom||e.right<r.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var r=e.x,n=e.y,o=t.offsets.popper,i=I(t.instance.modifiers,(function(t){return"applyStyle"===t.name})).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==i?i:e.gpuAcceleration,s=h(t.instance.popper),l=T(s),d={position:o.position},c=function(t,e){var r=t.offsets,n=r.popper,o=r.reference,i=Math.round,a=Math.floor,s=function(t){return t},l=i(o.width),d=i(n.width),c=-1!==["left","right"].indexOf(t.placement),u=-1!==t.placement.indexOf("-"),p=e?c||u||l%2==d%2?i:a:s,h=e?i:s;return{left:p(l%2==1&&d%2==1&&!u&&e?n.left-1:n.left),top:h(n.top),bottom:h(n.bottom),right:p(n.right)}}(t,window.devicePixelRatio<2||!Z),u="bottom"===r?"top":"bottom",p="right"===n?"left":"right",f=H("transform"),m=void 0,g=void 0;if(g="bottom"===u?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-l.height+c.bottom:c.top,m="right"===p?"HTML"===s.nodeName?-s.clientWidth+c.right:-l.width+c.right:c.left,a&&f)d[f]="translate3d("+m+"px, "+g+"px, 0)",d[u]=0,d[p]=0,d.willChange="transform";else{var b="bottom"===u?-1:1,v="right"===p?-1:1;d[u]=g*b,d[p]=m*v,d.willChange=u+", "+p}var y={"x-placement":t.placement};return t.attributes=E({},y,t.attributes),t.styles=E({},d,t.styles),t.arrowStyles=E({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,r;return Y(t.instance.popper,t.styles),e=t.instance.popper,r=t.attributes,Object.keys(r).forEach((function(t){!1!==r[t]?e.setAttribute(t,r[t]):e.removeAttribute(t)})),t.arrowElement&&Object.keys(t.arrowStyles).length&&Y(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,r,n,o){var i=j(o,e,t,r.positionFixed),a=M(r.placement,i,e,t,r.modifiers.flip.boundariesElement,r.modifiers.flip.padding);return e.setAttribute("x-placement",a),Y(e,{position:r.positionFixed?"fixed":"absolute"}),r},gpuAcceleration:void 0}}},at=function(){function t(e,r){var n=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=o(this.update.bind(this)),this.options=E({},t.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=r&&r.jquery?r[0]:r,this.options.modifiers={},Object.keys(E({},t.Defaults.modifiers,a.modifiers)).forEach((function(e){n.options.modifiers[e]=E({},t.Defaults.modifiers[e]||{},a.modifiers?a.modifiers[e]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(t){return E({name:t},n.options.modifiers[t])})).sort((function(t,e){return t.order-e.order})),this.modifiers.forEach((function(t){t.enabled&&i(t.onLoad)&&t.onLoad(n.reference,n.popper,n.options,t,n.state)})),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return _(t,[{key:"update",value:function(){return G.call(this)}},{key:"destroy",value:function(){return B.call(this)}},{key:"enableEventListeners",value:function(){return W.call(this)}},{key:"disableEventListeners",value:function(){return V.call(this)}}]),t}();at.Utils=("undefined"!=typeof window?window:t).PopperUtils,at.placements=Q,at.Defaults=it,e.default=at}.call(this,r(26))},function(t,e,r){(function(n){var o,i,a;/*! Select2 4.0.13 | https://github.com/select2/select2/blob/master/LICENSE.md */i=[r(1)],void 0===(a="function"==typeof(o=function(t){var e=function(){if(t&&t.fn&&t.fn.select2&&t.fn.select2.amd)var e=t.fn.select2.amd;var r,o,i,a,s,l,d,c,u,p,h,f,m,g,b;function v(t,e){return m.call(t,e)}function y(t,e){var r,n,o,i,a,s,l,d,c,u,p,f=e&&e.split("/"),m=h.map,g=m&&m["*"]||{};if(t){for(a=(t=t.split("/")).length-1,h.nodeIdCompat&&b.test(t[a])&&(t[a]=t[a].replace(b,"")),"."===t[0].charAt(0)&&f&&(t=f.slice(0,f.length-1).concat(t)),c=0;c<t.length;c++)if("."===(p=t[c]))t.splice(c,1),--c;else if(".."===p){if(0===c||1===c&&".."===t[2]||".."===t[c-1])continue;0<c&&(t.splice(c-1,2),c-=2)}t=t.join("/")}if((f||g)&&m){for(c=(r=t.split("/")).length;0<c;--c){if(n=r.slice(0,c).join("/"),f)for(u=f.length;0<u;--u)if(o=(o=m[f.slice(0,u).join("/")])&&o[n]){i=o,s=c;break}if(i)break;!l&&g&&g[n]&&(l=g[n],d=c)}!i&&l&&(i=l,s=d),i&&(r.splice(0,s,i),t=r.join("/"))}return t}function x(t,e){return function(){var r=g.call(arguments,0);return"string"!=typeof r[0]&&1===r.length&&r.push(null),l.apply(a,r.concat([t,e]))}}function w(t){return function(e){u[t]=e}}function _(t){if(v(p,t)){var e=p[t];delete p[t],f[t]=!0,s.apply(a,e)}if(!v(u,t)&&!v(f,t))throw new Error("No "+t);return u[t]}function k(t){var e,r=t?t.indexOf("!"):-1;return-1<r&&(e=t.substring(0,r),t=t.substring(r+1,t.length)),[e,t]}function E(t){return t?k(t):[]}return e&&e.requirejs||(e?o=e:e={},u={},p={},h={},f={},m=Object.prototype.hasOwnProperty,g=[].slice,b=/\.js$/,d=function(t,e){var r,n,o=k(t),i=o[0],a=e[1];return t=o[1],i&&(r=_(i=y(i,a))),i?t=r&&r.normalize?r.normalize(t,(n=a,function(t){return y(t,n)})):y(t,a):(i=(o=k(t=y(t,a)))[0],t=o[1],i&&(r=_(i))),{f:i?i+"!"+t:t,n:t,pr:i,p:r}},c={require:function(t){return x(t)},exports:function(t){var e=u[t];return void 0!==e?e:u[t]={}},module:function(t){return{id:t,uri:"",exports:u[t],config:(e=t,function(){return h&&h.config&&h.config[e]||{}})};var e}},s=function(t,e,r,n){var o,i,s,l,h,m,g,b=[],y=typeof r;if(m=E(n=n||t),"undefined"==y||"function"==y){for(e=!e.length&&r.length?["require","exports","module"]:e,h=0;h<e.length;h+=1)if("require"===(i=(l=d(e[h],m)).f))b[h]=c.require(t);else if("exports"===i)b[h]=c.exports(t),g=!0;else if("module"===i)o=b[h]=c.module(t);else if(v(u,i)||v(p,i)||v(f,i))b[h]=_(i);else{if(!l.p)throw new Error(t+" missing "+i);l.p.load(l.n,x(n,!0),w(i),{}),b[h]=u[i]}s=r?r.apply(u[t],b):void 0,t&&(o&&o.exports!==a&&o.exports!==u[t]?u[t]=o.exports:s===a&&g||(u[t]=s))}else t&&(u[t]=r)},r=o=l=function(t,e,r,n,o){if("string"==typeof t)return c[t]?c[t](e):_(d(t,E(e)).f);if(!t.splice){if((h=t).deps&&l(h.deps,h.callback),!e)return;e.splice?(t=e,e=r,r=null):t=a}return e=e||function(){},"function"==typeof r&&(r=n,n=o),n?s(a,t,e,r):setTimeout((function(){s(a,t,e,r)}),4),l},l.config=function(t){return l(t)},r._defined=u,(i=function(t,e,r){if("string"!=typeof t)throw new Error("See almond README: incorrect module build, no module name");e.splice||(r=e,e=[]),v(u,t)||v(p,t)||(p[t]=[t,e,r])}).amd={jQuery:!0},e.requirejs=r,e.require=o,e.define=i),e.define("almond",(function(){})),e.define("jquery",[],(function(){var e=t||n;return null==e&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),e})),e.define("select2/utils",["jquery"],(function(t){var e={};function r(t){var e=t.prototype,r=[];for(var n in e)"function"==typeof e[n]&&"constructor"!==n&&r.push(n);return r}function n(){this.listeners={}}e.Extend=function(t,e){var r={}.hasOwnProperty;function n(){this.constructor=t}for(var o in e)r.call(e,o)&&(t[o]=e[o]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},e.Decorate=function(t,e){var n=r(e),o=r(t);function i(){var r=Array.prototype.unshift,n=e.prototype.constructor.length,o=t.prototype.constructor;0<n&&(r.call(arguments,t.prototype.constructor),o=e.prototype.constructor),o.apply(this,arguments)}e.displayName=t.displayName,i.prototype=new function(){this.constructor=i};for(var a=0;a<o.length;a++){var s=o[a];i.prototype[s]=t.prototype[s]}function l(t){var r=function(){};t in i.prototype&&(r=i.prototype[t]);var n=e.prototype[t];return function(){return Array.prototype.unshift.call(arguments,r),n.apply(this,arguments)}}for(var d=0;d<n.length;d++){var c=n[d];i.prototype[c]=l(c)}return i},n.prototype.on=function(t,e){this.listeners=this.listeners||{},t in this.listeners?this.listeners[t].push(e):this.listeners[t]=[e]},n.prototype.trigger=function(t){var e=Array.prototype.slice,r=e.call(arguments,1);this.listeners=this.listeners||{},null==r&&(r=[]),0===r.length&&r.push({}),(r[0]._type=t)in this.listeners&&this.invoke(this.listeners[t],e.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},n.prototype.invoke=function(t,e){for(var r=0,n=t.length;r<n;r++)t[r].apply(this,e)},e.Observable=n,e.generateChars=function(t){for(var e="",r=0;r<t;r++)e+=Math.floor(36*Math.random()).toString(36);return e},e.bind=function(t,e){return function(){t.apply(e,arguments)}},e._convertData=function(t){for(var e in t){var r=e.split("-"),n=t;if(1!==r.length){for(var o=0;o<r.length;o++){var i=r[o];(i=i.substring(0,1).toLowerCase()+i.substring(1))in n||(n[i]={}),o==r.length-1&&(n[i]=t[e]),n=n[i]}delete t[e]}}return t},e.hasScroll=function(e,r){var n=t(r),o=r.style.overflowX,i=r.style.overflowY;return(o!==i||"hidden"!==i&&"visible"!==i)&&("scroll"===o||"scroll"===i||n.innerHeight()<r.scrollHeight||n.innerWidth()<r.scrollWidth)},e.escapeMarkup=function(t){var e={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof t?t:String(t).replace(/[&<>"'\/\\]/g,(function(t){return e[t]}))},e.appendMany=function(e,r){if("1.7"===t.fn.jquery.substr(0,3)){var n=t();t.map(r,(function(t){n=n.add(t)})),r=n}e.append(r)},e.__cache={};var o=0;return e.GetUniqueElementId=function(t){var e=t.getAttribute("data-select2-id");return null==e&&(t.id?(e=t.id,t.setAttribute("data-select2-id",e)):(t.setAttribute("data-select2-id",++o),e=o.toString())),e},e.StoreData=function(t,r,n){var o=e.GetUniqueElementId(t);e.__cache[o]||(e.__cache[o]={}),e.__cache[o][r]=n},e.GetData=function(r,n){var o=e.GetUniqueElementId(r);return n?e.__cache[o]&&null!=e.__cache[o][n]?e.__cache[o][n]:t(r).data(n):e.__cache[o]},e.RemoveData=function(t){var r=e.GetUniqueElementId(t);null!=e.__cache[r]&&delete e.__cache[r],t.removeAttribute("data-select2-id")},e})),e.define("select2/results",["jquery","./utils"],(function(t,e){function r(t,e,n){this.$element=t,this.data=n,this.options=e,r.__super__.constructor.call(this)}return e.Extend(r,e.Observable),r.prototype.render=function(){var e=t('<ul class="select2-results__options" role="listbox"></ul>');return this.options.get("multiple")&&e.attr("aria-multiselectable","true"),this.$results=e},r.prototype.clear=function(){this.$results.empty()},r.prototype.displayMessage=function(e){var r=this.options.get("escapeMarkup");this.clear(),this.hideLoading();var n=t('<li role="alert" aria-live="assertive" class="select2-results__option"></li>'),o=this.options.get("translations").get(e.message);n.append(r(o(e.args))),n[0].className+=" select2-results__message",this.$results.append(n)},r.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},r.prototype.append=function(t){this.hideLoading();var e=[];if(null!=t.results&&0!==t.results.length){t.results=this.sort(t.results);for(var r=0;r<t.results.length;r++){var n=t.results[r],o=this.option(n);e.push(o)}this.$results.append(e)}else 0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"})},r.prototype.position=function(t,e){e.find(".select2-results").append(t)},r.prototype.sort=function(t){return this.options.get("sorter")(t)},r.prototype.highlightFirstItem=function(){var t=this.$results.find(".select2-results__option[aria-selected]"),e=t.filter("[aria-selected=true]");0<e.length?e.first().trigger("mouseenter"):t.first().trigger("mouseenter"),this.ensureHighlightVisible()},r.prototype.setClasses=function(){var r=this;this.data.current((function(n){var o=t.map(n,(function(t){return t.id.toString()}));r.$results.find(".select2-results__option[aria-selected]").each((function(){var r=t(this),n=e.GetData(this,"data"),i=""+n.id;null!=n.element&&n.element.selected||null==n.element&&-1<t.inArray(i,o)?r.attr("aria-selected","true"):r.attr("aria-selected","false")}))}))},r.prototype.showLoading=function(t){this.hideLoading();var e={disabled:!0,loading:!0,text:this.options.get("translations").get("searching")(t)},r=this.option(e);r.className+=" loading-results",this.$results.prepend(r)},r.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},r.prototype.option=function(r){var n=document.createElement("li");n.className="select2-results__option";var o={role:"option","aria-selected":"false"},i=window.Element.prototype.matches||window.Element.prototype.msMatchesSelector||window.Element.prototype.webkitMatchesSelector;for(var a in(null!=r.element&&i.call(r.element,":disabled")||null==r.element&&r.disabled)&&(delete o["aria-selected"],o["aria-disabled"]="true"),null==r.id&&delete o["aria-selected"],null!=r._resultId&&(n.id=r._resultId),r.title&&(n.title=r.title),r.children&&(o.role="group",o["aria-label"]=r.text,delete o["aria-selected"]),o){var s=o[a];n.setAttribute(a,s)}if(r.children){var l=t(n),d=document.createElement("strong");d.className="select2-results__group",t(d),this.template(r,d);for(var c=[],u=0;u<r.children.length;u++){var p=r.children[u],h=this.option(p);c.push(h)}var f=t("<ul></ul>",{class:"select2-results__options select2-results__options--nested"});f.append(c),l.append(d),l.append(f)}else this.template(r,n);return e.StoreData(n,"data",r),n},r.prototype.bind=function(r,n){var o=this,i=r.id+"-results";this.$results.attr("id",i),r.on("results:all",(function(t){o.clear(),o.append(t.data),r.isOpen()&&(o.setClasses(),o.highlightFirstItem())})),r.on("results:append",(function(t){o.append(t.data),r.isOpen()&&o.setClasses()})),r.on("query",(function(t){o.hideMessages(),o.showLoading(t)})),r.on("select",(function(){r.isOpen()&&(o.setClasses(),o.options.get("scrollAfterSelect")&&o.highlightFirstItem())})),r.on("unselect",(function(){r.isOpen()&&(o.setClasses(),o.options.get("scrollAfterSelect")&&o.highlightFirstItem())})),r.on("open",(function(){o.$results.attr("aria-expanded","true"),o.$results.attr("aria-hidden","false"),o.setClasses(),o.ensureHighlightVisible()})),r.on("close",(function(){o.$results.attr("aria-expanded","false"),o.$results.attr("aria-hidden","true"),o.$results.removeAttr("aria-activedescendant")})),r.on("results:toggle",(function(){var t=o.getHighlightedResults();0!==t.length&&t.trigger("mouseup")})),r.on("results:select",(function(){var t=o.getHighlightedResults();if(0!==t.length){var r=e.GetData(t[0],"data");"true"==t.attr("aria-selected")?o.trigger("close",{}):o.trigger("select",{data:r})}})),r.on("results:previous",(function(){var t=o.getHighlightedResults(),e=o.$results.find("[aria-selected]"),r=e.index(t);if(!(r<=0)){var n=r-1;0===t.length&&(n=0);var i=e.eq(n);i.trigger("mouseenter");var a=o.$results.offset().top,s=i.offset().top,l=o.$results.scrollTop()+(s-a);0===n?o.$results.scrollTop(0):s-a<0&&o.$results.scrollTop(l)}})),r.on("results:next",(function(){var t=o.getHighlightedResults(),e=o.$results.find("[aria-selected]"),r=e.index(t)+1;if(!(r>=e.length)){var n=e.eq(r);n.trigger("mouseenter");var i=o.$results.offset().top+o.$results.outerHeight(!1),a=n.offset().top+n.outerHeight(!1),s=o.$results.scrollTop()+a-i;0===r?o.$results.scrollTop(0):i<a&&o.$results.scrollTop(s)}})),r.on("results:focus",(function(t){t.element.addClass("select2-results__option--highlighted")})),r.on("results:message",(function(t){o.displayMessage(t)})),t.fn.mousewheel&&this.$results.on("mousewheel",(function(t){var e=o.$results.scrollTop(),r=o.$results.get(0).scrollHeight-e+t.deltaY,n=0<t.deltaY&&e-t.deltaY<=0,i=t.deltaY<0&&r<=o.$results.height();n?(o.$results.scrollTop(0),t.preventDefault(),t.stopPropagation()):i&&(o.$results.scrollTop(o.$results.get(0).scrollHeight-o.$results.height()),t.preventDefault(),t.stopPropagation())})),this.$results.on("mouseup",".select2-results__option[aria-selected]",(function(r){var n=t(this),i=e.GetData(this,"data");"true"!==n.attr("aria-selected")?o.trigger("select",{originalEvent:r,data:i}):o.options.get("multiple")?o.trigger("unselect",{originalEvent:r,data:i}):o.trigger("close",{})})),this.$results.on("mouseenter",".select2-results__option[aria-selected]",(function(r){var n=e.GetData(this,"data");o.getHighlightedResults().removeClass("select2-results__option--highlighted"),o.trigger("results:focus",{data:n,element:t(this)})}))},r.prototype.getHighlightedResults=function(){return this.$results.find(".select2-results__option--highlighted")},r.prototype.destroy=function(){this.$results.remove()},r.prototype.ensureHighlightVisible=function(){var t=this.getHighlightedResults();if(0!==t.length){var e=this.$results.find("[aria-selected]").index(t),r=this.$results.offset().top,n=t.offset().top,o=this.$results.scrollTop()+(n-r),i=n-r;o-=2*t.outerHeight(!1),e<=2?this.$results.scrollTop(0):(i>this.$results.outerHeight()||i<0)&&this.$results.scrollTop(o)}},r.prototype.template=function(e,r){var n=this.options.get("templateResult"),o=this.options.get("escapeMarkup"),i=n(e,r);null==i?r.style.display="none":"string"==typeof i?r.innerHTML=o(i):t(r).append(i)},r})),e.define("select2/keys",[],(function(){return{BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46}})),e.define("select2/selection/base",["jquery","../utils","../keys"],(function(t,e,r){function n(t,e){this.$element=t,this.options=e,n.__super__.constructor.call(this)}return e.Extend(n,e.Observable),n.prototype.render=function(){var r=t('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=e.GetData(this.$element[0],"old-tabindex")?this._tabindex=e.GetData(this.$element[0],"old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),r.attr("title",this.$element.attr("title")),r.attr("tabindex",this._tabindex),r.attr("aria-disabled","false"),this.$selection=r},n.prototype.bind=function(t,e){var n=this,o=t.id+"-results";this.container=t,this.$selection.on("focus",(function(t){n.trigger("focus",t)})),this.$selection.on("blur",(function(t){n._handleBlur(t)})),this.$selection.on("keydown",(function(t){n.trigger("keypress",t),t.which===r.SPACE&&t.preventDefault()})),t.on("results:focus",(function(t){n.$selection.attr("aria-activedescendant",t.data._resultId)})),t.on("selection:update",(function(t){n.update(t.data)})),t.on("open",(function(){n.$selection.attr("aria-expanded","true"),n.$selection.attr("aria-owns",o),n._attachCloseHandler(t)})),t.on("close",(function(){n.$selection.attr("aria-expanded","false"),n.$selection.removeAttr("aria-activedescendant"),n.$selection.removeAttr("aria-owns"),n.$selection.trigger("focus"),n._detachCloseHandler(t)})),t.on("enable",(function(){n.$selection.attr("tabindex",n._tabindex),n.$selection.attr("aria-disabled","false")})),t.on("disable",(function(){n.$selection.attr("tabindex","-1"),n.$selection.attr("aria-disabled","true")}))},n.prototype._handleBlur=function(e){var r=this;window.setTimeout((function(){document.activeElement==r.$selection[0]||t.contains(r.$selection[0],document.activeElement)||r.trigger("blur",e)}),1)},n.prototype._attachCloseHandler=function(r){t(document.body).on("mousedown.select2."+r.id,(function(r){var n=t(r.target).closest(".select2");t(".select2.select2-container--open").each((function(){this!=n[0]&&e.GetData(this,"element").select2("close")}))}))},n.prototype._detachCloseHandler=function(e){t(document.body).off("mousedown.select2."+e.id)},n.prototype.position=function(t,e){e.find(".selection").append(t)},n.prototype.destroy=function(){this._detachCloseHandler(this.container)},n.prototype.update=function(t){throw new Error("The `update` method must be defined in child classes.")},n.prototype.isEnabled=function(){return!this.isDisabled()},n.prototype.isDisabled=function(){return this.options.get("disabled")},n})),e.define("select2/selection/single",["jquery","./base","../utils","../keys"],(function(t,e,r,n){function o(){o.__super__.constructor.apply(this,arguments)}return r.Extend(o,e),o.prototype.render=function(){var t=o.__super__.render.call(this);return t.addClass("select2-selection--single"),t.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),t},o.prototype.bind=function(t,e){var r=this;o.__super__.bind.apply(this,arguments);var n=t.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",n).attr("role","textbox").attr("aria-readonly","true"),this.$selection.attr("aria-labelledby",n),this.$selection.on("mousedown",(function(t){1===t.which&&r.trigger("toggle",{originalEvent:t})})),this.$selection.on("focus",(function(t){})),this.$selection.on("blur",(function(t){})),t.on("focus",(function(e){t.isOpen()||r.$selection.trigger("focus")}))},o.prototype.clear=function(){var t=this.$selection.find(".select2-selection__rendered");t.empty(),t.removeAttr("title")},o.prototype.display=function(t,e){var r=this.options.get("templateSelection");return this.options.get("escapeMarkup")(r(t,e))},o.prototype.selectionContainer=function(){return t("<span></span>")},o.prototype.update=function(t){if(0!==t.length){var e=t[0],r=this.$selection.find(".select2-selection__rendered"),n=this.display(e,r);r.empty().append(n);var o=e.title||e.text;o?r.attr("title",o):r.removeAttr("title")}else this.clear()},o})),e.define("select2/selection/multiple",["jquery","./base","../utils"],(function(t,e,r){function n(t,e){n.__super__.constructor.apply(this,arguments)}return r.Extend(n,e),n.prototype.render=function(){var t=n.__super__.render.call(this);return t.addClass("select2-selection--multiple"),t.html('<ul class="select2-selection__rendered"></ul>'),t},n.prototype.bind=function(e,o){var i=this;n.__super__.bind.apply(this,arguments),this.$selection.on("click",(function(t){i.trigger("toggle",{originalEvent:t})})),this.$selection.on("click",".select2-selection__choice__remove",(function(e){if(!i.isDisabled()){var n=t(this).parent(),o=r.GetData(n[0],"data");i.trigger("unselect",{originalEvent:e,data:o})}}))},n.prototype.clear=function(){var t=this.$selection.find(".select2-selection__rendered");t.empty(),t.removeAttr("title")},n.prototype.display=function(t,e){var r=this.options.get("templateSelection");return this.options.get("escapeMarkup")(r(t,e))},n.prototype.selectionContainer=function(){return t('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>')},n.prototype.update=function(t){if(this.clear(),0!==t.length){for(var e=[],n=0;n<t.length;n++){var o=t[n],i=this.selectionContainer(),a=this.display(o,i);i.append(a);var s=o.title||o.text;s&&i.attr("title",s),r.StoreData(i[0],"data",o),e.push(i)}var l=this.$selection.find(".select2-selection__rendered");r.appendMany(l,e)}},n})),e.define("select2/selection/placeholder",["../utils"],(function(t){function e(t,e,r){this.placeholder=this.normalizePlaceholder(r.get("placeholder")),t.call(this,e,r)}return e.prototype.normalizePlaceholder=function(t,e){return"string"==typeof e&&(e={id:"",text:e}),e},e.prototype.createPlaceholder=function(t,e){var r=this.selectionContainer();return r.html(this.display(e)),r.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"),r},e.prototype.update=function(t,e){var r=1==e.length&&e[0].id!=this.placeholder.id;if(1<e.length||r)return t.call(this,e);this.clear();var n=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(n)},e})),e.define("select2/selection/allowClear",["jquery","../keys","../utils"],(function(t,e,r){function n(){}return n.prototype.bind=function(t,e,r){var n=this;t.call(this,e,r),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",(function(t){n._handleClear(t)})),e.on("keypress",(function(t){n._handleKeyboardClear(t,e)}))},n.prototype._handleClear=function(t,e){if(!this.isDisabled()){var n=this.$selection.find(".select2-selection__clear");if(0!==n.length){e.stopPropagation();var o=r.GetData(n[0],"data"),i=this.$element.val();this.$element.val(this.placeholder.id);var a={data:o};if(this.trigger("clear",a),a.prevented)this.$element.val(i);else{for(var s=0;s<o.length;s++)if(a={data:o[s]},this.trigger("unselect",a),a.prevented)return void this.$element.val(i);this.$element.trigger("input").trigger("change"),this.trigger("toggle",{})}}}},n.prototype._handleKeyboardClear=function(t,r,n){n.isOpen()||r.which!=e.DELETE&&r.which!=e.BACKSPACE||this._handleClear(r)},n.prototype.update=function(e,n){if(e.call(this,n),!(0<this.$selection.find(".select2-selection__placeholder").length||0===n.length)){var o=this.options.get("translations").get("removeAllItems"),i=t('<span class="select2-selection__clear" title="'+o()+'">&times;</span>');r.StoreData(i[0],"data",n),this.$selection.find(".select2-selection__rendered").prepend(i)}},n})),e.define("select2/selection/search",["jquery","../utils","../keys"],(function(t,e,r){function n(t,e,r){t.call(this,e,r)}return n.prototype.render=function(e){var r=t('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></li>');this.$searchContainer=r,this.$search=r.find("input");var n=e.call(this);return this._transferTabIndex(),n},n.prototype.bind=function(t,n,o){var i=this,a=n.id+"-results";t.call(this,n,o),n.on("open",(function(){i.$search.attr("aria-controls",a),i.$search.trigger("focus")})),n.on("close",(function(){i.$search.val(""),i.$search.removeAttr("aria-controls"),i.$search.removeAttr("aria-activedescendant"),i.$search.trigger("focus")})),n.on("enable",(function(){i.$search.prop("disabled",!1),i._transferTabIndex()})),n.on("disable",(function(){i.$search.prop("disabled",!0)})),n.on("focus",(function(t){i.$search.trigger("focus")})),n.on("results:focus",(function(t){t.data._resultId?i.$search.attr("aria-activedescendant",t.data._resultId):i.$search.removeAttr("aria-activedescendant")})),this.$selection.on("focusin",".select2-search--inline",(function(t){i.trigger("focus",t)})),this.$selection.on("focusout",".select2-search--inline",(function(t){i._handleBlur(t)})),this.$selection.on("keydown",".select2-search--inline",(function(t){if(t.stopPropagation(),i.trigger("keypress",t),i._keyUpPrevented=t.isDefaultPrevented(),t.which===r.BACKSPACE&&""===i.$search.val()){var n=i.$searchContainer.prev(".select2-selection__choice");if(0<n.length){var o=e.GetData(n[0],"data");i.searchRemoveChoice(o),t.preventDefault()}}})),this.$selection.on("click",".select2-search--inline",(function(t){i.$search.val()&&t.stopPropagation()}));var s=document.documentMode,l=s&&s<=11;this.$selection.on("input.searchcheck",".select2-search--inline",(function(t){l?i.$selection.off("input.search input.searchcheck"):i.$selection.off("keyup.search")})),this.$selection.on("keyup.search input.search",".select2-search--inline",(function(t){if(l&&"input"===t.type)i.$selection.off("input.search input.searchcheck");else{var e=t.which;e!=r.SHIFT&&e!=r.CTRL&&e!=r.ALT&&e!=r.TAB&&i.handleSearch(t)}}))},n.prototype._transferTabIndex=function(t){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},n.prototype.createPlaceholder=function(t,e){this.$search.attr("placeholder",e.text)},n.prototype.update=function(t,e){var r=this.$search[0]==document.activeElement;this.$search.attr("placeholder",""),t.call(this,e),this.$selection.find(".select2-selection__rendered").append(this.$searchContainer),this.resizeSearch(),r&&this.$search.trigger("focus")},n.prototype.handleSearch=function(){if(this.resizeSearch(),!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=!1},n.prototype.searchRemoveChoice=function(t,e){this.trigger("unselect",{data:e}),this.$search.val(e.text),this.handleSearch()},n.prototype.resizeSearch=function(){this.$search.css("width","25px");var t="";t=""!==this.$search.attr("placeholder")?this.$selection.find(".select2-selection__rendered").width():.75*(this.$search.val().length+1)+"em",this.$search.css("width",t)},n})),e.define("select2/selection/eventRelay",["jquery"],(function(t){function e(){}return e.prototype.bind=function(e,r,n){var o=this,i=["open","opening","close","closing","select","selecting","unselect","unselecting","clear","clearing"],a=["opening","closing","selecting","unselecting","clearing"];e.call(this,r,n),r.on("*",(function(e,r){if(-1!==t.inArray(e,i)){r=r||{};var n=t.Event("select2:"+e,{params:r});o.$element.trigger(n),-1!==t.inArray(e,a)&&(r.prevented=n.isDefaultPrevented())}}))},e})),e.define("select2/translation",["jquery","require"],(function(t,e){function r(t){this.dict=t||{}}return r.prototype.all=function(){return this.dict},r.prototype.get=function(t){return this.dict[t]},r.prototype.extend=function(e){this.dict=t.extend({},e.all(),this.dict)},r._cache={},r.loadPath=function(t){if(!(t in r._cache)){var n=e(t);r._cache[t]=n}return new r(r._cache[t])},r})),e.define("select2/diacritics",[],(function(){return{"â¶":"A","ï¼¡":"A","Ã":"A","Ã":"A","Ã":"A","áº¦":"A","áº¤":"A","áºª":"A","áº¨":"A","Ã":"A","Ä":"A","Ä":"A","áº°":"A","áº®":"A","áº´":"A","áº²":"A","È¦":"A","Ç ":"A","Ã":"A","Ç":"A","áº¢":"A","Ã":"A","Çº":"A","Ç":"A","È":"A","È":"A","áº ":"A","áº¬":"A","áº¶":"A","á¸":"A","Ä":"A","Èº":"A","â±¯":"A","ê²":"AA","Ã":"AE","Ç¼":"AE","Ç¢":"AE","ê´":"AO","ê¶":"AU","ê¸":"AV","êº":"AV","ê¼":"AY","â·":"B","ï¼¢":"B","á¸":"B","á¸":"B","á¸":"B","É":"B","Æ":"B","Æ":"B","â¸":"C","ï¼£":"C","Ä":"C","Ä":"C","Ä":"C","Ä":"C","Ã":"C","á¸":"C","Æ":"C","È»":"C","ê¾":"C","â¹":"D","ï¼¤":"D","á¸":"D","Ä":"D","á¸":"D","á¸":"D","á¸":"D","á¸":"D","Ä":"D","Æ":"D","Æ":"D","Æ":"D","ê¹":"D","Ç±":"DZ","Ç":"DZ","Ç²":"Dz","Ç":"Dz","âº":"E","ï¼¥":"E","Ã":"E","Ã":"E","Ã":"E","á»":"E","áº¾":"E","á»":"E","á»":"E","áº¼":"E","Ä":"E","á¸":"E","á¸":"E","Ä":"E","Ä":"E","Ã":"E","áºº":"E","Ä":"E","È":"E","È":"E","áº¸":"E","á»":"E","È¨":"E","á¸":"E","Ä":"E","á¸":"E","á¸":"E","Æ":"E","Æ":"E","â»":"F","ï¼¦":"F","á¸":"F","Æ":"F","ê»":"F","â¼":"G","ï¼§":"G","Ç´":"G","Ä":"G","á¸ ":"G","Ä":"G","Ä ":"G","Ç¦":"G","Ä¢":"G","Ç¤":"G","Æ":"G","ê ":"G","ê½":"G","ê¾":"G","â½":"H","ï¼¨":"H","Ä¤":"H","á¸¢":"H","á¸¦":"H","È":"H","á¸¤":"H","á¸¨":"H","á¸ª":"H","Ä¦":"H","â±§":"H","â±µ":"H","ê":"H","â¾":"I","ï¼©":"I","Ã":"I","Ã":"I","Ã":"I","Ä¨":"I","Äª":"I","Ä¬":"I","Ä°":"I","Ã":"I","á¸®":"I","á»":"I","Ç":"I","È":"I","È":"I","á»":"I","Ä®":"I","á¸¬":"I","Æ":"I","â¿":"J","ï¼ª":"J","Ä´":"J","É":"J","â":"K","ï¼«":"K","á¸°":"K","Ç¨":"K","á¸²":"K","Ä¶":"K","á¸´":"K","Æ":"K","â±©":"K","ê":"K","ê":"K","ê":"K","ê¢":"K","â":"L","ï¼¬":"L","Ä¿":"L","Ä¹":"L","Ä½":"L","á¸¶":"L","á¸¸":"L","Ä»":"L","á¸¼":"L","á¸º":"L","Å":"L","È½":"L","â±¢":"L","â± ":"L","ê":"L","ê":"L","ê":"L","Ç":"LJ","Ç":"Lj","â":"M","ï¼­":"M","á¸¾":"M","á¹":"M","á¹":"M","â±®":"M","Æ":"M","â":"N","ï¼®":"N","Ç¸":"N","Å":"N","Ã":"N","á¹":"N","Å":"N","á¹":"N","Å":"N","á¹":"N","á¹":"N","È ":"N","Æ":"N","ê":"N","ê¤":"N","Ç":"NJ","Ç":"Nj","â":"O","ï¼¯":"O","Ã":"O","Ã":"O","Ã":"O","á»":"O","á»":"O","á»":"O","á»":"O","Ã":"O","á¹":"O","È¬":"O","á¹":"O","Å":"O","á¹":"O","á¹":"O","Å":"O","È®":"O","È°":"O","Ã":"O","Èª":"O","á»":"O","Å":"O","Ç":"O","È":"O","È":"O","Æ ":"O","á»":"O","á»":"O","á» ":"O","á»":"O","á»¢":"O","á»":"O","á»":"O","Çª":"O","Ç¬":"O","Ã":"O","Ç¾":"O","Æ":"O","Æ":"O","ê":"O","ê":"O","Å":"OE","Æ¢":"OI","ê":"OO","È¢":"OU","â":"P","ï¼°":"P","á¹":"P","á¹":"P","Æ¤":"P","â±£":"P","ê":"P","ê":"P","ê":"P","â":"Q","ï¼±":"Q","ê":"Q","ê":"Q","É":"Q","â":"R","ï¼²":"R","Å":"R","á¹":"R","Å":"R","È":"R","È":"R","á¹":"R","á¹":"R","Å":"R","á¹":"R","É":"R","â±¤":"R","ê":"R","ê¦":"R","ê":"R","â":"S","ï¼³":"S","áº":"S","Å":"S","á¹¤":"S","Å":"S","á¹ ":"S","Å ":"S","á¹¦":"S","á¹¢":"S","á¹¨":"S","È":"S","Å":"S","â±¾":"S","ê¨":"S","ê":"S","â":"T","ï¼´":"T","á¹ª":"T","Å¤":"T","á¹¬":"T","È":"T","Å¢":"T","á¹°":"T","á¹®":"T","Å¦":"T","Æ¬":"T","Æ®":"T","È¾":"T","ê":"T","ê¨":"TZ","â":"U","ï¼µ":"U","Ã":"U","Ã":"U","Ã":"U","Å¨":"U","á¹¸":"U","Åª":"U","á¹º":"U","Å¬":"U","Ã":"U","Ç":"U","Ç":"U","Ç":"U","Ç":"U","á»¦":"U","Å®":"U","Å°":"U","Ç":"U","È":"U","È":"U","Æ¯":"U","á»ª":"U","á»¨":"U","á»®":"U","á»¬":"U","á»°":"U","á»¤":"U","á¹²":"U","Å²":"U","á¹¶":"U","á¹´":"U","É":"U","â":"V","ï¼¶":"V","á¹¼":"V","á¹¾":"V","Æ²":"V","ê":"V","É":"V","ê ":"VY","â":"W","ï¼·":"W","áº":"W","áº":"W","Å´":"W","áº":"W","áº":"W","áº":"W","â±²":"W","â":"X","ï¼¸":"X","áº":"X","áº":"X","â":"Y","ï¼¹":"Y","á»²":"Y","Ã":"Y","Å¶":"Y","á»¸":"Y","È²":"Y","áº":"Y","Å¸":"Y","á»¶":"Y","á»´":"Y","Æ³":"Y","É":"Y","á»¾":"Y","â":"Z","ï¼º":"Z","Å¹":"Z","áº":"Z","Å»":"Z","Å½":"Z","áº":"Z","áº":"Z","Æµ":"Z","È¤":"Z","â±¿":"Z","â±«":"Z","ê¢":"Z","â":"a","ï½":"a","áº":"a","Ã ":"a","Ã¡":"a","Ã¢":"a","áº§":"a","áº¥":"a","áº«":"a","áº©":"a","Ã£":"a","Ä":"a","Ä":"a","áº±":"a","áº¯":"a","áºµ":"a","áº³":"a","È§":"a","Ç¡":"a","Ã¤":"a","Ç":"a","áº£":"a","Ã¥":"a","Ç»":"a","Ç":"a","È":"a","È":"a","áº¡":"a","áº­":"a","áº·":"a","á¸":"a","Ä":"a","â±¥":"a","É":"a","ê³":"aa","Ã¦":"ae","Ç½":"ae","Ç£":"ae","êµ":"ao","ê·":"au","ê¹":"av","ê»":"av","ê½":"ay","â":"b","ï½":"b","á¸":"b","á¸":"b","á¸":"b","Æ":"b","Æ":"b","É":"b","â":"c","ï½":"c","Ä":"c","Ä":"c","Ä":"c","Ä":"c","Ã§":"c","á¸":"c","Æ":"c","È¼":"c","ê¿":"c","â":"c","â":"d","ï½":"d","á¸":"d","Ä":"d","á¸":"d","á¸":"d","á¸":"d","á¸":"d","Ä":"d","Æ":"d","É":"d","É":"d","êº":"d","Ç³":"dz","Ç":"dz","â":"e","ï½":"e","Ã¨":"e","Ã©":"e","Ãª":"e","á»":"e","áº¿":"e","á»":"e","á»":"e","áº½":"e","Ä":"e","á¸":"e","á¸":"e","Ä":"e","Ä":"e","Ã«":"e","áº»":"e","Ä":"e","È":"e","È":"e","áº¹":"e","á»":"e","È©":"e","á¸":"e","Ä":"e","á¸":"e","á¸":"e","É":"e","É":"e","Ç":"e","â":"f","ï½":"f","á¸":"f","Æ":"f","ê¼":"f","â":"g","ï½":"g","Çµ":"g","Ä":"g","á¸¡":"g","Ä":"g","Ä¡":"g","Ç§":"g","Ä£":"g","Ç¥":"g","É ":"g","ê¡":"g","áµ¹":"g","ê¿":"g","â":"h","ï½":"h","Ä¥":"h","á¸£":"h","á¸§":"h","È":"h","á¸¥":"h","á¸©":"h","á¸«":"h","áº":"h","Ä§":"h","â±¨":"h","â±¶":"h","É¥":"h","Æ":"hv","â":"i","ï½":"i","Ã¬":"i","Ã­":"i","Ã®":"i","Ä©":"i","Ä«":"i","Ä­":"i","Ã¯":"i","á¸¯":"i","á»":"i","Ç":"i","È":"i","È":"i","á»":"i","Ä¯":"i","á¸­":"i","É¨":"i","Ä±":"i","â":"j","ï½":"j","Äµ":"j","Ç°":"j","É":"j","â":"k","ï½":"k","á¸±":"k","Ç©":"k","á¸³":"k","Ä·":"k","á¸µ":"k","Æ":"k","â±ª":"k","ê":"k","ê":"k","ê":"k","ê£":"k","â":"l","ï½":"l","Å":"l","Äº":"l","Ä¾":"l","á¸·":"l","á¸¹":"l","Ä¼":"l","á¸½":"l","á¸»":"l","Å¿":"l","Å":"l","Æ":"l","É«":"l","â±¡":"l","ê":"l","ê":"l","ê":"l","Ç":"lj","â":"m","ï½":"m","á¸¿":"m","á¹":"m","á¹":"m","É±":"m","É¯":"m","â":"n","ï½":"n","Ç¹":"n","Å":"n","Ã±":"n","á¹":"n","Å":"n","á¹":"n","Å":"n","á¹":"n","á¹":"n","Æ":"n","É²":"n","Å":"n","ê":"n","ê¥":"n","Ç":"nj","â":"o","ï½":"o","Ã²":"o","Ã³":"o","Ã´":"o","á»":"o","á»":"o","á»":"o","á»":"o","Ãµ":"o","á¹":"o","È­":"o","á¹":"o","Å":"o","á¹":"o","á¹":"o","Å":"o","È¯":"o","È±":"o","Ã¶":"o","È«":"o","á»":"o","Å":"o","Ç":"o","È":"o","È":"o","Æ¡":"o","á»":"o","á»":"o","á»¡":"o","á»":"o","á»£":"o","á»":"o","á»":"o","Ç«":"o","Ç­":"o","Ã¸":"o","Ç¿":"o","É":"o","ê":"o","ê":"o","Éµ":"o","Å":"oe","Æ£":"oi","È£":"ou","ê":"oo","â":"p","ï½":"p","á¹":"p","á¹":"p","Æ¥":"p","áµ½":"p","ê":"p","ê":"p","ê":"p","â ":"q","ï½":"q","É":"q","ê":"q","ê":"q","â¡":"r","ï½":"r","Å":"r","á¹":"r","Å":"r","È":"r","È":"r","á¹":"r","á¹":"r","Å":"r","á¹":"r","É":"r","É½":"r","ê":"r","ê§":"r","ê":"r","â¢":"s","ï½":"s","Ã":"s","Å":"s","á¹¥":"s","Å":"s","á¹¡":"s","Å¡":"s","á¹§":"s","á¹£":"s","á¹©":"s","È":"s","Å":"s","È¿":"s","ê©":"s","ê":"s","áº":"s","â£":"t","ï½":"t","á¹«":"t","áº":"t","Å¥":"t","á¹­":"t","È":"t","Å£":"t","á¹±":"t","á¹¯":"t","Å§":"t","Æ­":"t","Ê":"t","â±¦":"t","ê":"t","ê©":"tz","â¤":"u","ï½":"u","Ã¹":"u","Ãº":"u","Ã»":"u","Å©":"u","á¹¹":"u","Å«":"u","á¹»":"u","Å­":"u","Ã¼":"u","Ç":"u","Ç":"u","Ç":"u","Ç":"u","á»§":"u","Å¯":"u","Å±":"u","Ç":"u","È":"u","È":"u","Æ°":"u","á»«":"u","á»©":"u","á»¯":"u","á»­":"u","á»±":"u","á»¥":"u","á¹³":"u","Å³":"u","á¹·":"u","á¹µ":"u","Ê":"u","â¥":"v","ï½":"v","á¹½":"v","á¹¿":"v","Ê":"v","ê":"v","Ê":"v","ê¡":"vy","â¦":"w","ï½":"w","áº":"w","áº":"w","Åµ":"w","áº":"w","áº":"w","áº":"w","áº":"w","â±³":"w","â§":"x","ï½":"x","áº":"x","áº":"x","â¨":"y","ï½":"y","á»³":"y","Ã½":"y","Å·":"y","á»¹":"y","È³":"y","áº":"y","Ã¿":"y","á»·":"y","áº":"y","á»µ":"y","Æ´":"y","É":"y","á»¿":"y","â©":"z","ï½":"z","Åº":"z","áº":"z","Å¼":"z","Å¾":"z","áº":"z","áº":"z","Æ¶":"z","È¥":"z","É":"z","â±¬":"z","ê£":"z","Î":"Î","Î":"Î","Î":"Î","Î":"Î","Îª":"Î","Î":"Î","Î":"Î¥","Î«":"Î¥","Î":"Î©","Î¬":"Î±","Î­":"Îµ","Î®":"Î·","Î¯":"Î¹","Ï":"Î¹","Î":"Î¹","Ï":"Î¿","Ï":"Ï","Ï":"Ï","Î°":"Ï","Ï":"Ï","Ï":"Ï","â":"'"}})),e.define("select2/data/base",["../utils"],(function(t){function e(t,r){e.__super__.constructor.call(this)}return t.Extend(e,t.Observable),e.prototype.current=function(t){throw new Error("The `current` method must be defined in child classes.")},e.prototype.query=function(t,e){throw new Error("The `query` method must be defined in child classes.")},e.prototype.bind=function(t,e){},e.prototype.destroy=function(){},e.prototype.generateResultId=function(e,r){var n=e.id+"-result-";return n+=t.generateChars(4),null!=r.id?n+="-"+r.id.toString():n+="-"+t.generateChars(4),n},e})),e.define("select2/data/select",["./base","../utils","jquery"],(function(t,e,r){function n(t,e){this.$element=t,this.options=e,n.__super__.constructor.call(this)}return e.Extend(n,t),n.prototype.current=function(t){var e=[],n=this;this.$element.find(":selected").each((function(){var t=r(this),o=n.item(t);e.push(o)})),t(e)},n.prototype.select=function(t){var e=this;if(t.selected=!0,r(t.element).is("option"))return t.element.selected=!0,void this.$element.trigger("input").trigger("change");if(this.$element.prop("multiple"))this.current((function(n){var o=[];(t=[t]).push.apply(t,n);for(var i=0;i<t.length;i++){var a=t[i].id;-1===r.inArray(a,o)&&o.push(a)}e.$element.val(o),e.$element.trigger("input").trigger("change")}));else{var n=t.id;this.$element.val(n),this.$element.trigger("input").trigger("change")}},n.prototype.unselect=function(t){var e=this;if(this.$element.prop("multiple")){if(t.selected=!1,r(t.element).is("option"))return t.element.selected=!1,void this.$element.trigger("input").trigger("change");this.current((function(n){for(var o=[],i=0;i<n.length;i++){var a=n[i].id;a!==t.id&&-1===r.inArray(a,o)&&o.push(a)}e.$element.val(o),e.$element.trigger("input").trigger("change")}))}},n.prototype.bind=function(t,e){var r=this;(this.container=t).on("select",(function(t){r.select(t.data)})),t.on("unselect",(function(t){r.unselect(t.data)}))},n.prototype.destroy=function(){this.$element.find("*").each((function(){e.RemoveData(this)}))},n.prototype.query=function(t,e){var n=[],o=this;this.$element.children().each((function(){var e=r(this);if(e.is("option")||e.is("optgroup")){var i=o.item(e),a=o.matches(t,i);null!==a&&n.push(a)}})),e({results:n})},n.prototype.addOptions=function(t){e.appendMany(this.$element,t)},n.prototype.option=function(t){var n;t.children?(n=document.createElement("optgroup")).label=t.text:void 0!==(n=document.createElement("option")).textContent?n.textContent=t.text:n.innerText=t.text,void 0!==t.id&&(n.value=t.id),t.disabled&&(n.disabled=!0),t.selected&&(n.selected=!0),t.title&&(n.title=t.title);var o=r(n),i=this._normalizeItem(t);return i.element=n,e.StoreData(n,"data",i),o},n.prototype.item=function(t){var n={};if(null!=(n=e.GetData(t[0],"data")))return n;if(t.is("option"))n={id:t.val(),text:t.text(),disabled:t.prop("disabled"),selected:t.prop("selected"),title:t.prop("title")};else if(t.is("optgroup")){n={text:t.prop("label"),children:[],title:t.prop("title")};for(var o=t.children("option"),i=[],a=0;a<o.length;a++){var s=r(o[a]),l=this.item(s);i.push(l)}n.children=i}return(n=this._normalizeItem(n)).element=t[0],e.StoreData(t[0],"data",n),n},n.prototype._normalizeItem=function(t){return t!==Object(t)&&(t={id:t,text:t}),null!=(t=r.extend({},{text:""},t)).id&&(t.id=t.id.toString()),null!=t.text&&(t.text=t.text.toString()),null==t._resultId&&t.id&&null!=this.container&&(t._resultId=this.generateResultId(this.container,t)),r.extend({},{selected:!1,disabled:!1},t)},n.prototype.matches=function(t,e){return this.options.get("matcher")(t,e)},n})),e.define("select2/data/array",["./select","../utils","jquery"],(function(t,e,r){function n(t,e){this._dataToConvert=e.get("data")||[],n.__super__.constructor.call(this,t,e)}return e.Extend(n,t),n.prototype.bind=function(t,e){n.__super__.bind.call(this,t,e),this.addOptions(this.convertToOptions(this._dataToConvert))},n.prototype.select=function(t){var e=this.$element.find("option").filter((function(e,r){return r.value==t.id.toString()}));0===e.length&&(e=this.option(t),this.addOptions(e)),n.__super__.select.call(this,t)},n.prototype.convertToOptions=function(t){var n=this,o=this.$element.find("option"),i=o.map((function(){return n.item(r(this)).id})).get(),a=[];function s(t){return function(){return r(this).val()==t.id}}for(var l=0;l<t.length;l++){var d=this._normalizeItem(t[l]);if(0<=r.inArray(d.id,i)){var c=o.filter(s(d)),u=this.item(c),p=r.extend(!0,{},d,u),h=this.option(p);c.replaceWith(h)}else{var f=this.option(d);if(d.children){var m=this.convertToOptions(d.children);e.appendMany(f,m)}a.push(f)}}return a},n})),e.define("select2/data/ajax",["./array","../utils","jquery"],(function(t,e,r){function n(t,e){this.ajaxOptions=this._applyDefaults(e.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),n.__super__.constructor.call(this,t,e)}return e.Extend(n,t),n.prototype._applyDefaults=function(t){var e={data:function(t){return r.extend({},t,{q:t.term})},transport:function(t,e,n){var o=r.ajax(t);return o.then(e),o.fail(n),o}};return r.extend({},e,t,!0)},n.prototype.processResults=function(t){return t},n.prototype.query=function(t,e){var n=this;null!=this._request&&(r.isFunction(this._request.abort)&&this._request.abort(),this._request=null);var o=r.extend({type:"GET"},this.ajaxOptions);function i(){var i=o.transport(o,(function(o){var i=n.processResults(o,t);n.options.get("debug")&&window.console&&console.error&&(i&&i.results&&r.isArray(i.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),e(i)}),(function(){"status"in i&&(0===i.status||"0"===i.status)||n.trigger("results:message",{message:"errorLoading"})}));n._request=i}"function"==typeof o.url&&(o.url=o.url.call(this.$element,t)),"function"==typeof o.data&&(o.data=o.data.call(this.$element,t)),this.ajaxOptions.delay&&null!=t.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(i,this.ajaxOptions.delay)):i()},n})),e.define("select2/data/tags",["jquery"],(function(t){function e(e,r,n){var o=n.get("tags"),i=n.get("createTag");void 0!==i&&(this.createTag=i);var a=n.get("insertTag");if(void 0!==a&&(this.insertTag=a),e.call(this,r,n),t.isArray(o))for(var s=0;s<o.length;s++){var l=o[s],d=this._normalizeItem(l),c=this.option(d);this.$element.append(c)}}return e.prototype.query=function(t,e,r){var n=this;this._removeOldTags(),null!=e.term&&null==e.page?t.call(this,e,(function t(o,i){for(var a=o.results,s=0;s<a.length;s++){var l=a[s],d=null!=l.children&&!t({results:l.children},!0);if((l.text||"").toUpperCase()===(e.term||"").toUpperCase()||d)return!i&&(o.data=a,void r(o))}if(i)return!0;var c=n.createTag(e);if(null!=c){var u=n.option(c);u.attr("data-select2-tag",!0),n.addOptions([u]),n.insertTag(a,c)}o.results=a,r(o)})):t.call(this,e,r)},e.prototype.createTag=function(e,r){var n=t.trim(r.term);return""===n?null:{id:n,text:n}},e.prototype.insertTag=function(t,e,r){e.unshift(r)},e.prototype._removeOldTags=function(e){this.$element.find("option[data-select2-tag]").each((function(){this.selected||t(this).remove()}))},e})),e.define("select2/data/tokenizer",["jquery"],(function(t){function e(t,e,r){var n=r.get("tokenizer");void 0!==n&&(this.tokenizer=n),t.call(this,e,r)}return e.prototype.bind=function(t,e,r){t.call(this,e,r),this.$search=e.dropdown.$search||e.selection.$search||r.find(".select2-search__field")},e.prototype.query=function(e,r,n){var o=this;r.term=r.term||"";var i=this.tokenizer(r,this.options,(function(e){var r,n=o._normalizeItem(e);if(!o.$element.find("option").filter((function(){return t(this).val()===n.id})).length){var i=o.option(n);i.attr("data-select2-tag",!0),o._removeOldTags(),o.addOptions([i])}r=n,o.trigger("select",{data:r})}));i.term!==r.term&&(this.$search.length&&(this.$search.val(i.term),this.$search.trigger("focus")),r.term=i.term),e.call(this,r,n)},e.prototype.tokenizer=function(e,r,n,o){for(var i=n.get("tokenSeparators")||[],a=r.term,s=0,l=this.createTag||function(t){return{id:t.term,text:t.term}};s<a.length;){var d=a[s];if(-1!==t.inArray(d,i)){var c=a.substr(0,s),u=l(t.extend({},r,{term:c}));null!=u?(o(u),a=a.substr(s+1)||"",s=0):s++}else s++}return{term:a}},e})),e.define("select2/data/minimumInputLength",[],(function(){function t(t,e,r){this.minimumInputLength=r.get("minimumInputLength"),t.call(this,e,r)}return t.prototype.query=function(t,e,r){e.term=e.term||"",e.term.length<this.minimumInputLength?this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:e.term,params:e}}):t.call(this,e,r)},t})),e.define("select2/data/maximumInputLength",[],(function(){function t(t,e,r){this.maximumInputLength=r.get("maximumInputLength"),t.call(this,e,r)}return t.prototype.query=function(t,e,r){e.term=e.term||"",0<this.maximumInputLength&&e.term.length>this.maximumInputLength?this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:e.term,params:e}}):t.call(this,e,r)},t})),e.define("select2/data/maximumSelectionLength",[],(function(){function t(t,e,r){this.maximumSelectionLength=r.get("maximumSelectionLength"),t.call(this,e,r)}return t.prototype.bind=function(t,e,r){var n=this;t.call(this,e,r),e.on("select",(function(){n._checkIfMaximumSelected()}))},t.prototype.query=function(t,e,r){var n=this;this._checkIfMaximumSelected((function(){t.call(n,e,r)}))},t.prototype._checkIfMaximumSelected=function(t,e){var r=this;this.current((function(t){var n=null!=t?t.length:0;0<r.maximumSelectionLength&&n>=r.maximumSelectionLength?r.trigger("results:message",{message:"maximumSelected",args:{maximum:r.maximumSelectionLength}}):e&&e()}))},t})),e.define("select2/dropdown",["jquery","./utils"],(function(t,e){function r(t,e){this.$element=t,this.options=e,r.__super__.constructor.call(this)}return e.Extend(r,e.Observable),r.prototype.render=function(){var e=t('<span class="select2-dropdown"><span class="select2-results"></span></span>');return e.attr("dir",this.options.get("dir")),this.$dropdown=e},r.prototype.bind=function(){},r.prototype.position=function(t,e){},r.prototype.destroy=function(){this.$dropdown.remove()},r})),e.define("select2/dropdown/search",["jquery","../utils"],(function(t,e){function r(){}return r.prototype.render=function(e){var r=e.call(this),n=t('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></span>');return this.$searchContainer=n,this.$search=n.find("input"),r.prepend(n),r},r.prototype.bind=function(e,r,n){var o=this,i=r.id+"-results";e.call(this,r,n),this.$search.on("keydown",(function(t){o.trigger("keypress",t),o._keyUpPrevented=t.isDefaultPrevented()})),this.$search.on("input",(function(e){t(this).off("keyup")})),this.$search.on("keyup input",(function(t){o.handleSearch(t)})),r.on("open",(function(){o.$search.attr("tabindex",0),o.$search.attr("aria-controls",i),o.$search.trigger("focus"),window.setTimeout((function(){o.$search.trigger("focus")}),0)})),r.on("close",(function(){o.$search.attr("tabindex",-1),o.$search.removeAttr("aria-controls"),o.$search.removeAttr("aria-activedescendant"),o.$search.val(""),o.$search.trigger("blur")})),r.on("focus",(function(){r.isOpen()||o.$search.trigger("focus")})),r.on("results:all",(function(t){null!=t.query.term&&""!==t.query.term||(o.showSearch(t)?o.$searchContainer.removeClass("select2-search--hide"):o.$searchContainer.addClass("select2-search--hide"))})),r.on("results:focus",(function(t){t.data._resultId?o.$search.attr("aria-activedescendant",t.data._resultId):o.$search.removeAttr("aria-activedescendant")}))},r.prototype.handleSearch=function(t){if(!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=!1},r.prototype.showSearch=function(t,e){return!0},r})),e.define("select2/dropdown/hidePlaceholder",[],(function(){function t(t,e,r,n){this.placeholder=this.normalizePlaceholder(r.get("placeholder")),t.call(this,e,r,n)}return t.prototype.append=function(t,e){e.results=this.removePlaceholder(e.results),t.call(this,e)},t.prototype.normalizePlaceholder=function(t,e){return"string"==typeof e&&(e={id:"",text:e}),e},t.prototype.removePlaceholder=function(t,e){for(var r=e.slice(0),n=e.length-1;0<=n;n--){var o=e[n];this.placeholder.id===o.id&&r.splice(n,1)}return r},t})),e.define("select2/dropdown/infiniteScroll",["jquery"],(function(t){function e(t,e,r,n){this.lastParams={},t.call(this,e,r,n),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return e.prototype.append=function(t,e){this.$loadingMore.remove(),this.loading=!1,t.call(this,e),this.showLoadingMore(e)&&(this.$results.append(this.$loadingMore),this.loadMoreIfNeeded())},e.prototype.bind=function(t,e,r){var n=this;t.call(this,e,r),e.on("query",(function(t){n.lastParams=t,n.loading=!0})),e.on("query:append",(function(t){n.lastParams=t,n.loading=!0})),this.$results.on("scroll",this.loadMoreIfNeeded.bind(this))},e.prototype.loadMoreIfNeeded=function(){var e=t.contains(document.documentElement,this.$loadingMore[0]);if(!this.loading&&e){var r=this.$results.offset().top+this.$results.outerHeight(!1);this.$loadingMore.offset().top+this.$loadingMore.outerHeight(!1)<=r+50&&this.loadMore()}},e.prototype.loadMore=function(){this.loading=!0;var e=t.extend({},{page:1},this.lastParams);e.page++,this.trigger("query:append",e)},e.prototype.showLoadingMore=function(t,e){return e.pagination&&e.pagination.more},e.prototype.createLoadingMore=function(){var e=t('<li class="select2-results__option select2-results__option--load-more"role="option" aria-disabled="true"></li>'),r=this.options.get("translations").get("loadingMore");return e.html(r(this.lastParams)),e},e})),e.define("select2/dropdown/attachBody",["jquery","../utils"],(function(t,e){function r(e,r,n){this.$dropdownParent=t(n.get("dropdownParent")||document.body),e.call(this,r,n)}return r.prototype.bind=function(t,e,r){var n=this;t.call(this,e,r),e.on("open",(function(){n._showDropdown(),n._attachPositioningHandler(e),n._bindContainerResultHandlers(e)})),e.on("close",(function(){n._hideDropdown(),n._detachPositioningHandler(e)})),this.$dropdownContainer.on("mousedown",(function(t){t.stopPropagation()}))},r.prototype.destroy=function(t){t.call(this),this.$dropdownContainer.remove()},r.prototype.position=function(t,e,r){e.attr("class",r.attr("class")),e.removeClass("select2"),e.addClass("select2-container--open"),e.css({position:"absolute",top:-999999}),this.$container=r},r.prototype.render=function(e){var r=t("<span></span>"),n=e.call(this);return r.append(n),this.$dropdownContainer=r},r.prototype._hideDropdown=function(t){this.$dropdownContainer.detach()},r.prototype._bindContainerResultHandlers=function(t,e){if(!this._containerResultsHandlersBound){var r=this;e.on("results:all",(function(){r._positionDropdown(),r._resizeDropdown()})),e.on("results:append",(function(){r._positionDropdown(),r._resizeDropdown()})),e.on("results:message",(function(){r._positionDropdown(),r._resizeDropdown()})),e.on("select",(function(){r._positionDropdown(),r._resizeDropdown()})),e.on("unselect",(function(){r._positionDropdown(),r._resizeDropdown()})),this._containerResultsHandlersBound=!0}},r.prototype._attachPositioningHandler=function(r,n){var o=this,i="scroll.select2."+n.id,a="resize.select2."+n.id,s="orientationchange.select2."+n.id,l=this.$container.parents().filter(e.hasScroll);l.each((function(){e.StoreData(this,"select2-scroll-position",{x:t(this).scrollLeft(),y:t(this).scrollTop()})})),l.on(i,(function(r){var n=e.GetData(this,"select2-scroll-position");t(this).scrollTop(n.y)})),t(window).on(i+" "+a+" "+s,(function(t){o._positionDropdown(),o._resizeDropdown()}))},r.prototype._detachPositioningHandler=function(r,n){var o="scroll.select2."+n.id,i="resize.select2."+n.id,a="orientationchange.select2."+n.id;this.$container.parents().filter(e.hasScroll).off(o),t(window).off(o+" "+i+" "+a)},r.prototype._positionDropdown=function(){var e=t(window),r=this.$dropdown.hasClass("select2-dropdown--above"),n=this.$dropdown.hasClass("select2-dropdown--below"),o=null,i=this.$container.offset();i.bottom=i.top+this.$container.outerHeight(!1);var a={height:this.$container.outerHeight(!1)};a.top=i.top,a.bottom=i.top+a.height;var s=this.$dropdown.outerHeight(!1),l=e.scrollTop(),d=e.scrollTop()+e.height(),c=l<i.top-s,u=d>i.bottom+s,p={left:i.left,top:a.bottom},h=this.$dropdownParent;"static"===h.css("position")&&(h=h.offsetParent());var f={top:0,left:0};(t.contains(document.body,h[0])||h[0].isConnected)&&(f=h.offset()),p.top-=f.top,p.left-=f.left,r||n||(o="below"),u||!c||r?!c&&u&&r&&(o="below"):o="above",("above"==o||r&&"below"!==o)&&(p.top=a.top-f.top-s),null!=o&&(this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+o),this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+o)),this.$dropdownContainer.css(p)},r.prototype._resizeDropdown=function(){var t={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(t.minWidth=t.width,t.position="relative",t.width="auto"),this.$dropdown.css(t)},r.prototype._showDropdown=function(t){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},r})),e.define("select2/dropdown/minimumResultsForSearch",[],(function(){function t(t,e,r,n){this.minimumResultsForSearch=r.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),t.call(this,e,r,n)}return t.prototype.showSearch=function(t,e){return!(function t(e){for(var r=0,n=0;n<e.length;n++){var o=e[n];o.children?r+=t(o.children):r++}return r}(e.data.results)<this.minimumResultsForSearch)&&t.call(this,e)},t})),e.define("select2/dropdown/selectOnClose",["../utils"],(function(t){function e(){}return e.prototype.bind=function(t,e,r){var n=this;t.call(this,e,r),e.on("close",(function(t){n._handleSelectOnClose(t)}))},e.prototype._handleSelectOnClose=function(e,r){if(r&&null!=r.originalSelect2Event){var n=r.originalSelect2Event;if("select"===n._type||"unselect"===n._type)return}var o=this.getHighlightedResults();if(!(o.length<1)){var i=t.GetData(o[0],"data");null!=i.element&&i.element.selected||null==i.element&&i.selected||this.trigger("select",{data:i})}},e})),e.define("select2/dropdown/closeOnSelect",[],(function(){function t(){}return t.prototype.bind=function(t,e,r){var n=this;t.call(this,e,r),e.on("select",(function(t){n._selectTriggered(t)})),e.on("unselect",(function(t){n._selectTriggered(t)}))},t.prototype._selectTriggered=function(t,e){var r=e.originalEvent;r&&(r.ctrlKey||r.metaKey)||this.trigger("close",{originalEvent:r,originalSelect2Event:e})},t})),e.define("select2/i18n/en",[],(function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(t){var e=t.input.length-t.maximum,r="Please delete "+e+" character";return 1!=e&&(r+="s"),r},inputTooShort:function(t){return"Please enter "+(t.minimum-t.input.length)+" or more characters"},loadingMore:function(){return"Loading more resultsâ¦"},maximumSelected:function(t){var e="You can only select "+t.maximum+" item";return 1!=t.maximum&&(e+="s"),e},noResults:function(){return"No results found"},searching:function(){return"Searchingâ¦"},removeAllItems:function(){return"Remove all items"}}})),e.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],(function(t,e,r,n,o,i,a,s,l,d,c,u,p,h,f,m,g,b,v,y,x,w,_,k,E,C,T,S,A){function L(){this.reset()}return L.prototype.apply=function(c){if(null==(c=t.extend(!0,{},this.defaults,c)).dataAdapter){if(null!=c.ajax?c.dataAdapter=f:null!=c.data?c.dataAdapter=h:c.dataAdapter=p,0<c.minimumInputLength&&(c.dataAdapter=d.Decorate(c.dataAdapter,b)),0<c.maximumInputLength&&(c.dataAdapter=d.Decorate(c.dataAdapter,v)),0<c.maximumSelectionLength&&(c.dataAdapter=d.Decorate(c.dataAdapter,y)),c.tags&&(c.dataAdapter=d.Decorate(c.dataAdapter,m)),null==c.tokenSeparators&&null==c.tokenizer||(c.dataAdapter=d.Decorate(c.dataAdapter,g)),null!=c.query){var u=e(c.amdBase+"compat/query");c.dataAdapter=d.Decorate(c.dataAdapter,u)}if(null!=c.initSelection){var A=e(c.amdBase+"compat/initSelection");c.dataAdapter=d.Decorate(c.dataAdapter,A)}}if(null==c.resultsAdapter&&(c.resultsAdapter=r,null!=c.ajax&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,k)),null!=c.placeholder&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,_)),c.selectOnClose&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,T))),null==c.dropdownAdapter){if(c.multiple)c.dropdownAdapter=x;else{var L=d.Decorate(x,w);c.dropdownAdapter=L}if(0!==c.minimumResultsForSearch&&(c.dropdownAdapter=d.Decorate(c.dropdownAdapter,C)),c.closeOnSelect&&(c.dropdownAdapter=d.Decorate(c.dropdownAdapter,S)),null!=c.dropdownCssClass||null!=c.dropdownCss||null!=c.adaptDropdownCssClass){var D=e(c.amdBase+"compat/dropdownCss");c.dropdownAdapter=d.Decorate(c.dropdownAdapter,D)}c.dropdownAdapter=d.Decorate(c.dropdownAdapter,E)}if(null==c.selectionAdapter){if(c.multiple?c.selectionAdapter=o:c.selectionAdapter=n,null!=c.placeholder&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,i)),c.allowClear&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,a)),c.multiple&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,s)),null!=c.containerCssClass||null!=c.containerCss||null!=c.adaptContainerCssClass){var N=e(c.amdBase+"compat/containerCss");c.selectionAdapter=d.Decorate(c.selectionAdapter,N)}c.selectionAdapter=d.Decorate(c.selectionAdapter,l)}c.language=this._resolveLanguage(c.language),c.language.push("en");for(var O=[],M=0;M<c.language.length;M++){var j=c.language[M];-1===O.indexOf(j)&&O.push(j)}return c.language=O,c.translations=this._processTranslations(c.language,c.debug),c},L.prototype.reset=function(){function e(t){return t.replace(/[^\u0000-\u007E]/g,(function(t){return u[t]||t}))}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:d.escapeMarkup,language:{},matcher:function r(n,o){if(""===t.trim(n.term))return o;if(o.children&&0<o.children.length){for(var i=t.extend(!0,{},o),a=o.children.length-1;0<=a;a--)null==r(n,o.children[a])&&i.children.splice(a,1);return 0<i.children.length?i:r(n,i)}var s=e(o.text).toUpperCase(),l=e(n.term).toUpperCase();return-1<s.indexOf(l)?o:null},minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,scrollAfterSelect:!1,sorter:function(t){return t},templateResult:function(t){return t.text},templateSelection:function(t){return t.text},theme:"default",width:"resolve"}},L.prototype.applyFromElement=function(t,e){var r=t.language,n=this.defaults.language,o=e.prop("lang"),i=e.closest("[lang]").prop("lang"),a=Array.prototype.concat.call(this._resolveLanguage(o),this._resolveLanguage(r),this._resolveLanguage(n),this._resolveLanguage(i));return t.language=a,t},L.prototype._resolveLanguage=function(e){if(!e)return[];if(t.isEmptyObject(e))return[];if(t.isPlainObject(e))return[e];var r;r=t.isArray(e)?e:[e];for(var n=[],o=0;o<r.length;o++)if(n.push(r[o]),"string"==typeof r[o]&&0<r[o].indexOf("-")){var i=r[o].split("-")[0];n.push(i)}return n},L.prototype._processTranslations=function(e,r){for(var n=new c,o=0;o<e.length;o++){var i=new c,a=e[o];if("string"==typeof a)try{i=c.loadPath(a)}catch(e){try{a=this.defaults.amdLanguageBase+a,i=c.loadPath(a)}catch(e){r&&window.console&&console.warn&&console.warn('Select2: The language file for "'+a+'" could not be automatically loaded. A fallback will be used instead.')}}else i=t.isPlainObject(a)?new c(a):a;n.extend(i)}return n},L.prototype.set=function(e,r){var n={};n[t.camelCase(e)]=r;var o=d._convertData(n);t.extend(!0,this.defaults,o)},new L})),e.define("select2/options",["require","jquery","./defaults","./utils"],(function(t,e,r,n){function o(e,o){if(this.options=e,null!=o&&this.fromElement(o),null!=o&&(this.options=r.applyFromElement(this.options,o)),this.options=r.apply(this.options),o&&o.is("input")){var i=t(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=n.Decorate(this.options.dataAdapter,i)}}return o.prototype.fromElement=function(t){var r=["select2"];null==this.options.multiple&&(this.options.multiple=t.prop("multiple")),null==this.options.disabled&&(this.options.disabled=t.prop("disabled")),null==this.options.dir&&(t.prop("dir")?this.options.dir=t.prop("dir"):t.closest("[dir]").prop("dir")?this.options.dir=t.closest("[dir]").prop("dir"):this.options.dir="ltr"),t.prop("disabled",this.options.disabled),t.prop("multiple",this.options.multiple),n.GetData(t[0],"select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),n.StoreData(t[0],"data",n.GetData(t[0],"select2Tags")),n.StoreData(t[0],"tags",!0)),n.GetData(t[0],"ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),t.attr("ajax--url",n.GetData(t[0],"ajaxUrl")),n.StoreData(t[0],"ajax-Url",n.GetData(t[0],"ajaxUrl")));var o={};function i(t,e){return e.toUpperCase()}for(var a=0;a<t[0].attributes.length;a++){var s=t[0].attributes[a].name,l="data-";if(s.substr(0,l.length)==l){var d=s.substring(l.length),c=n.GetData(t[0],d);o[d.replace(/-([a-z])/g,i)]=c}}e.fn.jquery&&"1."==e.fn.jquery.substr(0,2)&&t[0].dataset&&(o=e.extend(!0,{},t[0].dataset,o));var u=e.extend(!0,{},n.GetData(t[0]),o);for(var p in u=n._convertData(u))-1<e.inArray(p,r)||(e.isPlainObject(this.options[p])?e.extend(this.options[p],u[p]):this.options[p]=u[p]);return this},o.prototype.get=function(t){return this.options[t]},o.prototype.set=function(t,e){this.options[t]=e},o})),e.define("select2/core",["jquery","./options","./utils","./keys"],(function(t,e,r,n){var o=function(t,n){null!=r.GetData(t[0],"select2")&&r.GetData(t[0],"select2").destroy(),this.$element=t,this.id=this._generateId(t),n=n||{},this.options=new e(n,t),o.__super__.constructor.call(this);var i=t.attr("tabindex")||0;r.StoreData(t[0],"old-tabindex",i),t.attr("tabindex","-1");var a=this.options.get("dataAdapter");this.dataAdapter=new a(t,this.options);var s=this.render();this._placeContainer(s);var l=this.options.get("selectionAdapter");this.selection=new l(t,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,s);var d=this.options.get("dropdownAdapter");this.dropdown=new d(t,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,s);var c=this.options.get("resultsAdapter");this.results=new c(t,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown);var u=this;this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current((function(t){u.trigger("selection:update",{data:t})})),t.addClass("select2-hidden-accessible"),t.attr("aria-hidden","true"),this._syncAttributes(),r.StoreData(t[0],"select2",this),t.data("select2",this)};return r.Extend(o,r.Observable),o.prototype._generateId=function(t){return"select2-"+(null!=t.attr("id")?t.attr("id"):null!=t.attr("name")?t.attr("name")+"-"+r.generateChars(2):r.generateChars(4)).replace(/(:|\.|\[|\]|,)/g,"")},o.prototype._placeContainer=function(t){t.insertAfter(this.$element);var e=this._resolveWidth(this.$element,this.options.get("width"));null!=e&&t.css("width",e)},o.prototype._resolveWidth=function(t,e){var r=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==e){var n=this._resolveWidth(t,"style");return null!=n?n:this._resolveWidth(t,"element")}if("element"==e){var o=t.outerWidth(!1);return o<=0?"auto":o+"px"}if("style"!=e)return"computedstyle"!=e?e:window.getComputedStyle(t[0]).width;var i=t.attr("style");if("string"!=typeof i)return null;for(var a=i.split(";"),s=0,l=a.length;s<l;s+=1){var d=a[s].replace(/\s/g,"").match(r);if(null!==d&&1<=d.length)return d[1]}return null},o.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},o.prototype._registerDomEvents=function(){var t=this;this.$element.on("change.select2",(function(){t.dataAdapter.current((function(e){t.trigger("selection:update",{data:e})}))})),this.$element.on("focus.select2",(function(e){t.trigger("focus",e)})),this._syncA=r.bind(this._syncAttributes,this),this._syncS=r.bind(this._syncSubtree,this),this.$element[0].attachEvent&&this.$element[0].attachEvent("onpropertychange",this._syncA);var e=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;null!=e?(this._observer=new e((function(e){t._syncA(),t._syncS(null,e)})),this._observer.observe(this.$element[0],{attributes:!0,childList:!0,subtree:!1})):this.$element[0].addEventListener&&(this.$element[0].addEventListener("DOMAttrModified",t._syncA,!1),this.$element[0].addEventListener("DOMNodeInserted",t._syncS,!1),this.$element[0].addEventListener("DOMNodeRemoved",t._syncS,!1))},o.prototype._registerDataEvents=function(){var t=this;this.dataAdapter.on("*",(function(e,r){t.trigger(e,r)}))},o.prototype._registerSelectionEvents=function(){var e=this,r=["toggle","focus"];this.selection.on("toggle",(function(){e.toggleDropdown()})),this.selection.on("focus",(function(t){e.focus(t)})),this.selection.on("*",(function(n,o){-1===t.inArray(n,r)&&e.trigger(n,o)}))},o.prototype._registerDropdownEvents=function(){var t=this;this.dropdown.on("*",(function(e,r){t.trigger(e,r)}))},o.prototype._registerResultsEvents=function(){var t=this;this.results.on("*",(function(e,r){t.trigger(e,r)}))},o.prototype._registerEvents=function(){var t=this;this.on("open",(function(){t.$container.addClass("select2-container--open")})),this.on("close",(function(){t.$container.removeClass("select2-container--open")})),this.on("enable",(function(){t.$container.removeClass("select2-container--disabled")})),this.on("disable",(function(){t.$container.addClass("select2-container--disabled")})),this.on("blur",(function(){t.$container.removeClass("select2-container--focus")})),this.on("query",(function(e){t.isOpen()||t.trigger("open",{}),this.dataAdapter.query(e,(function(r){t.trigger("results:all",{data:r,query:e})}))})),this.on("query:append",(function(e){this.dataAdapter.query(e,(function(r){t.trigger("results:append",{data:r,query:e})}))})),this.on("keypress",(function(e){var r=e.which;t.isOpen()?r===n.ESC||r===n.TAB||r===n.UP&&e.altKey?(t.close(e),e.preventDefault()):r===n.ENTER?(t.trigger("results:select",{}),e.preventDefault()):r===n.SPACE&&e.ctrlKey?(t.trigger("results:toggle",{}),e.preventDefault()):r===n.UP?(t.trigger("results:previous",{}),e.preventDefault()):r===n.DOWN&&(t.trigger("results:next",{}),e.preventDefault()):(r===n.ENTER||r===n.SPACE||r===n.DOWN&&e.altKey)&&(t.open(),e.preventDefault())}))},o.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.isDisabled()?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},o.prototype._isChangeMutation=function(e,r){var n=!1,o=this;if(!e||!e.target||"OPTION"===e.target.nodeName||"OPTGROUP"===e.target.nodeName){if(r)if(r.addedNodes&&0<r.addedNodes.length)for(var i=0;i<r.addedNodes.length;i++)r.addedNodes[i].selected&&(n=!0);else r.removedNodes&&0<r.removedNodes.length?n=!0:t.isArray(r)&&t.each(r,(function(t,e){if(o._isChangeMutation(t,e))return!(n=!0)}));else n=!0;return n}},o.prototype._syncSubtree=function(t,e){var r=this._isChangeMutation(t,e),n=this;r&&this.dataAdapter.current((function(t){n.trigger("selection:update",{data:t})}))},o.prototype.trigger=function(t,e){var r=o.__super__.trigger,n={open:"opening",close:"closing",select:"selecting",unselect:"unselecting",clear:"clearing"};if(void 0===e&&(e={}),t in n){var i=n[t],a={prevented:!1,name:t,args:e};if(r.call(this,i,a),a.prevented)return void(e.prevented=!0)}r.call(this,t,e)},o.prototype.toggleDropdown=function(){this.isDisabled()||(this.isOpen()?this.close():this.open())},o.prototype.open=function(){this.isOpen()||this.isDisabled()||this.trigger("query",{})},o.prototype.close=function(t){this.isOpen()&&this.trigger("close",{originalEvent:t})},o.prototype.isEnabled=function(){return!this.isDisabled()},o.prototype.isDisabled=function(){return this.options.get("disabled")},o.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")},o.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")},o.prototype.focus=function(t){this.hasFocus()||(this.$container.addClass("select2-container--focus"),this.trigger("focus",{}))},o.prototype.enable=function(t){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),null!=t&&0!==t.length||(t=[!0]);var e=!t[0];this.$element.prop("disabled",e)},o.prototype.data=function(){this.options.get("debug")&&0<arguments.length&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var t=[];return this.dataAdapter.current((function(e){t=e})),t},o.prototype.val=function(e){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==e||0===e.length)return this.$element.val();var r=e[0];t.isArray(r)&&(r=t.map(r,(function(t){return t.toString()}))),this.$element.val(r).trigger("input").trigger("change")},o.prototype.destroy=function(){this.$container.remove(),this.$element[0].detachEvent&&this.$element[0].detachEvent("onpropertychange",this._syncA),null!=this._observer?(this._observer.disconnect(),this._observer=null):this.$element[0].removeEventListener&&(this.$element[0].removeEventListener("DOMAttrModified",this._syncA,!1),this.$element[0].removeEventListener("DOMNodeInserted",this._syncS,!1),this.$element[0].removeEventListener("DOMNodeRemoved",this._syncS,!1)),this._syncA=null,this._syncS=null,this.$element.off(".select2"),this.$element.attr("tabindex",r.GetData(this.$element[0],"old-tabindex")),this.$element.removeClass("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),r.RemoveData(this.$element[0]),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},o.prototype.render=function(){var e=t('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return e.attr("dir",this.options.get("dir")),this.$container=e,this.$container.addClass("select2-container--"+this.options.get("theme")),r.StoreData(e[0],"element",this.$element),e},o})),e.define("jquery-mousewheel",["jquery"],(function(t){return t})),e.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults","./select2/utils"],(function(t,e,r,n,o){if(null==t.fn.select2){var i=["open","close","destroy"];t.fn.select2=function(e){if("object"==typeof(e=e||{}))return this.each((function(){var n=t.extend(!0,{},e);new r(t(this),n)})),this;if("string"!=typeof e)throw new Error("Invalid arguments for Select2: "+e);var n,a=Array.prototype.slice.call(arguments,1);return this.each((function(){var t=o.GetData(this,"select2");null==t&&window.console&&console.error&&console.error("The select2('"+e+"') method was called on an element that is not using Select2."),n=t[e].apply(t,a)})),-1<t.inArray(e,i)?this:n}}return null==t.fn.select2.defaults&&(t.fn.select2.defaults=n),r})),{define:e.define,require:e.require}}(),r=e.require("jquery.select2");return t.fn.select2.amd=e,r})?o.apply(e,i):o)||(t.exports=a)}).call(this,r(1))},function(t,e,r){var n=r(5),o=r(67);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};n(o,i);t.exports=o.locals||{}},function(t,e,r){(e=r(6)(!1)).push([t.i,'.select2-container{box-sizing:border-box;display:inline-block;margin:0;position:relative;vertical-align:middle}.select2-container .select2-selection--single{box-sizing:border-box;cursor:pointer;display:block;height:28px;user-select:none;-webkit-user-select:none}.select2-container .select2-selection--single .select2-selection__rendered{display:block;padding-left:8px;padding-right:20px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-selection--single .select2-selection__clear{position:relative}.select2-container[dir="rtl"] .select2-selection--single .select2-selection__rendered{padding-right:8px;padding-left:20px}.select2-container .select2-selection--multiple{box-sizing:border-box;cursor:pointer;display:block;min-height:32px;user-select:none;-webkit-user-select:none}.select2-container .select2-selection--multiple .select2-selection__rendered{display:inline-block;overflow:hidden;padding-left:8px;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-search--inline{float:left}.select2-container .select2-search--inline .select2-search__field{box-sizing:border-box;border:none;font-size:100%;margin-top:5px;padding:0}.select2-container .select2-search--inline .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-dropdown{background-color:white;border:1px solid #aaa;border-radius:4px;box-sizing:border-box;display:block;position:absolute;left:-100000px;width:100%;z-index:1051}.select2-results{display:block}.select2-results__options{list-style:none;margin:0;padding:0}.select2-results__option{padding:6px;user-select:none;-webkit-user-select:none}.select2-results__option[aria-selected]{cursor:pointer}.select2-container--open .select2-dropdown{left:0}.select2-container--open .select2-dropdown--above{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--open .select2-dropdown--below{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.select2-search--dropdown{display:block;padding:4px}.select2-search--dropdown .select2-search__field{padding:4px;width:100%;box-sizing:border-box}.select2-search--dropdown .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-search--dropdown.select2-search--hide{display:none}.select2-close-mask{border:0;margin:0;padding:0;display:block;position:fixed;left:0;top:0;min-height:100%;min-width:100%;height:auto;width:auto;opacity:0;z-index:99;background-color:#fff;filter:alpha(opacity=0)}.select2-hidden-accessible{border:0 !important;clip:rect(0 0 0 0) !important;-webkit-clip-path:inset(50%) !important;clip-path:inset(50%) !important;height:1px !important;overflow:hidden !important;padding:0 !important;position:absolute !important;width:1px !important;white-space:nowrap !important}.select2-container--default .select2-selection--single{background-color:#fff;border:1px solid #aaa;border-radius:4px}.select2-container--default .select2-selection--single .select2-selection__rendered{color:#444;line-height:28px}.select2-container--default .select2-selection--single .select2-selection__clear{cursor:pointer;float:right;font-weight:bold}.select2-container--default .select2-selection--single .select2-selection__placeholder{color:#999}.select2-container--default .select2-selection--single .select2-selection__arrow{height:26px;position:absolute;top:1px;right:1px;width:20px}.select2-container--default .select2-selection--single .select2-selection__arrow b{border-color:#888 transparent transparent transparent;border-style:solid;border-width:5px 4px 0 4px;height:0;left:50%;margin-left:-4px;margin-top:-2px;position:absolute;top:50%;width:0}.select2-container--default[dir="rtl"] .select2-selection--single .select2-selection__clear{float:left}.select2-container--default[dir="rtl"] .select2-selection--single .select2-selection__arrow{left:1px;right:auto}.select2-container--default.select2-container--disabled .select2-selection--single{background-color:#eee;cursor:default}.select2-container--default.select2-container--disabled .select2-selection--single .select2-selection__clear{display:none}.select2-container--default.select2-container--open .select2-selection--single .select2-selection__arrow b{border-color:transparent transparent #888 transparent;border-width:0 4px 5px 4px}.select2-container--default .select2-selection--multiple{background-color:white;border:1px solid #aaa;border-radius:4px;cursor:text}.select2-container--default .select2-selection--multiple .select2-selection__rendered{box-sizing:border-box;list-style:none;margin:0;padding:0 5px;width:100%}.select2-container--default .select2-selection--multiple .select2-selection__rendered li{list-style:none}.select2-container--default .select2-selection--multiple .select2-selection__clear{cursor:pointer;float:right;font-weight:bold;margin-top:5px;margin-right:10px;padding:1px}.select2-container--default .select2-selection--multiple .select2-selection__choice{background-color:#e4e4e4;border:1px solid #aaa;border-radius:4px;cursor:default;float:left;margin-right:5px;margin-top:5px;padding:0 5px}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove{color:#999;cursor:pointer;display:inline-block;font-weight:bold;margin-right:2px}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover{color:#333}.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice,.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-search--inline{float:right}.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice{margin-left:5px;margin-right:auto}.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove{margin-left:2px;margin-right:auto}.select2-container--default.select2-container--focus .select2-selection--multiple{border:solid black 1px;outline:0}.select2-container--default.select2-container--disabled .select2-selection--multiple{background-color:#eee;cursor:default}.select2-container--default.select2-container--disabled .select2-selection__choice__remove{display:none}.select2-container--default.select2-container--open.select2-container--above .select2-selection--single,.select2-container--default.select2-container--open.select2-container--above .select2-selection--multiple{border-top-left-radius:0;border-top-right-radius:0}.select2-container--default.select2-container--open.select2-container--below .select2-selection--single,.select2-container--default.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--default .select2-search--dropdown .select2-search__field{border:1px solid #aaa}.select2-container--default .select2-search--inline .select2-search__field{background:transparent;border:none;outline:0;box-shadow:none;-webkit-appearance:textfield}.select2-container--default .select2-results>.select2-results__options{max-height:200px;overflow-y:auto}.select2-container--default .select2-results__option[role=group]{padding:0}.select2-container--default .select2-results__option[aria-disabled=true]{color:#999}.select2-container--default .select2-results__option[aria-selected=true]{background-color:#ddd}.select2-container--default .select2-results__option .select2-results__option{padding-left:1em}.select2-container--default .select2-results__option .select2-results__option .select2-results__group{padding-left:0}.select2-container--default .select2-results__option .select2-results__option .select2-results__option{margin-left:-1em;padding-left:2em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-2em;padding-left:3em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-3em;padding-left:4em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-4em;padding-left:5em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-5em;padding-left:6em}.select2-container--default .select2-results__option--highlighted[aria-selected]{background-color:#5897fb;color:white}.select2-container--default .select2-results__group{cursor:default;display:block;padding:6px}.select2-container--classic .select2-selection--single{background-color:#f7f7f7;border:1px solid #aaa;border-radius:4px;outline:0;background-image:-webkit-linear-gradient(top, #fff 50%, #eee 100%);background-image:-o-linear-gradient(top, #fff 50%, #eee 100%);background-image:linear-gradient(to bottom, #fff 50%, #eee 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\'#FFFFFFFF\', endColorstr=\'#FFEEEEEE\', GradientType=0)}.select2-container--classic .select2-selection--single:focus{border:1px solid #5897fb}.select2-container--classic .select2-selection--single .select2-selection__rendered{color:#444;line-height:28px}.select2-container--classic .select2-selection--single .select2-selection__clear{cursor:pointer;float:right;font-weight:bold;margin-right:10px}.select2-container--classic .select2-selection--single .select2-selection__placeholder{color:#999}.select2-container--classic .select2-selection--single .select2-selection__arrow{background-color:#ddd;border:none;border-left:1px solid #aaa;border-top-right-radius:4px;border-bottom-right-radius:4px;height:26px;position:absolute;top:1px;right:1px;width:20px;background-image:-webkit-linear-gradient(top, #eee 50%, #ccc 100%);background-image:-o-linear-gradient(top, #eee 50%, #ccc 100%);background-image:linear-gradient(to bottom, #eee 50%, #ccc 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\'#FFEEEEEE\', endColorstr=\'#FFCCCCCC\', GradientType=0)}.select2-container--classic .select2-selection--single .select2-selection__arrow b{border-color:#888 transparent transparent transparent;border-style:solid;border-width:5px 4px 0 4px;height:0;left:50%;margin-left:-4px;margin-top:-2px;position:absolute;top:50%;width:0}.select2-container--classic[dir="rtl"] .select2-selection--single .select2-selection__clear{float:left}.select2-container--classic[dir="rtl"] .select2-selection--single .select2-selection__arrow{border:none;border-right:1px solid #aaa;border-radius:0;border-top-left-radius:4px;border-bottom-left-radius:4px;left:1px;right:auto}.select2-container--classic.select2-container--open .select2-selection--single{border:1px solid #5897fb}.select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow{background:transparent;border:none}.select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow b{border-color:transparent transparent #888 transparent;border-width:0 4px 5px 4px}.select2-container--classic.select2-container--open.select2-container--above .select2-selection--single{border-top:none;border-top-left-radius:0;border-top-right-radius:0;background-image:-webkit-linear-gradient(top, #fff 0%, #eee 50%);background-image:-o-linear-gradient(top, #fff 0%, #eee 50%);background-image:linear-gradient(to bottom, #fff 0%, #eee 50%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\'#FFFFFFFF\', endColorstr=\'#FFEEEEEE\', GradientType=0)}.select2-container--classic.select2-container--open.select2-container--below .select2-selection--single{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0;background-image:-webkit-linear-gradient(top, #eee 50%, #fff 100%);background-image:-o-linear-gradient(top, #eee 50%, #fff 100%);background-image:linear-gradient(to bottom, #eee 50%, #fff 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\'#FFEEEEEE\', endColorstr=\'#FFFFFFFF\', GradientType=0)}.select2-container--classic .select2-selection--multiple{background-color:white;border:1px solid #aaa;border-radius:4px;cursor:text;outline:0}.select2-container--classic .select2-selection--multiple:focus{border:1px solid #5897fb}.select2-container--classic .select2-selection--multiple .select2-selection__rendered{list-style:none;margin:0;padding:0 5px}.select2-container--classic .select2-selection--multiple .select2-selection__clear{display:none}.select2-container--classic .select2-selection--multiple .select2-selection__choice{background-color:#e4e4e4;border:1px solid #aaa;border-radius:4px;cursor:default;float:left;margin-right:5px;margin-top:5px;padding:0 5px}.select2-container--classic .select2-selection--multiple .select2-selection__choice__remove{color:#888;cursor:pointer;display:inline-block;font-weight:bold;margin-right:2px}.select2-container--classic .select2-selection--multiple .select2-selection__choice__remove:hover{color:#555}.select2-container--classic[dir="rtl"] .select2-selection--multiple .select2-selection__choice{float:right;margin-left:5px;margin-right:auto}.select2-container--classic[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove{margin-left:2px;margin-right:auto}.select2-container--classic.select2-container--open .select2-selection--multiple{border:1px solid #5897fb}.select2-container--classic.select2-container--open.select2-container--above .select2-selection--multiple{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.select2-container--classic.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--classic .select2-search--dropdown .select2-search__field{border:1px solid #aaa;outline:0}.select2-container--classic .select2-search--inline .select2-search__field{outline:0;box-shadow:none}.select2-container--classic .select2-dropdown{background-color:#fff;border:1px solid transparent}.select2-container--classic .select2-dropdown--above{border-bottom:none}.select2-container--classic .select2-dropdown--below{border-top:none}.select2-container--classic .select2-results>.select2-results__options{max-height:200px;overflow-y:auto}.select2-container--classic .select2-results__option[role=group]{padding:0}.select2-container--classic .select2-results__option[aria-disabled=true]{color:grey}.select2-container--classic .select2-results__option--highlighted[aria-selected]{background-color:#3875d7;color:#fff}.select2-container--classic .select2-results__group{cursor:default;display:block;padding:6px}.select2-container--classic.select2-container--open .select2-dropdown{border-color:#5897fb}\n',""]),t.exports=e},function(t,e,r){var n=r(5),o=r(69);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};n(o,i);t.exports=o.locals||{}},function(t,e,r){(e=r(6)(!1)).push([t.i,'.select2-container{display:block}.select2-container *:focus{outline:0}.input-group .select2-container--bootstrap4{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}.input-group-prepend ~ .select2-container--bootstrap4 .select2-selection{border-top-left-radius:0;border-bottom-left-radius:0}.input-group>.select2-container--bootstrap4:not(:last-child) .select2-selection{border-top-right-radius:0;border-bottom-right-radius:0}.select2-container--bootstrap4 .select2-selection{width:100%;background-color:#fff;border:1px solid #ced4da;border-radius:.25rem;-webkit-transition:border-color 0.15s ease-in-out,-webkit-box-shadow 0.15s ease-in-out;transition:border-color 0.15s ease-in-out,-webkit-box-shadow 0.15s ease-in-out;transition:border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;transition:border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out,-webkit-box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.select2-container--bootstrap4 .select2-selection{-webkit-transition:none;transition:none}}.select2-container--bootstrap4.select2-container--focus .select2-selection{border-color:#80bdff;-webkit-box-shadow:0 0 0 .2rem rgba(0,123,255,0.25);box-shadow:0 0 0 .2rem rgba(0,123,255,0.25)}.select2-container--bootstrap4.select2-container--focus.select2-container--open .select2-selection{border-bottom:none;border-bottom-right-radius:0;border-bottom-left-radius:0}.select2-container--bootstrap4.select2-container--open.select2-container--above .select2-selection{border-top-left-radius:0;border-top-right-radius:0}.select2-container--bootstrap4.select2-container--open.select2-container--below .select2-selection{border-bottom-right-radius:0;border-bottom-left-radius:0}.select2-container--bootstrap4.select2-container--disabled .select2-selection,.select2-container--bootstrap4.select2-container--disabled.select2-container--focus .select2-selection{cursor:not-allowed;background-color:#e9ecef;border-color:#ced4da;-webkit-box-shadow:none;box-shadow:none}.select2-container--bootstrap4.select2-container--disabled .select2-search__field,.select2-container--bootstrap4.select2-container--disabled.select2-container--focus .select2-search__field{background-color:transparent}select.is-invalid ~ .select2-container--bootstrap4 .select2-selection,form.was-validated select:invalid ~ .select2-container--bootstrap4 .select2-selection{border-color:#dc3545}select.is-valid ~ .select2-container--bootstrap4 .select2-selection,form.was-validated select:valid ~ .select2-container--bootstrap4 .select2-selection{border-color:#28a745}.select2-container--bootstrap4 .select2-search{width:100%}.select2-container--bootstrap4 .select2-dropdown{border-color:#ced4da;border-radius:0}.select2-container--bootstrap4 .select2-dropdown.select2-dropdown--below{border-top:none;border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.select2-container--bootstrap4 .select2-dropdown.select2-dropdown--above{border-top:1px solid #ced4da;border-top-left-radius:.25rem;border-top-right-radius:.25rem}.select2-container--bootstrap4 .select2-dropdown .select2-results__option[aria-selected="true"]{color:#212529;background-color:#f2f2f2}.select2-container--bootstrap4 .select2-results__option--highlighted,.select2-container--bootstrap4 .select2-results__option--highlighted.select2-results__option[aria-selected="true"]{color:#fff;background-color:#007bff}.select2-container--bootstrap4 .select2-results__option[role="group"]{padding:0}.select2-container--bootstrap4 .select2-results__option[role="group"] .select2-results__options--nested .select2-results__option{padding-left:1em}.select2-container--bootstrap4 .select2-results__option{padding:.375rem .75rem}.select2-container--bootstrap4 .select2-results>.select2-results__options{max-height:15em;overflow-y:auto}.select2-container--bootstrap4 .select2-results__group{display:list-item;padding:6px;color:#6c757d}.select2-container--bootstrap4 .select2-selection__clear{float:right;width:.9em;height:.9em;padding-left:.15em;margin-top:.7em;margin-right:.3em;line-height:.75em;color:#f8f9fa;background-color:#c8c8c8;border-radius:100%}.select2-container--bootstrap4 .select2-selection__clear:hover{background-color:#afafaf}.select2-container--bootstrap4 .select2-selection--single{height:calc(1.5em + .75rem + 2px) !important}.select2-container--bootstrap4 .select2-selection--single .select2-selection__placeholder{line-height:calc(1.5em + .75rem);color:#6c757d}.select2-container--bootstrap4 .select2-selection--single .select2-selection__arrow{position:absolute;top:50%;right:3px;width:20px}.select2-container--bootstrap4 .select2-selection--single .select2-selection__arrow b{position:absolute;top:60%;left:50%;width:0;height:0;margin-top:-2px;margin-left:-4px;border-color:#343a40 transparent transparent transparent;border-style:solid;border-width:5px 4px 0}.select2-container--bootstrap4 .select2-selection--single .select2-selection__rendered{padding-left:.75rem;line-height:calc(1.5em + .75rem);color:#495057}.select2-search--dropdown .select2-search__field{padding:.375rem .75rem;border:1px solid #ced4da;border-radius:.25rem}.select2-results__message{color:#6c757d}.select2-container--bootstrap4 .select2-selection--multiple{min-height:calc(1.5em + .75rem + 2px) !important}.select2-container--bootstrap4 .select2-selection--multiple .select2-selection__rendered{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;padding:0 .375rem;margin:0;list-style:none}.select2-container--bootstrap4 .select2-selection--multiple .select2-selection__choice{float:left;padding:0;padding-right:.75rem;margin-top:calc(.375rem - 2px);margin-right:.375rem;color:#495057;cursor:pointer;border:1px solid #bdc6d0;border-radius:.2rem}.select2-container--bootstrap4 .select2-selection--multiple .select2-search__field{color:#495057}.select2-container--bootstrap4 .select2-selection--multiple .select2-selection__choice+.select2-search{width:0}.select2-container--bootstrap4 .select2-selection--multiple .select2-selection__choice__remove{float:left;padding-right:3px;padding-left:3px;margin-right:1px;margin-left:3px;font-weight:700;color:#bdc6d0}.select2-container--bootstrap4 .select2-selection--multiple .select2-selection__choice__remove:hover{color:#343a40}.select2-container--bootstrap4 .select2-selection--multiple .select2-selection__clear{position:absolute !important;top:0;right:.7em;float:none;margin-right:0}.select2-container--bootstrap4.select2-container--disabled .select2-selection--multiple .select2-selection__choice{padding:0 5px;cursor:not-allowed}.select2-container--bootstrap4.select2-container--disabled .select2-selection--multiple .select2-selection__choice .select2-selection__choice__remove{display:none}\n\n',""]),t.exports=e},function(t,e,r){"use strict";var n,o,i,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s="object"===("undefined"==typeof window?"undefined":a(window));
/*! =======================================================
                      VERSION  11.0.2              
========================================================= */o=[r(1)],void 0===(i="function"==typeof(n=function(t){var e;return s&&!window.console&&(window.console={}),s&&!window.console.log&&(window.console.log=function(){}),s&&!window.console.warn&&(window.console.warn=function(){}),function(t){var e=Array.prototype.slice;function r(){}!function(t){if(t){var n="undefined"==typeof console?r:function(t){console.error(t)};t.bridget=function(r,o){!function(e){e.prototype.option||(e.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))})}(o),function(r,o){t.fn[r]=function(i){if("string"==typeof i){for(var a=e.call(arguments,1),s=0,l=this.length;s<l;s++){var d=this[s],c=t.data(d,r);if(c)if(t.isFunction(c[i])&&"_"!==i.charAt(0)){var u=c[i].apply(c,a);if(void 0!==u&&u!==c)return u}else n("no such method '"+i+"' for "+r+" instance");else n("cannot call methods on "+r+" prior to initialization; attempted to call '"+i+"'")}return this}var p=this.map((function(){var e=t.data(this,r);return e?(e.option(i),e._init()):(e=new o(this,i),t.data(this,r,e)),t(this)}));return 1===p.length?p[0]:p}}(r,o)},t.bridget}}(t)}(t),function(t){var r=void 0,n=function(t){return"Invalid input value '"+t+"' passed in"},o={linear:{getValue:function(t,e){return t<e.min?e.min:t>e.max?e.max:t},toValue:function(t){var e=t/100*(this.options.max-this.options.min),r=!0;if(this.options.ticks_positions.length>0){for(var n,i,a,s=0,l=1;l<this.options.ticks_positions.length;l++)if(t<=this.options.ticks_positions[l]){n=this.options.ticks[l-1],a=this.options.ticks_positions[l-1],i=this.options.ticks[l],s=this.options.ticks_positions[l];break}e=n+(t-a)/(s-a)*(i-n),r=!1}var d=(r?this.options.min:0)+Math.round(e/this.options.step)*this.options.step;return o.linear.getValue(d,this.options)},toPercentage:function(t){if(this.options.max===this.options.min)return 0;if(this.options.ticks_positions.length>0){for(var e,r,n,o=0,i=0;i<this.options.ticks.length;i++)if(t<=this.options.ticks[i]){e=i>0?this.options.ticks[i-1]:0,n=i>0?this.options.ticks_positions[i-1]:0,r=this.options.ticks[i],o=this.options.ticks_positions[i];break}if(i>0)return n+(t-e)/(r-e)*(o-n)}return 100*(t-this.options.min)/(this.options.max-this.options.min)}},logarithmic:{toValue:function(t){var e=1-this.options.min,r=Math.log(this.options.min+e),n=Math.log(this.options.max+e),i=Math.exp(r+(n-r)*t/100)-e;return Math.round(i)===n?n:(i=this.options.min+Math.round((i-this.options.min)/this.options.step)*this.options.step,o.linear.getValue(i,this.options))},toPercentage:function(t){if(this.options.max===this.options.min)return 0;var e=1-this.options.min,r=Math.log(this.options.max+e),n=Math.log(this.options.min+e);return 100*(Math.log(t+e)-n)/(r-n)}}};function i(e,r){this._state={value:null,enabled:null,offset:null,size:null,percentage:null,inDrag:!1,over:!1,tickIndex:null},this.ticksCallbackMap={},this.handleCallbackMap={},"string"==typeof e?this.element=document.querySelector(e):e instanceof HTMLElement&&(this.element=e),r=r||{};for(var n=Object.keys(this.defaultOptions),i=r.hasOwnProperty("min"),a=r.hasOwnProperty("max"),s=0;s<n.length;s++){var l=n[s],d=r[l];d=null!==(d=void 0!==d?d:u(this.element,l))?d:this.defaultOptions[l],this.options||(this.options={}),this.options[l]=d}if(this.ticksAreValid=Array.isArray(this.options.ticks)&&this.options.ticks.length>0,this.ticksAreValid||(this.options.lock_to_ticks=!1),"auto"===this.options.rtl){var c=window.getComputedStyle(this.element);this.options.rtl=null!=c?"rtl"===c.direction:"rtl"===this.element.style.direction}function u(t,e){var r="data-slider-"+e.replace(/_/g,"-"),n=t.getAttribute(r);try{return JSON.parse(n)}catch(t){return n}}"vertical"!==this.options.orientation||"top"!==this.options.tooltip_position&&"bottom"!==this.options.tooltip_position?"horizontal"!==this.options.orientation||"left"!==this.options.tooltip_position&&"right"!==this.options.tooltip_position||(this.options.tooltip_position="top"):this.options.rtl?this.options.tooltip_position="left":this.options.tooltip_position="right";var p,h,f,m,g,b=this.element.style.width,v=!1,y=this.element.parentNode;if(this.sliderElem)v=!0;else{this.sliderElem=document.createElement("div"),this.sliderElem.className="slider";var x=document.createElement("div");x.className="slider-track",(h=document.createElement("div")).className="slider-track-low",(p=document.createElement("div")).className="slider-selection",(f=document.createElement("div")).className="slider-track-high",(m=document.createElement("div")).className="slider-handle min-slider-handle",m.setAttribute("role","slider"),m.setAttribute("aria-valuemin",this.options.min),m.setAttribute("aria-valuemax",this.options.max),(g=document.createElement("div")).className="slider-handle max-slider-handle",g.setAttribute("role","slider"),g.setAttribute("aria-valuemin",this.options.min),g.setAttribute("aria-valuemax",this.options.max),x.appendChild(h),x.appendChild(p),x.appendChild(f),this.rangeHighlightElements=[];var w=this.options.rangeHighlights;if(Array.isArray(w)&&w.length>0)for(var _=0;_<w.length;_++){var k=document.createElement("div"),E=w[_].class||"";k.className="slider-rangeHighlight slider-selection "+E,this.rangeHighlightElements.push(k),x.appendChild(k)}var C=Array.isArray(this.options.labelledby);if(C&&this.options.labelledby[0]&&m.setAttribute("aria-labelledby",this.options.labelledby[0]),C&&this.options.labelledby[1]&&g.setAttribute("aria-labelledby",this.options.labelledby[1]),!C&&this.options.labelledby&&(m.setAttribute("aria-labelledby",this.options.labelledby),g.setAttribute("aria-labelledby",this.options.labelledby)),this.ticks=[],Array.isArray(this.options.ticks)&&this.options.ticks.length>0){for(this.ticksContainer=document.createElement("div"),this.ticksContainer.className="slider-tick-container",s=0;s<this.options.ticks.length;s++){var T=document.createElement("div");if(T.className="slider-tick",this.options.ticks_tooltip){var S=this._addTickListener(),A=S.addMouseEnter(this,T,s),L=S.addMouseLeave(this,T);this.ticksCallbackMap[s]={mouseEnter:A,mouseLeave:L}}this.ticks.push(T),this.ticksContainer.appendChild(T)}p.className+=" tick-slider-selection"}if(this.tickLabels=[],Array.isArray(this.options.ticks_labels)&&this.options.ticks_labels.length>0)for(this.tickLabelContainer=document.createElement("div"),this.tickLabelContainer.className="slider-tick-label-container",s=0;s<this.options.ticks_labels.length;s++){var D=document.createElement("div"),N=0===this.options.ticks_positions.length,O=this.options.reversed&&N?this.options.ticks_labels.length-(s+1):s;D.className="slider-tick-label",D.innerHTML=this.options.ticks_labels[O],this.tickLabels.push(D),this.tickLabelContainer.appendChild(D)}var M=function(t){var e=document.createElement("div");e.className="arrow";var r=document.createElement("div");r.className="tooltip-inner",t.appendChild(e),t.appendChild(r)},j=document.createElement("div");j.className="tooltip tooltip-main",j.setAttribute("role","presentation"),M(j);var z=document.createElement("div");z.className="tooltip tooltip-min",z.setAttribute("role","presentation"),M(z);var P=document.createElement("div");P.className="tooltip tooltip-max",P.setAttribute("role","presentation"),M(P),this.sliderElem.appendChild(x),this.sliderElem.appendChild(j),this.sliderElem.appendChild(z),this.sliderElem.appendChild(P),this.tickLabelContainer&&this.sliderElem.appendChild(this.tickLabelContainer),this.ticksContainer&&this.sliderElem.appendChild(this.ticksContainer),this.sliderElem.appendChild(m),this.sliderElem.appendChild(g),y.insertBefore(this.sliderElem,this.element),this.element.style.display="none"}if(t&&(this.$element=t(this.element),this.$sliderElem=t(this.sliderElem)),this.eventToCallbackMap={},this.sliderElem.id=this.options.id,this.touchCapable="ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch,this.touchX=0,this.touchY=0,this.tooltip=this.sliderElem.querySelector(".tooltip-main"),this.tooltipInner=this.tooltip.querySelector(".tooltip-inner"),this.tooltip_min=this.sliderElem.querySelector(".tooltip-min"),this.tooltipInner_min=this.tooltip_min.querySelector(".tooltip-inner"),this.tooltip_max=this.sliderElem.querySelector(".tooltip-max"),this.tooltipInner_max=this.tooltip_max.querySelector(".tooltip-inner"),o[this.options.scale]&&(this.options.scale=o[this.options.scale]),!0===v&&(this._removeClass(this.sliderElem,"slider-horizontal"),this._removeClass(this.sliderElem,"slider-vertical"),this._removeClass(this.sliderElem,"slider-rtl"),this._removeClass(this.tooltip,"hide"),this._removeClass(this.tooltip_min,"hide"),this._removeClass(this.tooltip_max,"hide"),["left","right","top","width","height"].forEach((function(t){this._removeProperty(this.trackLow,t),this._removeProperty(this.trackSelection,t),this._removeProperty(this.trackHigh,t)}),this),[this.handle1,this.handle2].forEach((function(t){this._removeProperty(t,"left"),this._removeProperty(t,"right"),this._removeProperty(t,"top")}),this),[this.tooltip,this.tooltip_min,this.tooltip_max].forEach((function(t){this._removeProperty(t,"bs-tooltip-left"),this._removeProperty(t,"bs-tooltip-right"),this._removeProperty(t,"bs-tooltip-top"),this._removeClass(t,"bs-tooltip-right"),this._removeClass(t,"bs-tooltip-left"),this._removeClass(t,"bs-tooltip-top")}),this)),"vertical"===this.options.orientation?(this._addClass(this.sliderElem,"slider-vertical"),this.stylePos="top",this.mousePos="pageY",this.sizePos="offsetHeight"):(this._addClass(this.sliderElem,"slider-horizontal"),this.sliderElem.style.width=b,this.options.orientation="horizontal",this.options.rtl?this.stylePos="right":this.stylePos="left",this.mousePos="clientX",this.sizePos="offsetWidth"),this.options.rtl&&this._addClass(this.sliderElem,"slider-rtl"),this._setTooltipPosition(),Array.isArray(this.options.ticks)&&this.options.ticks.length>0&&(a||(this.options.max=Math.max.apply(Math,this.options.ticks)),i||(this.options.min=Math.min.apply(Math,this.options.ticks))),Array.isArray(this.options.value)?(this.options.range=!0,this._state.value=this.options.value):this.options.range?this._state.value=[this.options.value,this.options.max]:this._state.value=this.options.value,this.trackLow=h||this.trackLow,this.trackSelection=p||this.trackSelection,this.trackHigh=f||this.trackHigh,"none"===this.options.selection?(this._addClass(this.trackLow,"hide"),this._addClass(this.trackSelection,"hide"),this._addClass(this.trackHigh,"hide")):"after"!==this.options.selection&&"before"!==this.options.selection||(this._removeClass(this.trackLow,"hide"),this._removeClass(this.trackSelection,"hide"),this._removeClass(this.trackHigh,"hide")),this.handle1=m||this.handle1,this.handle2=g||this.handle2,!0===v)for(this._removeClass(this.handle1,"round triangle"),this._removeClass(this.handle2,"round triangle hide"),s=0;s<this.ticks.length;s++)this._removeClass(this.ticks[s],"round triangle hide");if(-1!==["round","triangle","custom"].indexOf(this.options.handle))for(this._addClass(this.handle1,this.options.handle),this._addClass(this.handle2,this.options.handle),s=0;s<this.ticks.length;s++)this._addClass(this.ticks[s],this.options.handle);if(this._state.offset=this._offset(this.sliderElem),this._state.size=this.sliderElem[this.sizePos],this.setValue(this._state.value),this.handle1Keydown=this._keydown.bind(this,0),this.handle1.addEventListener("keydown",this.handle1Keydown,!1),this.handle2Keydown=this._keydown.bind(this,1),this.handle2.addEventListener("keydown",this.handle2Keydown,!1),this.mousedown=this._mousedown.bind(this),this.touchstart=this._touchstart.bind(this),this.touchmove=this._touchmove.bind(this),this.touchCapable&&(this.sliderElem.addEventListener("touchstart",this.touchstart,!1),this.sliderElem.addEventListener("touchmove",this.touchmove,!1)),this.sliderElem.addEventListener("mousedown",this.mousedown,!1),this.resize=this._resize.bind(this),window.addEventListener("resize",this.resize,!1),"hide"===this.options.tooltip)this._addClass(this.tooltip,"hide"),this._addClass(this.tooltip_min,"hide"),this._addClass(this.tooltip_max,"hide");else if("always"===this.options.tooltip)this._showTooltip(),this._alwaysShowTooltip=!0;else{if(this.showTooltip=this._showTooltip.bind(this),this.hideTooltip=this._hideTooltip.bind(this),this.options.ticks_tooltip){var R=this._addTickListener(),I=R.addMouseEnter(this,this.handle1),F=R.addMouseLeave(this,this.handle1);this.handleCallbackMap.handle1={mouseEnter:I,mouseLeave:F},I=R.addMouseEnter(this,this.handle2),F=R.addMouseLeave(this,this.handle2),this.handleCallbackMap.handle2={mouseEnter:I,mouseLeave:F}}else this.sliderElem.addEventListener("mouseenter",this.showTooltip,!1),this.sliderElem.addEventListener("mouseleave",this.hideTooltip,!1),this.touchCapable&&(this.sliderElem.addEventListener("touchstart",this.showTooltip,!1),this.sliderElem.addEventListener("touchmove",this.showTooltip,!1),this.sliderElem.addEventListener("touchend",this.hideTooltip,!1));this.handle1.addEventListener("focus",this.showTooltip,!1),this.handle1.addEventListener("blur",this.hideTooltip,!1),this.handle2.addEventListener("focus",this.showTooltip,!1),this.handle2.addEventListener("blur",this.hideTooltip,!1),this.touchCapable&&(this.handle1.addEventListener("touchstart",this.showTooltip,!1),this.handle1.addEventListener("touchmove",this.showTooltip,!1),this.handle1.addEventListener("touchend",this.hideTooltip,!1),this.handle2.addEventListener("touchstart",this.showTooltip,!1),this.handle2.addEventListener("touchmove",this.showTooltip,!1),this.handle2.addEventListener("touchend",this.hideTooltip,!1))}this.options.enabled?this.enable():this.disable()}(e=function(t,e){return i.call(this,t,e),this}).prototype={_init:function(){},constructor:e,defaultOptions:{id:"",min:0,max:10,step:1,precision:0,orientation:"horizontal",value:5,range:!1,selection:"before",tooltip:"show",tooltip_split:!1,lock_to_ticks:!1,handle:"round",reversed:!1,rtl:"auto",enabled:!0,formatter:function(t){return Array.isArray(t)?t[0]+" : "+t[1]:t},natural_arrow_keys:!1,ticks:[],ticks_positions:[],ticks_labels:[],ticks_snap_bounds:0,ticks_tooltip:!1,scale:"linear",focus:!1,tooltip_position:null,labelledby:null,rangeHighlights:[]},getElement:function(){return this.sliderElem},getValue:function(){return this.options.range?this._state.value:this._state.value[0]},setValue:function(t,e,r){t||(t=0);var n=this.getValue();this._state.value=this._validateInputValue(t);var o=this._applyPrecision.bind(this);this.options.range?(this._state.value[0]=o(this._state.value[0]),this._state.value[1]=o(this._state.value[1]),this.ticksAreValid&&this.options.lock_to_ticks&&(this._state.value[0]=this.options.ticks[this._getClosestTickIndex(this._state.value[0])],this._state.value[1]=this.options.ticks[this._getClosestTickIndex(this._state.value[1])]),this._state.value[0]=Math.max(this.options.min,Math.min(this.options.max,this._state.value[0])),this._state.value[1]=Math.max(this.options.min,Math.min(this.options.max,this._state.value[1]))):(this._state.value=o(this._state.value),this.ticksAreValid&&this.options.lock_to_ticks&&(this._state.value=this.options.ticks[this._getClosestTickIndex(this._state.value)]),this._state.value=[Math.max(this.options.min,Math.min(this.options.max,this._state.value))],this._addClass(this.handle2,"hide"),"after"===this.options.selection?this._state.value[1]=this.options.max:this._state.value[1]=this.options.min),this._setTickIndex(),this.options.max>this.options.min?this._state.percentage=[this._toPercentage(this._state.value[0]),this._toPercentage(this._state.value[1]),100*this.options.step/(this.options.max-this.options.min)]:this._state.percentage=[0,0,100],this._layout();var i=this.options.range?this._state.value:this._state.value[0];return this._setDataVal(i),!0===e&&this._trigger("slide",i),(Array.isArray(i)?n[0]!==i[0]||n[1]!==i[1]:n!==i)&&!0===r&&this._trigger("change",{oldValue:n,newValue:i}),this},destroy:function(){this._removeSliderEventHandlers(),this.sliderElem.parentNode.removeChild(this.sliderElem),this.element.style.display="",this._cleanUpEventCallbacksMap(),this.element.removeAttribute("data"),t&&(this._unbindJQueryEventHandlers(),"slider"===r&&this.$element.removeData(r),this.$element.removeData("bootstrapSlider"))},disable:function(){return this._state.enabled=!1,this.handle1.removeAttribute("tabindex"),this.handle2.removeAttribute("tabindex"),this._addClass(this.sliderElem,"slider-disabled"),this._trigger("slideDisabled"),this},enable:function(){return this._state.enabled=!0,this.handle1.setAttribute("tabindex",0),this.handle2.setAttribute("tabindex",0),this._removeClass(this.sliderElem,"slider-disabled"),this._trigger("slideEnabled"),this},toggle:function(){return this._state.enabled?this.disable():this.enable(),this},isEnabled:function(){return this._state.enabled},on:function(t,e){return this._bindNonQueryEventHandler(t,e),this},off:function(e,r){t?(this.$element.off(e,r),this.$sliderElem.off(e,r)):this._unbindNonQueryEventHandler(e,r)},getAttribute:function(t){return t?this.options[t]:this.options},setAttribute:function(t,e){return this.options[t]=e,this},refresh:function(e){var n=this.getValue();return this._removeSliderEventHandlers(),i.call(this,this.element,this.options),e&&!0===e.useCurrentValue&&this.setValue(n),t&&("slider"===r?(t.data(this.element,"slider",this),t.data(this.element,"bootstrapSlider",this)):t.data(this.element,"bootstrapSlider",this)),this},relayout:function(){return this._resize(),this},_removeTooltipListener:function(t,e){this.handle1.removeEventListener(t,e,!1),this.handle2.removeEventListener(t,e,!1)},_removeSliderEventHandlers:function(){if(this.handle1.removeEventListener("keydown",this.handle1Keydown,!1),this.handle2.removeEventListener("keydown",this.handle2Keydown,!1),this.options.ticks_tooltip){for(var t=this.ticksContainer.getElementsByClassName("slider-tick"),e=0;e<t.length;e++)t[e].removeEventListener("mouseenter",this.ticksCallbackMap[e].mouseEnter,!1),t[e].removeEventListener("mouseleave",this.ticksCallbackMap[e].mouseLeave,!1);this.handleCallbackMap.handle1&&this.handleCallbackMap.handle2&&(this.handle1.removeEventListener("mouseenter",this.handleCallbackMap.handle1.mouseEnter,!1),this.handle2.removeEventListener("mouseenter",this.handleCallbackMap.handle2.mouseEnter,!1),this.handle1.removeEventListener("mouseleave",this.handleCallbackMap.handle1.mouseLeave,!1),this.handle2.removeEventListener("mouseleave",this.handleCallbackMap.handle2.mouseLeave,!1))}this.handleCallbackMap=null,this.ticksCallbackMap=null,this.showTooltip&&this._removeTooltipListener("focus",this.showTooltip),this.hideTooltip&&this._removeTooltipListener("blur",this.hideTooltip),this.showTooltip&&this.sliderElem.removeEventListener("mouseenter",this.showTooltip,!1),this.hideTooltip&&this.sliderElem.removeEventListener("mouseleave",this.hideTooltip,!1),this.sliderElem.removeEventListener("mousedown",this.mousedown,!1),this.touchCapable&&(this.showTooltip&&(this.handle1.removeEventListener("touchstart",this.showTooltip,!1),this.handle1.removeEventListener("touchmove",this.showTooltip,!1),this.handle2.removeEventListener("touchstart",this.showTooltip,!1),this.handle2.removeEventListener("touchmove",this.showTooltip,!1)),this.hideTooltip&&(this.handle1.removeEventListener("touchend",this.hideTooltip,!1),this.handle2.removeEventListener("touchend",this.hideTooltip,!1)),this.showTooltip&&(this.sliderElem.removeEventListener("touchstart",this.showTooltip,!1),this.sliderElem.removeEventListener("touchmove",this.showTooltip,!1)),this.hideTooltip&&this.sliderElem.removeEventListener("touchend",this.hideTooltip,!1),this.sliderElem.removeEventListener("touchstart",this.touchstart,!1),this.sliderElem.removeEventListener("touchmove",this.touchmove,!1)),window.removeEventListener("resize",this.resize,!1)},_bindNonQueryEventHandler:function(t,e){void 0===this.eventToCallbackMap[t]&&(this.eventToCallbackMap[t]=[]),this.eventToCallbackMap[t].push(e)},_unbindNonQueryEventHandler:function(t,e){var r=this.eventToCallbackMap[t];if(void 0!==r)for(var n=0;n<r.length;n++)if(r[n]===e){r.splice(n,1);break}},_cleanUpEventCallbacksMap:function(){for(var t=Object.keys(this.eventToCallbackMap),e=0;e<t.length;e++){var r=t[e];delete this.eventToCallbackMap[r]}},_showTooltip:function(){!1===this.options.tooltip_split?(this._addClass(this.tooltip,"show"),this.tooltip_min.style.display="none",this.tooltip_max.style.display="none"):(this._addClass(this.tooltip_min,"show"),this._addClass(this.tooltip_max,"show"),this.tooltip.style.display="none"),this._state.over=!0},_hideTooltip:function(){!1===this._state.inDrag&&!0!==this._alwaysShowTooltip&&(this._removeClass(this.tooltip,"show"),this._removeClass(this.tooltip_min,"show"),this._removeClass(this.tooltip_max,"show")),this._state.over=!1},_setToolTipOnMouseOver:function(t){var e=this,r=this.options.formatter(t?t.value[0]:this._state.value[0]),n=o(t||this._state,this.options.reversed);function o(t,r){return r?[100-t.percentage[0],e.options.range?100-t.percentage[1]:t.percentage[1]]:[t.percentage[0],t.percentage[1]]}this._setText(this.tooltipInner,r),this.tooltip.style[this.stylePos]=n[0]+"%"},_copyState:function(){return{value:[this._state.value[0],this._state.value[1]],enabled:this._state.enabled,offset:this._state.offset,size:this._state.size,percentage:[this._state.percentage[0],this._state.percentage[1],this._state.percentage[2]],inDrag:this._state.inDrag,over:this._state.over,dragged:this._state.dragged,keyCtrl:this._state.keyCtrl}},_addTickListener:function(){return{addMouseEnter:function(t,e,r){var n=function(){var n=t._copyState(),o=e===t.handle1?n.value[0]:n.value[1],i=void 0;void 0!==r?(o=t.options.ticks[r],i=t.options.ticks_positions.length>0&&t.options.ticks_positions[r]||t._toPercentage(t.options.ticks[r])):i=t._toPercentage(o),n.value[0]=o,n.percentage[0]=i,t._setToolTipOnMouseOver(n),t._showTooltip()};return e.addEventListener("mouseenter",n,!1),n},addMouseLeave:function(t,e){var r=function(){t._hideTooltip()};return e.addEventListener("mouseleave",r,!1),r}}},_layout:function(){var t,e,r;if(t=this.options.reversed?[100-this._state.percentage[0],this.options.range?100-this._state.percentage[1]:this._state.percentage[1]]:[this._state.percentage[0],this._state.percentage[1]],this.handle1.style[this.stylePos]=t[0]+"%",this.handle1.setAttribute("aria-valuenow",this._state.value[0]),e=this.options.formatter(this._state.value[0]),isNaN(e)?this.handle1.setAttribute("aria-valuetext",e):this.handle1.removeAttribute("aria-valuetext"),this.handle2.style[this.stylePos]=t[1]+"%",this.handle2.setAttribute("aria-valuenow",this._state.value[1]),e=this.options.formatter(this._state.value[1]),isNaN(e)?this.handle2.setAttribute("aria-valuetext",e):this.handle2.removeAttribute("aria-valuetext"),this.rangeHighlightElements.length>0&&Array.isArray(this.options.rangeHighlights)&&this.options.rangeHighlights.length>0)for(var n=0;n<this.options.rangeHighlights.length;n++){var o=this._toPercentage(this.options.rangeHighlights[n].start),i=this._toPercentage(this.options.rangeHighlights[n].end);if(this.options.reversed){var a=100-i;i=100-o,o=a}var s=this._createHighlightRange(o,i);s?"vertical"===this.options.orientation?(this.rangeHighlightElements[n].style.top=s.start+"%",this.rangeHighlightElements[n].style.height=s.size+"%"):(this.options.rtl?this.rangeHighlightElements[n].style.right=s.start+"%":this.rangeHighlightElements[n].style.left=s.start+"%",this.rangeHighlightElements[n].style.width=s.size+"%"):this.rangeHighlightElements[n].style.display="none"}if(Array.isArray(this.options.ticks)&&this.options.ticks.length>0){var l,d="vertical"===this.options.orientation?"height":"width";l="vertical"===this.options.orientation?"marginTop":this.options.rtl?"marginRight":"marginLeft";var c=this._state.size/(this.options.ticks.length-1);if(this.tickLabelContainer){var u=0;if(0===this.options.ticks_positions.length)"vertical"!==this.options.orientation&&(this.tickLabelContainer.style[l]=-c/2+"px"),u=this.tickLabelContainer.offsetHeight;else for(p=0;p<this.tickLabelContainer.childNodes.length;p++)this.tickLabelContainer.childNodes[p].offsetHeight>u&&(u=this.tickLabelContainer.childNodes[p].offsetHeight);"horizontal"===this.options.orientation&&(this.sliderElem.style.marginBottom=u+"px")}for(var p=0;p<this.options.ticks.length;p++){var h=this.options.ticks_positions[p]||this._toPercentage(this.options.ticks[p]);this.options.reversed&&(h=100-h),this.ticks[p].style[this.stylePos]=h+"%",this._removeClass(this.ticks[p],"in-selection"),this.options.range?h>=t[0]&&h<=t[1]&&this._addClass(this.ticks[p],"in-selection"):("after"===this.options.selection&&h>=t[0]||"before"===this.options.selection&&h<=t[0])&&this._addClass(this.ticks[p],"in-selection"),this.tickLabels[p]&&(this.tickLabels[p].style[d]=c+"px","vertical"!==this.options.orientation&&void 0!==this.options.ticks_positions[p]?(this.tickLabels[p].style.position="absolute",this.tickLabels[p].style[this.stylePos]=h+"%",this.tickLabels[p].style[l]=-c/2+"px"):"vertical"===this.options.orientation&&(this.options.rtl?this.tickLabels[p].style.marginRight=this.sliderElem.offsetWidth+"px":this.tickLabels[p].style.marginLeft=this.sliderElem.offsetWidth+"px",this.tickLabelContainer.style[l]=this.sliderElem.offsetWidth/2*-1+"px"),this._removeClass(this.tickLabels[p],"label-in-selection label-is-selection"),this.options.range?h>=t[0]&&h<=t[1]&&(this._addClass(this.tickLabels[p],"label-in-selection"),(h===t[0]||t[1])&&this._addClass(this.tickLabels[p],"label-is-selection")):(("after"===this.options.selection&&h>=t[0]||"before"===this.options.selection&&h<=t[0])&&this._addClass(this.tickLabels[p],"label-in-selection"),h===t[0]&&this._addClass(this.tickLabels[p],"label-is-selection")))}}if(this.options.range){r=this.options.formatter(this._state.value),this._setText(this.tooltipInner,r),this.tooltip.style[this.stylePos]=(t[1]+t[0])/2+"%";var f=this.options.formatter(this._state.value[0]);this._setText(this.tooltipInner_min,f);var m=this.options.formatter(this._state.value[1]);this._setText(this.tooltipInner_max,m),this.tooltip_min.style[this.stylePos]=t[0]+"%",this.tooltip_max.style[this.stylePos]=t[1]+"%"}else r=this.options.formatter(this._state.value[0]),this._setText(this.tooltipInner,r),this.tooltip.style[this.stylePos]=t[0]+"%";if("vertical"===this.options.orientation)this.trackLow.style.top="0",this.trackLow.style.height=Math.min(t[0],t[1])+"%",this.trackSelection.style.top=Math.min(t[0],t[1])+"%",this.trackSelection.style.height=Math.abs(t[0]-t[1])+"%",this.trackHigh.style.bottom="0",this.trackHigh.style.height=100-Math.min(t[0],t[1])-Math.abs(t[0]-t[1])+"%";else{"right"===this.stylePos?this.trackLow.style.right="0":this.trackLow.style.left="0",this.trackLow.style.width=Math.min(t[0],t[1])+"%","right"===this.stylePos?this.trackSelection.style.right=Math.min(t[0],t[1])+"%":this.trackSelection.style.left=Math.min(t[0],t[1])+"%",this.trackSelection.style.width=Math.abs(t[0]-t[1])+"%","right"===this.stylePos?this.trackHigh.style.left="0":this.trackHigh.style.right="0",this.trackHigh.style.width=100-Math.min(t[0],t[1])-Math.abs(t[0]-t[1])+"%";var g=this.tooltip_min.getBoundingClientRect(),b=this.tooltip_max.getBoundingClientRect();"bottom"===this.options.tooltip_position?g.right>b.left?(this._removeClass(this.tooltip_max,"bs-tooltip-bottom"),this._addClass(this.tooltip_max,"bs-tooltip-top"),this.tooltip_max.style.top="",this.tooltip_max.style.bottom="22px"):(this._removeClass(this.tooltip_max,"bs-tooltip-top"),this._addClass(this.tooltip_max,"bs-tooltip-bottom"),this.tooltip_max.style.top=this.tooltip_min.style.top,this.tooltip_max.style.bottom=""):g.right>b.left?(this._removeClass(this.tooltip_max,"bs-tooltip-top"),this._addClass(this.tooltip_max,"bs-tooltip-bottom"),this.tooltip_max.style.top="18px"):(this._removeClass(this.tooltip_max,"bs-tooltip-bottom"),this._addClass(this.tooltip_max,"bs-tooltip-top"),this.tooltip_max.style.top=this.tooltip_min.style.top)}},_createHighlightRange:function(t,e){return this._isHighlightRange(t,e)?t>e?{start:e,size:t-e}:{start:t,size:e-t}:null},_isHighlightRange:function(t,e){return 0<=t&&t<=100&&0<=e&&e<=100},_resize:function(t){this._state.offset=this._offset(this.sliderElem),this._state.size=this.sliderElem[this.sizePos],this._layout()},_removeProperty:function(t,e){t.style.removeProperty?t.style.removeProperty(e):t.style.removeAttribute(e)},_mousedown:function(t){if(!this._state.enabled)return!1;t.preventDefault&&t.preventDefault(),this._state.offset=this._offset(this.sliderElem),this._state.size=this.sliderElem[this.sizePos];var e=this._getPercentage(t);if(this.options.range){var r=Math.abs(this._state.percentage[0]-e),n=Math.abs(this._state.percentage[1]-e);this._state.dragged=r<n?0:1,this._adjustPercentageForRangeSliders(e)}else this._state.dragged=0;this._state.percentage[this._state.dragged]=e,this.touchCapable&&(document.removeEventListener("touchmove",this.mousemove,!1),document.removeEventListener("touchend",this.mouseup,!1)),this.mousemove&&document.removeEventListener("mousemove",this.mousemove,!1),this.mouseup&&document.removeEventListener("mouseup",this.mouseup,!1),this.mousemove=this._mousemove.bind(this),this.mouseup=this._mouseup.bind(this),this.touchCapable&&(document.addEventListener("touchmove",this.mousemove,!1),document.addEventListener("touchend",this.mouseup,!1)),document.addEventListener("mousemove",this.mousemove,!1),document.addEventListener("mouseup",this.mouseup,!1),this._state.inDrag=!0;var o=this._calculateValue();return this._trigger("slideStart",o),this.setValue(o,!1,!0),t.returnValue=!1,this.options.focus&&this._triggerFocusOnHandle(this._state.dragged),!0},_touchstart:function(t){this._mousedown(t)},_triggerFocusOnHandle:function(t){0===t&&this.handle1.focus(),1===t&&this.handle2.focus()},_keydown:function(t,e){if(!this._state.enabled)return!1;var r;switch(e.keyCode){case 37:case 40:r=-1;break;case 39:case 38:r=1}if(r){if(this.options.natural_arrow_keys){var n="horizontal"===this.options.orientation,o="vertical"===this.options.orientation,i=this.options.rtl,a=this.options.reversed;n?i?a||(r=-r):a&&(r=-r):o&&(a||(r=-r))}var s;if(this.ticksAreValid&&this.options.lock_to_ticks){var l=void 0;-1===(l=this.options.ticks.indexOf(this._state.value[t]))&&(l=0,window.console.warn("(lock_to_ticks) _keydown: index should not be -1")),l+=r,l=Math.max(0,Math.min(this.options.ticks.length-1,l)),s=this.options.ticks[l]}else s=this._state.value[t]+r*this.options.step;var d=this._toPercentage(s);if(this._state.keyCtrl=t,this.options.range){this._adjustPercentageForRangeSliders(d);var c=this._state.keyCtrl?this._state.value[0]:s,u=this._state.keyCtrl?s:this._state.value[1];s=[Math.max(this.options.min,Math.min(this.options.max,c)),Math.max(this.options.min,Math.min(this.options.max,u))]}else s=Math.max(this.options.min,Math.min(this.options.max,s));return this._trigger("slideStart",s),this.setValue(s,!0,!0),this._trigger("slideStop",s),this._pauseEvent(e),delete this._state.keyCtrl,!1}},_pauseEvent:function(t){t.stopPropagation&&t.stopPropagation(),t.preventDefault&&t.preventDefault(),t.cancelBubble=!0,t.returnValue=!1},_mousemove:function(t){if(!this._state.enabled)return!1;var e=this._getPercentage(t);this._adjustPercentageForRangeSliders(e),this._state.percentage[this._state.dragged]=e;var r=this._calculateValue(!0);return this.setValue(r,!0,!0),!1},_touchmove:function(t){void 0!==t.changedTouches&&t.preventDefault&&t.preventDefault()},_adjustPercentageForRangeSliders:function(t){if(this.options.range){var e=this._getNumDigitsAfterDecimalPlace(t);e=e?e-1:0;var r=this._applyToFixedAndParseFloat(t,e);0===this._state.dragged&&this._applyToFixedAndParseFloat(this._state.percentage[1],e)<r?(this._state.percentage[0]=this._state.percentage[1],this._state.dragged=1):1===this._state.dragged&&this._applyToFixedAndParseFloat(this._state.percentage[0],e)>r?(this._state.percentage[1]=this._state.percentage[0],this._state.dragged=0):0===this._state.keyCtrl&&this._toPercentage(this._state.value[1])<t?(this._state.percentage[0]=this._state.percentage[1],this._state.keyCtrl=1,this.handle2.focus()):1===this._state.keyCtrl&&this._toPercentage(this._state.value[0])>t&&(this._state.percentage[1]=this._state.percentage[0],this._state.keyCtrl=0,this.handle1.focus())}},_mouseup:function(t){if(!this._state.enabled)return!1;var e=this._getPercentage(t);this._adjustPercentageForRangeSliders(e),this._state.percentage[this._state.dragged]=e,this.touchCapable&&(document.removeEventListener("touchmove",this.mousemove,!1),document.removeEventListener("touchend",this.mouseup,!1)),document.removeEventListener("mousemove",this.mousemove,!1),document.removeEventListener("mouseup",this.mouseup,!1),this._state.inDrag=!1,!1===this._state.over&&this._hideTooltip();var r=this._calculateValue(!0);return this.setValue(r,!1,!0),this._trigger("slideStop",r),this._state.dragged=null,!1},_setValues:function(t,e){var r=0===t?0:100;this._state.percentage[t]!==r&&(e.data[t]=this._toValue(this._state.percentage[t]),e.data[t]=this._applyPrecision(e.data[t]))},_calculateValue:function(t){var e={};return this.options.range?(e.data=[this.options.min,this.options.max],this._setValues(0,e),this._setValues(1,e),t&&(e.data[0]=this._snapToClosestTick(e.data[0]),e.data[1]=this._snapToClosestTick(e.data[1]))):(e.data=this._toValue(this._state.percentage[0]),e.data=parseFloat(e.data),e.data=this._applyPrecision(e.data),t&&(e.data=this._snapToClosestTick(e.data))),e.data},_snapToClosestTick:function(t){for(var e=[t,1/0],r=0;r<this.options.ticks.length;r++){var n=Math.abs(this.options.ticks[r]-t);n<=e[1]&&(e=[this.options.ticks[r],n])}return e[1]<=this.options.ticks_snap_bounds?e[0]:t},_applyPrecision:function(t){var e=this.options.precision||this._getNumDigitsAfterDecimalPlace(this.options.step);return this._applyToFixedAndParseFloat(t,e)},_getNumDigitsAfterDecimalPlace:function(t){var e=(""+t).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return e?Math.max(0,(e[1]?e[1].length:0)-(e[2]?+e[2]:0)):0},_applyToFixedAndParseFloat:function(t,e){var r=t.toFixed(e);return parseFloat(r)},_getPercentage:function(t){!this.touchCapable||"touchstart"!==t.type&&"touchmove"!==t.type&&"touchend"!==t.type||(t=t.changedTouches[0]);var e=t[this.mousePos]-this._state.offset[this.stylePos];"right"===this.stylePos&&(e=-e);var r=e/this._state.size*100;return r=Math.round(r/this._state.percentage[2])*this._state.percentage[2],this.options.reversed&&(r=100-r),Math.max(0,Math.min(100,r))},_validateInputValue:function(t){if(isNaN(+t)){if(Array.isArray(t))return this._validateArray(t),t;throw new Error(n(t))}return+t},_validateArray:function(t){for(var e=0;e<t.length;e++){var r=t[e];if("number"!=typeof r)throw new Error(n(r))}},_setDataVal:function(t){this.element.setAttribute("data-value",t),this.element.setAttribute("value",t),this.element.value=t},_trigger:function(e,r){r=r||0===r?r:void 0;var n=this.eventToCallbackMap[e];if(n&&n.length)for(var o=0;o<n.length;o++)(0,n[o])(r);t&&this._triggerJQueryEvent(e,r)},_triggerJQueryEvent:function(t,e){var r={type:t,value:e};this.$element.trigger(r),this.$sliderElem.trigger(r)},_unbindJQueryEventHandlers:function(){this.$element.off(),this.$sliderElem.off()},_setText:function(t,e){void 0!==t.textContent?t.textContent=e:void 0!==t.innerText&&(t.innerText=e)},_removeClass:function(t,e){for(var r=e.split(" "),n=t.className,o=0;o<r.length;o++){var i=r[o],a=new RegExp("(?:\\s|^)"+i+"(?:\\s|$)");n=n.replace(a," ")}t.className=n.trim()},_addClass:function(t,e){for(var r=e.split(" "),n=t.className,o=0;o<r.length;o++){var i=r[o];new RegExp("(?:\\s|^)"+i+"(?:\\s|$)").test(n)||(n+=" "+i)}t.className=n.trim()},_offsetLeft:function(t){return t.getBoundingClientRect().left},_offsetRight:function(t){return t.getBoundingClientRect().right},_offsetTop:function(t){for(var e=t.offsetTop;(t=t.offsetParent)&&!isNaN(t.offsetTop);)e+=t.offsetTop,"BODY"!==t.tagName&&(e-=t.scrollTop);return e},_offset:function(t){return{left:this._offsetLeft(t),right:this._offsetRight(t),top:this._offsetTop(t)}},_css:function(e,r,n){if(t)t.style(e,r,n);else{var o=r.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(t,e){return e.toUpperCase()}));e.style[o]=n}},_toValue:function(t){return this.options.scale.toValue.apply(this,[t])},_toPercentage:function(t){return this.options.scale.toPercentage.apply(this,[t])},_setTooltipPosition:function(){var t=[this.tooltip,this.tooltip_min,this.tooltip_max];if("vertical"===this.options.orientation){var e,r="left"===(e=this.options.tooltip_position?this.options.tooltip_position:this.options.rtl?"left":"right")?"right":"left";t.forEach(function(t){this._addClass(t,"bs-tooltip-"+e),t.style[r]="100%"}.bind(this))}else"bottom"===this.options.tooltip_position?t.forEach(function(t){this._addClass(t,"bs-tooltip-bottom"),t.style.top="22px"}.bind(this)):t.forEach(function(t){this._addClass(t,"bs-tooltip-top"),t.style.top=-this.tooltip.outerHeight-14+"px"}.bind(this))},_getClosestTickIndex:function(t){for(var e=Math.abs(t-this.options.ticks[0]),r=0,n=0;n<this.options.ticks.length;++n){var o=Math.abs(t-this.options.ticks[n]);o<e&&(e=o,r=n)}return r},_setTickIndex:function(){this.ticksAreValid&&(this._state.tickIndex=[this.options.ticks.indexOf(this._state.value[0]),this.options.ticks.indexOf(this._state.value[1])])}},t&&t.fn&&(t.fn.slider?(s&&window.console.warn("bootstrap-slider.js - WARNING: $.fn.slider namespace is already bound. Use the $.fn.bootstrapSlider namespace instead."),r="bootstrapSlider"):(t.bridget("slider",e),r="slider"),t.bridget("bootstrapSlider",e),t((function(){t("input[data-provide=slider]")[r]()})))}(t),e})?n.apply(e,o):n)||(t.exports=i)},function(t,e,r){var n=r(5),o=r(72);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};n(o,i);t.exports=o.locals||{}},function(t,e,r){(e=r(6)(!1)).push([t.i,"/*! =======================================================\n                      VERSION  11.0.2              \n========================================================= */\n/*! =========================================================\n * bootstrap-slider.js\n *\n * Maintainers:\n *\t\tKyle Kemp\n *\t\t\t- Twitter: @seiyria\n *\t\t\t- Github:  seiyria\n *\t\tRohit Kalkur\n *\t\t\t- Twitter: @Rovolutionary\n *\t\t\t- Github:  rovolution\n *\n * =========================================================\n *\n * bootstrap-slider is released under the MIT License\n * Copyright (c) 2019 Kyle Kemp, Rohit Kalkur, and contributors\n * \n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n * \n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * ========================================================= */.slider{display:inline-block;vertical-align:middle;position:relative}.slider.slider-horizontal{width:210px;height:20px}.slider.slider-horizontal .slider-track{height:10px;width:100%;margin-top:-5px;top:50%;left:0}.slider.slider-horizontal .slider-selection,.slider.slider-horizontal .slider-track-low,.slider.slider-horizontal .slider-track-high{height:100%;top:0;bottom:0}.slider.slider-horizontal .slider-tick,.slider.slider-horizontal .slider-handle{margin-left:-10px}.slider.slider-horizontal .slider-tick.triangle,.slider.slider-horizontal .slider-handle.triangle{position:relative;top:50%;transform:translateY(-50%);border-width:0 10px 10px 10px;width:0;height:0;border-bottom-color:#036fa5;margin-top:0}.slider.slider-horizontal .slider-tick-container{white-space:nowrap;position:absolute;top:0;left:0;width:100%}.slider.slider-horizontal .slider-tick-label-container{white-space:nowrap;margin-top:20px}.slider.slider-horizontal .slider-tick-label-container .slider-tick-label{display:inline-block;text-align:center}.slider.slider-horizontal.slider-rtl .slider-track{left:initial;right:0}.slider.slider-horizontal.slider-rtl .slider-tick,.slider.slider-horizontal.slider-rtl .slider-handle{margin-left:initial;margin-right:-10px}.slider.slider-horizontal.slider-rtl .slider-tick-container{left:initial;right:0}.slider.slider-vertical{height:210px;width:20px}.slider.slider-vertical .slider-track{width:10px;height:100%;left:25%;top:0}.slider.slider-vertical .slider-selection{width:100%;left:0;top:0;bottom:0}.slider.slider-vertical .slider-track-low,.slider.slider-vertical .slider-track-high{width:100%;left:0;right:0}.slider.slider-vertical .slider-tick,.slider.slider-vertical .slider-handle{margin-top:-10px}.slider.slider-vertical .slider-tick.triangle,.slider.slider-vertical .slider-handle.triangle{border-width:10px 0 10px 10px;width:1px;height:1px;border-left-color:#036fa5;margin-left:0}.slider.slider-vertical .slider-tick-label-container{white-space:nowrap}.slider.slider-vertical .slider-tick-label-container .slider-tick-label{padding-left:4px}.slider.slider-vertical.slider-rtl .slider-track{left:initial;right:25%}.slider.slider-vertical.slider-rtl .slider-selection{left:initial;right:0}.slider.slider-vertical.slider-rtl .slider-tick.triangle,.slider.slider-vertical.slider-rtl .slider-handle.triangle{border-width:10px 10px 10px 0}.slider.slider-vertical.slider-rtl .slider-tick-label-container .slider-tick-label{padding-left:initial;padding-right:4px}.slider.slider-disabled .slider-handle{background-color:#cfcfcf;background-image:-moz-linear-gradient(top, #DFDFDF, #BEBEBE);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#DFDFDF), to(#BEBEBE));background-image:-webkit-linear-gradient(top, #DFDFDF, #BEBEBE);background-image:-o-linear-gradient(top, #DFDFDF, #BEBEBE);background-image:linear-gradient(to bottom, #DFDFDF, #BEBEBE);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#DFDFDF', endColorstr='#BEBEBE',GradientType=0)}.slider.slider-disabled .slider-track{background-color:#e7e7e7;background-image:-moz-linear-gradient(top, #E5E5E5, #E9E9E9);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#E5E5E5), to(#E9E9E9));background-image:-webkit-linear-gradient(top, #E5E5E5, #E9E9E9);background-image:-o-linear-gradient(top, #E5E5E5, #E9E9E9);background-image:linear-gradient(to bottom, #E5E5E5, #E9E9E9);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#E5E5E5', endColorstr='#E9E9E9',GradientType=0);cursor:not-allowed}.slider input{display:none}.slider .tooltip-inner{white-space:nowrap;max-width:none}.slider .bs-tooltip-top .tooltip-inner,.slider .bs-tooltip-bottom .tooltip-inner{position:relative;left:-50%}.slider.bs-tooltip-left .tooltip-inner,.slider.bs-tooltip-right .tooltip-inner{position:relative;top:-100%}.slider .tooltip{pointer-events:none}.slider .tooltip.bs-tooltip-top .arrow,.slider .tooltip.bs-tooltip-bottom .arrow{left:-.4rem}.slider .tooltip.bs-tooltip-top{margin-top:-44px}.slider .tooltip.bs-tooltip-bottom{margin-top:2px}.slider .tooltip.bs-tooltip-left,.slider .tooltip.bs-tooltip-right{margin-top:-14px}.slider .tooltip.bs-tooltip-left .arrow,.slider .tooltip.bs-tooltip-right .arrow{top:8px}.slider .hide{display:none}.slider-track{background-color:#f7f7f7;background-image:-moz-linear-gradient(top, #f5f5f5, #F9F9F9);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#f5f5f5), to(#F9F9F9));background-image:-webkit-linear-gradient(top, #f5f5f5, #F9F9F9);background-image:-o-linear-gradient(top, #f5f5f5, #F9F9F9);background-image:linear-gradient(to bottom, #f5f5f5, #F9F9F9);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#f5f5f5', endColorstr='#F9F9F9',GradientType=0);-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);-moz-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;position:absolute;cursor:pointer}.slider-selection{background-color:#f7f7f7;background-image:-moz-linear-gradient(top, #F9F9F9, #f5f5f5);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#F9F9F9), to(#f5f5f5));background-image:-webkit-linear-gradient(top, #F9F9F9, #f5f5f5);background-image:-o-linear-gradient(top, #F9F9F9, #f5f5f5);background-image:linear-gradient(to bottom, #F9F9F9, #f5f5f5);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#F9F9F9', endColorstr='#f5f5f5',GradientType=0);-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-moz-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;position:absolute}.slider-selection.tick-slider-selection{background-color:#46c1fe;background-image:-moz-linear-gradient(top, #52c5ff, #3abcfd);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#52c5ff), to(#3abcfd));background-image:-webkit-linear-gradient(top, #52c5ff, #3abcfd);background-image:-o-linear-gradient(top, #52c5ff, #3abcfd);background-image:linear-gradient(to bottom, #52c5ff, #3abcfd);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#52c5ff', endColorstr='#3abcfd',GradientType=0)}.slider-track-low,.slider-track-high{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;position:absolute;background:transparent}.slider-handle{background-color:#0478b2;background-image:-moz-linear-gradient(top, #0480BE, #036fa5);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#0480BE), to(#036fa5));background-image:-webkit-linear-gradient(top, #0480BE, #036fa5);background-image:-o-linear-gradient(top, #0480BE, #036fa5);background-image:linear-gradient(to bottom, #0480BE, #036fa5);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#0480BE', endColorstr='#036fa5',GradientType=0);-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);box-shadow:inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);position:absolute;top:0;width:20px;height:20px;background-color:#0480BE;border:0px solid transparent}.slider-handle:hover{cursor:pointer}.slider-handle.round{-webkit-border-radius:20px;-moz-border-radius:20px;border-radius:20px}.slider-handle.triangle{background:transparent none}.slider-handle.custom{background:transparent none}.slider-handle.custom::before{line-height:20px;font-size:20px;content:'\\2605';color:#726204}.slider-tick{background-color:#f7f7f7;background-image:-moz-linear-gradient(top, #f5f5f5, #F9F9F9);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#f5f5f5), to(#F9F9F9));background-image:-webkit-linear-gradient(top, #f5f5f5, #F9F9F9);background-image:-o-linear-gradient(top, #f5f5f5, #F9F9F9);background-image:linear-gradient(to bottom, #f5f5f5, #F9F9F9);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#f5f5f5', endColorstr='#F9F9F9',GradientType=0);-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-moz-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;cursor:pointer;width:20px;height:20px;filter:none;opacity:0.8;border:0px solid transparent}.slider-tick.round{border-radius:50%}.slider-tick.triangle{background:transparent none}.slider-tick.custom{background:transparent none}.slider-tick.custom::before{line-height:20px;font-size:20px;content:'\\2605';color:#726204}.slider-tick.in-selection{background-color:#46c1fe;background-image:-moz-linear-gradient(top, #52c5ff, #3abcfd);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#52c5ff), to(#3abcfd));background-image:-webkit-linear-gradient(top, #52c5ff, #3abcfd);background-image:-o-linear-gradient(top, #52c5ff, #3abcfd);background-image:linear-gradient(to bottom, #52c5ff, #3abcfd);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#52c5ff', endColorstr='#3abcfd',GradientType=0);opacity:1}",""]),t.exports=e},function(t,e,r){var n=r(74),o=r(75),i=Object.hasOwnProperty,a={};for(var s in n)i.call(n,s)&&(a[n[s]]=s);var l=t.exports={to:{},get:{}};function d(t,e,r){return Math.min(Math.max(e,t),r)}function c(t){var e=Math.round(t).toString(16).toUpperCase();return e.length<2?"0"+e:e}l.get=function(t){var e,r;switch(t.substring(0,3).toLowerCase()){case"hsl":e=l.get.hsl(t),r="hsl";break;case"hwb":e=l.get.hwb(t),r="hwb";break;default:e=l.get.rgb(t),r="rgb"}return e?{model:r,value:e}:null},l.get.rgb=function(t){if(!t)return null;var e,r,o,a=[0,0,0,1];if(e=t.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)){for(o=e[2],e=e[1],r=0;r<3;r++){var s=2*r;a[r]=parseInt(e.slice(s,s+2),16)}o&&(a[3]=parseInt(o,16)/255)}else if(e=t.match(/^#([a-f0-9]{3,4})$/i)){for(o=(e=e[1])[3],r=0;r<3;r++)a[r]=parseInt(e[r]+e[r],16);o&&(a[3]=parseInt(o+o,16)/255)}else if(e=t.match(/^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/)){for(r=0;r<3;r++)a[r]=parseInt(e[r+1],0);e[4]&&(e[5]?a[3]=.01*parseFloat(e[4]):a[3]=parseFloat(e[4]))}else{if(!(e=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/)))return(e=t.match(/^(\w+)$/))?"transparent"===e[1]?[0,0,0,0]:i.call(n,e[1])?((a=n[e[1]])[3]=1,a):null:null;for(r=0;r<3;r++)a[r]=Math.round(2.55*parseFloat(e[r+1]));e[4]&&(e[5]?a[3]=.01*parseFloat(e[4]):a[3]=parseFloat(e[4]))}for(r=0;r<3;r++)a[r]=d(a[r],0,255);return a[3]=d(a[3],0,1),a},l.get.hsl=function(t){if(!t)return null;var e=t.match(/^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);if(e){var r=parseFloat(e[4]);return[(parseFloat(e[1])%360+360)%360,d(parseFloat(e[2]),0,100),d(parseFloat(e[3]),0,100),d(isNaN(r)?1:r,0,1)]}return null},l.get.hwb=function(t){if(!t)return null;var e=t.match(/^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);if(e){var r=parseFloat(e[4]);return[(parseFloat(e[1])%360+360)%360,d(parseFloat(e[2]),0,100),d(parseFloat(e[3]),0,100),d(isNaN(r)?1:r,0,1)]}return null},l.to.hex=function(){var t=o(arguments);return"#"+c(t[0])+c(t[1])+c(t[2])+(t[3]<1?c(Math.round(255*t[3])):"")},l.to.rgb=function(){var t=o(arguments);return t.length<4||1===t[3]?"rgb("+Math.round(t[0])+", "+Math.round(t[1])+", "+Math.round(t[2])+")":"rgba("+Math.round(t[0])+", "+Math.round(t[1])+", "+Math.round(t[2])+", "+t[3]+")"},l.to.rgb.percent=function(){var t=o(arguments),e=Math.round(t[0]/255*100),r=Math.round(t[1]/255*100),n=Math.round(t[2]/255*100);return t.length<4||1===t[3]?"rgb("+e+"%, "+r+"%, "+n+"%)":"rgba("+e+"%, "+r+"%, "+n+"%, "+t[3]+")"},l.to.hsl=function(){var t=o(arguments);return t.length<4||1===t[3]?"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)":"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+t[3]+")"},l.to.hwb=function(){var t=o(arguments),e="";return t.length>=4&&1!==t[3]&&(e=", "+t[3]),"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+e+")"},l.to.keyword=function(t){return a[t.slice(0,3)]}},function(t,e,r){"use strict";t.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(t,e,r){"use strict";var n=r(76),o=Array.prototype.concat,i=Array.prototype.slice,a=t.exports=function(t){for(var e=[],r=0,a=t.length;r<a;r++){var s=t[r];n(s)?e=o.call(e,i.call(s)):e.push(s)}return e};a.wrap=function(t){return function(){return t(a(arguments))}}},function(t,e){t.exports=function(t){return!(!t||"string"==typeof t)&&(t instanceof Array||Array.isArray(t)||t.length>=0&&(t.splice instanceof Function||Object.getOwnPropertyDescriptor(t,t.length-1)&&"String"!==t.constructor.name))}},function(t,e,r){var n=r(23),o=r(79),i={};Object.keys(n).forEach((function(t){i[t]={},Object.defineProperty(i[t],"channels",{value:n[t].channels}),Object.defineProperty(i[t],"labels",{value:n[t].labels});var e=o(t);Object.keys(e).forEach((function(r){var n=e[r];i[t][r]=function(t){var e=function(e){if(null==e)return e;arguments.length>1&&(e=Array.prototype.slice.call(arguments));var r=t(e);if("object"==typeof r)for(var n=r.length,o=0;o<n;o++)r[o]=Math.round(r[o]);return r};return"conversion"in t&&(e.conversion=t.conversion),e}(n),i[t][r].raw=function(t){var e=function(e){return null==e?e:(arguments.length>1&&(e=Array.prototype.slice.call(arguments)),t(e))};return"conversion"in t&&(e.conversion=t.conversion),e}(n)}))})),t.exports=i},function(t,e,r){"use strict";t.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(t,e,r){var n=r(23);function o(t){var e=function(){for(var t={},e=Object.keys(n),r=e.length,o=0;o<r;o++)t[e[o]]={distance:-1,parent:null};return t}(),r=[t];for(e[t].distance=0;r.length;)for(var o=r.pop(),i=Object.keys(n[o]),a=i.length,s=0;s<a;s++){var l=i[s],d=e[l];-1===d.distance&&(d.distance=e[o].distance+1,d.parent=o,r.unshift(l))}return e}function i(t,e){return function(r){return e(t(r))}}function a(t,e){for(var r=[e[t].parent,t],o=n[e[t].parent][t],a=e[t].parent;e[a].parent;)r.unshift(e[a].parent),o=i(n[e[a].parent][a],o),a=e[a].parent;return o.conversion=r,o}t.exports=function(t){for(var e=o(t),r={},n=Object.keys(e),i=n.length,s=0;s<i;s++){var l=n[s];null!==e[l].parent&&(r[l]=a(l,e))}return r}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Sigma=e.MouseCaptor=e.QuadTree=e.Camera=void 0;var o=n(r(30));e.Sigma=o.default;var i=n(r(27));e.Camera=i.default;var a=n(r(29));e.QuadTree=a.default;var s=n(r(28));e.MouseCaptor=s.default,e.default=o.default},function(t,e,r){"use strict";(function(t){/*! MIT License Â© Sindre Sorhus */
const r={},n=e=>"undefined"!=typeof self&&self&&e in self?self:"undefined"!=typeof window&&window&&e in window?window:void 0!==t&&t&&e in t?t:"undefined"!=typeof globalThis&&globalThis?globalThis:void 0,o=["Headers","Request","Response","ReadableStream","fetch","AbortController","FormData"];for(const t of o)Object.defineProperty(r,t,{get(){const e=n(t),r=e&&e[t];return"function"==typeof r?r.bind(e):r}});const i=t=>null!==t&&"object"==typeof t,a="function"==typeof r.AbortController,s="function"==typeof r.ReadableStream,l="function"==typeof r.FormData,d=(...t)=>{let e={};for(const r of t)if(Array.isArray(r))Array.isArray(e)||(e=[]),e=[...e,...r];else if(i(r))for(let[t,n]of Object.entries(r))i(n)&&Reflect.has(e,t)&&(n=d(e[t],n)),e={...e,[t]:n};return e},c=["get","post","put","patch","head","delete"],u={json:"application/json",text:"text/*",formData:"multipart/form-data",arrayBuffer:"*/*",blob:"*/*"},p=[413,429,503],h=Symbol("stop");class f extends Error{constructor(t){super(t.statusText||String(0===t.status||t.status?t.status:"Unknown response error")),this.name="HTTPError",this.response=t}}class m extends Error{constructor(){super("Request timed out"),this.name="TimeoutError"}}const g=t=>new Promise(e=>setTimeout(e,t)),b=t=>c.includes(t)?t.toUpperCase():t,v={limit:2,methods:["get","put","head","delete","options","trace"],statusCodes:[408,413,429,500,502,503,504],afterStatusCodes:p},y=(t={})=>{if("number"==typeof t)return{...v,limit:t};if(t.methods&&!Array.isArray(t.methods))throw new Error("retry.methods must be an array");if(t.statusCodes&&!Array.isArray(t.statusCodes))throw new Error("retry.statusCodes must be an array");return{...v,...t,afterStatusCodes:p}};class x{constructor(t,e={}){if(this._retryCount=0,this._input=t,this._options={credentials:this._input.credentials||"same-origin",...e,hooks:d({beforeRequest:[],beforeRetry:[],afterResponse:[]},e.hooks),method:b(e.method||this._input.method),prefixUrl:String(e.prefixUrl||""),retry:y(e.retry),throwHttpErrors:!1!==e.throwHttpErrors,timeout:void 0===e.timeout?1e4:e.timeout},"string"!=typeof this._input&&!(this._input instanceof URL||this._input instanceof r.Request))throw new TypeError("`input` must be a string, URL, or Request");if(this._options.prefixUrl&&"string"==typeof this._input){if(this._input.startsWith("/"))throw new Error("`input` must not begin with a slash when using `prefixUrl`");this._options.prefixUrl.endsWith("/")||(this._options.prefixUrl+="/"),this._input=this._options.prefixUrl+this._input}if(a&&(this.abortController=new r.AbortController,this._options.signal&&this._options.signal.addEventListener("abort",()=>{this.abortController.abort()}),this._options.signal=this.abortController.signal),this.request=new r.Request(this._input,this._options),this._options.searchParams){const t=new URL(this.request.url);t.search=new URLSearchParams(this._options.searchParams),!(l&&this._options.body instanceof r.FormData||this._options.body instanceof URLSearchParams)||this._options.headers&&this._options.headers["content-type"]||this.request.headers.delete("content-type"),this.request=new r.Request(new r.Request(t,this.request),this._options)}void 0!==this._options.json&&(this._options.body=JSON.stringify(this._options.json),this.request.headers.set("content-type","application/json"),this.request=new r.Request(this.request,{body:this._options.body}));const n=async()=>{if(this._options.timeout>2147483647)throw new RangeError("The `timeout` option cannot be greater than 2147483647");await g(1);let t=await this._fetch();for(const e of this._options.hooks.afterResponse){const n=await e(this.request,this._options,t.clone());n instanceof r.Response&&(t=n)}if(!t.ok&&this._options.throwHttpErrors)throw new f(t);if(this._options.onDownloadProgress){if("function"!=typeof this._options.onDownloadProgress)throw new TypeError("The `onDownloadProgress` option must be a function");if(!s)throw new Error("Streams are not supported in your environment. `ReadableStream` is missing.");return this._stream(t.clone(),this._options.onDownloadProgress)}return t},o=this._options.retry.methods.includes(this.request.method.toLowerCase())?this._retry(n):n();for(const[t,e]of Object.entries(u))o[t]=async()=>{this.request.headers.set("accept",this.request.headers.get("accept")||e);const r=(await o).clone();return"json"===t&&204===r.status?"":r[t]()};return o}_calculateRetryDelay(t){if(this._retryCount++,this._retryCount<this._options.retry.limit&&!(t instanceof m)){if(t instanceof f){if(!this._options.retry.statusCodes.includes(t.response.status))return 0;const e=t.response.headers.get("Retry-After");if(e&&this._options.retry.afterStatusCodes.includes(t.response.status)){let t=Number(e);return Number.isNaN(t)?t=Date.parse(e)-Date.now():t*=1e3,void 0!==this._options.retry.maxRetryAfter&&t>this._options.retry.maxRetryAfter?0:t}if(413===t.response.status)return 0}return.3*2**(this._retryCount-1)*1e3}return 0}async _retry(t){try{return await t()}catch(e){const r=Math.min(this._calculateRetryDelay(e),2147483647);if(0!==r&&this._retryCount>0){await g(r);for(const t of this._options.hooks.beforeRetry){if(await t({request:this.request,options:this._options,error:e,response:e.response.clone(),retryCount:this._retryCount})===h)return}return this._retry(t)}if(this._options.throwHttpErrors)throw e}}async _fetch(){for(const t of this._options.hooks.beforeRequest){const e=await t(this.request,this._options);if(e instanceof Request){this.request=e;break}if(e instanceof Response)return e}return!1===this._options.timeout?r.fetch(this.request.clone()):(t=r.fetch(this.request.clone()),e=this._options.timeout,n=this.abortController,new Promise((r,o)=>{const i=setTimeout(()=>{n&&n.abort(),o(new m)},e);t.then(r).catch(o).then(()=>{clearTimeout(i)})}));var t,e,n}_stream(t,e){const n=Number(t.headers.get("content-length"))||0;let o=0;return new r.Response(new r.ReadableStream({start(r){const i=t.body.getReader();e&&e({percent:0,transferredBytes:0,totalBytes:n},new Uint8Array),async function t(){const{done:a,value:s}=await i.read();if(a)r.close();else{if(e){o+=s.byteLength;e({percent:0===n?0:o/n,transferredBytes:o,totalBytes:n},s)}r.enqueue(s),t()}}()}}))}}const w=(...t)=>{for(const e of t)if((!i(e)||Array.isArray(e))&&void 0!==e)throw new TypeError("The `options` argument must be an object");return d({},...t)},_=t=>{const e=(e,r)=>new x(e,w(t,r));for(const r of c)e[r]=(e,n)=>new x(e,w(t,n,{method:r}));return e.HTTPError=f,e.TimeoutError=m,e.create=t=>_(w(t)),e.extend=e=>_(w(t,e)),e.stop=h,e};e.a=_()}).call(this,r(26))},,,,,function(t,e,r){"use strict";r.r(e);var n=r(11),o=r.n(n),i=r(217),a=r.n(i),s=r(218),l=r(24),d=r.n(l),c=(r(61),r(63),r(65),r(66),r(68),r(1)),u=r.n(c),p=(r(70),r(71),r(10)),h=r.n(p);function f(t,e){const r=t.getAttribute("maxDegree");t.forEachNode(n=>{const o=3+27*t.getNodeAttribute(n,e)/r;t.setNodeAttribute(n,"size",o)})}function m(t){r.e(0).then(r.bind(null,222)).then(e=>{(0,e.layout_circlepack)(t)})}function g(t,e,r){const n=u()("#spinner-disp"),i=u()("#layout-controls");let l;u.a.getJSON(M+"/"+e,(function(t){l=t})),u()("#userhashtags-disp").empty(),u()("#userinfo-disp").empty(),u()("#wordcloud-disp").empty(),u()("#comminfo-disp").empty(),T="",console.log("Rendering "+t),window.graph&&window.graph.clear(),i.hide(),n.show(),s.a.get(M+"/"+t).then(t=>t.arrayBuffer()).then(t=>d.a.inflate(t,{to:"string"})).then(e=>(console.assert(t.endsWith("json.gz")),JSON.parse(e))).then(t=>{const e=u()("#sigma-container"),s=o.a.from(t);L=s.getAttribute("max weight");const d=new a.a(s,e[0],{nodeReducer:D,edgeReducer:N,labelRenderer:O,zIndex:!0});d.on("enterNode",({node:t})=>{w=new Set(s.neighbors(t)),w.add(t),_=new Set(s.edges(t)),d.refresh()}),d.on("leaveNode",({node:t})=>{w.clear(),_.clear(),d.refresh()}),d.on("clickNode",({node:t})=>{const e=s.getNodeAttributes(t);T=t,C(t,e,l,r)}),E={},s.forEachNode((function(t,e){E[t]={x:e.x,y:e.y}}));const c=[{id:"",text:""}].concat(u.a.map(s.nodes(),(function(t){return{id:t,text:t,selected:!1}})));console.log("select2 creation");const p=u()(".node-selector");p.empty(),p.select2({placeholder:"Search node",theme:"bootstrap4",data:c}),p.off("select2:select"),p.on("select2:select",t=>{const e=t.params.data.id;!function(t,e,r){console.log("Node selected: "+t),w=new Set(e.neighbors(t)),w.add(t),_=new Set(e.edges(t)),r.refresh()}(e,s,d),T=e,C(e,s.getNodeAttributes(e),l,r)});const h=s.getAttribute("hashtags"),f=[{id:"",text:""}].concat(u.a.map(h,(function(t){return{id:t,text:t,selected:!1}}))),m=u()(".hashtag-selector");m.empty(),m.select2({placeholder:"Search hashtag",theme:"bootstrap4",data:f}),m.off("select2:select"),m.on("select2:select",t=>{const e=t.params.data.id;!function(t,e,r){k.clear(),t.forEachNode(r=>{t.getNodeAttribute(r,"all_hashtags").includes(e)&&k.add(r)}),r.refresh()}(s,e,d)}),S=s.getAttribute("max hop"),A=S,x&&x.slider("destroy"),x=u()("#hopSlider").slider({min:0,max:S,value:S}),u()("#hopSlider").on("slide",(function(t){A=t.value,d.refresh()})),d.refresh(),window.graph=s,window.renderer=d,window.camera=d.camera,n.hide(),i.show()})}let b,v,y,x,w=new Set,_=new Set,k=new Set,E={},C=function(t,e,n,o){if(""===t)return;u()("#userinfo-disp")[0].innerHTML=function(t,e){const r=e(t.user_details);return`<h2>${e(t.name)}</h2><p>${r}</p>`}(e,o?t=>JSON.parse(t):t=>t),function(t,e,n,o){if(""===t)return;Promise.all([r.e(5),r.e(3)]).then(r.bind(null,220)).then(t=>{const r=t.plotHashtags,n=e.all_hashtags||"[]";u()("#userhashtags-disp").empty(),n.length>0&&r(e.all_hashtags||"[]")})}(t,e),function(t,e,r,n){if(""===t)return;const o=u()("#comminfo-disp"),i=r[e.community];o[0].innerHTML=function(t,e){const r=(100*t.density).toFixed(1);return`<h2>Community ${e}</h2><p>Size: ${t.size}  Weighted size: ${t.weightedSize}</p><p>Density: ${r} %</p>`}(i,e.community)}(t,e,n),function(t,e,n,o){if(""===t)return;const i=n[e.community];Promise.all([r.e(4),r.e(2)]).then(r.bind(null,221)).then(t=>{const e=t.plotCommunityWordcloud;u()("#wordcloud-disp").empty(),e(i)})}(t,e,n)},T="",S=5,A=5,L=1;const D=(t,e)=>{if(w.has(t))return{...e,color:"#f00",zIndex:1};if(k.has(t))return{...e,color:"#0f0",zIndex:1};if(e.spikyball_hop>A){const t=e.spikyball_hop-A,r=Math.max(.05,.3-.1*t),n=h()(e.color).darken(1.5*t/S).desaturate(1.5*t/S).alpha(r);return{...e,color:n.rgb().string(),zIndex:0}}return e},N=(t,e)=>{if(_.has(t))return{...e,color:"#ff0000",zIndex:1};const r=e.weight,n=h()("#111").alpha(.1+.7*r*(A+1)/(L*(S+1)));return{...e,color:n.rgb().string()}},O=(t,e,r)=>{const n=r.labelSize,o=r.labelFont,i=r.labelWeight;t.fillStyle="#333",t.font=`${i} ${n}px ${o}`,t.fillText(e.label,e.x+e.size+3,e.y+n/3)},M="https://os.unil.cloud.switch.ch/lts2-sad/twitter/results";let j=[];u.a.getJSON(M+"/index.json",(function(t){j=t;const e=u()("#graph-selector");e.empty(),u.a.each(j,(function(t,r){e.append(u()('<a class="dropdown-item"></a>').attr("data-graph",r.graph).attr("id",r.label).attr("data-label",r.label).attr("data-escape",r.escape).attr("data-cluster",r.clusterInfo).text(r.label))})),u()(".dropdown-menu").click(t=>{const r=u()(t.target);if(console.log("Clicked menu: "+r.data("label")),r.hasClass("active"))return;e.children().each((function(){u()(this).removeClass("active")}));const n=u()("#"+r.data("label"));n.addClass("active"),b=n.data("graph"),y=n.data("cluster"),v=n.data("escape"),g(b,y,v),u()("#fa2").parent().addClass("active"),u()("#circlepack").parent().removeClass("active"),u()("#degree").parent().addClass("active"),u()("#indegree").parent().removeClass("active"),u()("#outdegree").parent().removeClass("active")}),u()("#"+j[0].label).addClass("active"),b=j[0].graph,y=j[0].clusterInfo,v=j[0].escape,g(b,y,v)})),u()("#fa2").change(t=>{console.log("FA2 layout -> reload coords"),window.graph.forEachNode((function(t,e){window.graph.setNodeAttribute(t,"x",E[t].x),window.graph.setNodeAttribute(t,"y",E[t].y)}))}),u()("#circlepack").change(t=>{console.log("Circlepack layout"),m(window.graph)}),u()("#degree").change(t=>{console.log("size <=> degree"),f(window.graph,"degree"),u()("#circlepack").parent().hasClass("active")&&m(window.graph)}),u()("#indegree").change(t=>{console.log("size <=> in-degree"),f(window.graph,"inDegree"),u()("#circlepack").parent().hasClass("active")&&m(window.graph)}),u()("#outdegree").change(t=>{console.log("size <=> out-degree"),f(window.graph,"outDegree"),u()("#circlepack").parent().hasClass("active")&&m(window.graph)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,